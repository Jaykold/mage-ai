/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arrays.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArrayQueue\": function() { return /* binding */ ArrayQueue; },\n/* harmony export */   \"CallbackIterable\": function() { return /* binding */ CallbackIterable; },\n/* harmony export */   \"CompareResult\": function() { return /* binding */ CompareResult; },\n/* harmony export */   \"Permutation\": function() { return /* binding */ Permutation; },\n/* harmony export */   \"arrayInsert\": function() { return /* binding */ arrayInsert; },\n/* harmony export */   \"asArray\": function() { return /* binding */ asArray; },\n/* harmony export */   \"binarySearch\": function() { return /* binding */ binarySearch; },\n/* harmony export */   \"binarySearch2\": function() { return /* binding */ binarySearch2; },\n/* harmony export */   \"booleanComparator\": function() { return /* binding */ booleanComparator; },\n/* harmony export */   \"coalesce\": function() { return /* binding */ coalesce; },\n/* harmony export */   \"coalesceInPlace\": function() { return /* binding */ coalesceInPlace; },\n/* harmony export */   \"compareBy\": function() { return /* binding */ compareBy; },\n/* harmony export */   \"distinct\": function() { return /* binding */ distinct; },\n/* harmony export */   \"equals\": function() { return /* binding */ equals; },\n/* harmony export */   \"firstOrDefault\": function() { return /* binding */ firstOrDefault; },\n/* harmony export */   \"forEachAdjacent\": function() { return /* binding */ forEachAdjacent; },\n/* harmony export */   \"forEachWithNeighbors\": function() { return /* binding */ forEachWithNeighbors; },\n/* harmony export */   \"groupAdjacentBy\": function() { return /* binding */ groupAdjacentBy; },\n/* harmony export */   \"groupBy\": function() { return /* binding */ groupBy; },\n/* harmony export */   \"insertInto\": function() { return /* binding */ insertInto; },\n/* harmony export */   \"isFalsyOrEmpty\": function() { return /* binding */ isFalsyOrEmpty; },\n/* harmony export */   \"isNonEmptyArray\": function() { return /* binding */ isNonEmptyArray; },\n/* harmony export */   \"numberComparator\": function() { return /* binding */ numberComparator; },\n/* harmony export */   \"pushMany\": function() { return /* binding */ pushMany; },\n/* harmony export */   \"pushToEnd\": function() { return /* binding */ pushToEnd; },\n/* harmony export */   \"pushToStart\": function() { return /* binding */ pushToStart; },\n/* harmony export */   \"quickSelect\": function() { return /* binding */ quickSelect; },\n/* harmony export */   \"range\": function() { return /* binding */ range; },\n/* harmony export */   \"removeFastWithoutKeepingOrder\": function() { return /* binding */ removeFastWithoutKeepingOrder; },\n/* harmony export */   \"reverseOrder\": function() { return /* binding */ reverseOrder; },\n/* harmony export */   \"splice\": function() { return /* binding */ splice; },\n/* harmony export */   \"tail\": function() { return /* binding */ tail; },\n/* harmony export */   \"tail2\": function() { return /* binding */ tail2; },\n/* harmony export */   \"tieBreakComparators\": function() { return /* binding */ tieBreakComparators; }\n/* harmony export */ });\n/**\n * Returns the last element of an array.\n * @param array The array.\n * @param n Which element from the end (default is zero).\n */\nfunction tail(array, n = 0) {\n  return array[array.length - (1 + n)];\n}\nfunction tail2(arr) {\n  if (arr.length === 0) {\n    throw new Error('Invalid tail call');\n  }\n  return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nfunction equals(one, other, itemEquals = (a, b) => a === b) {\n  if (one === other) {\n    return true;\n  }\n  if (!one || !other) {\n    return false;\n  }\n  if (one.length !== other.length) {\n    return false;\n  }\n  for (let i = 0, len = one.length; i < len; i++) {\n    if (!itemEquals(one[i], other[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Remove the element at `index` by replacing it with the last element. This is faster than `splice`\n * but changes the order of the array\n */\nfunction removeFastWithoutKeepingOrder(array, index) {\n  const last = array.length - 1;\n  if (index < last) {\n    array[index] = array[last];\n  }\n  array.pop();\n}\n/**\n * Performs a binary search algorithm over a sorted array.\n *\n * @param array The array being searched.\n * @param key The value we search for.\n * @param comparator A function that takes two array elements and returns zero\n *   if they are equal, a negative number if the first element precedes the\n *   second one in the sorting order, or a positive number if the second element\n *   precedes the first one.\n * @return See {@link binarySearch2}\n */\nfunction binarySearch(array, key, comparator) {\n  return binarySearch2(array.length, i => comparator(array[i], key));\n}\n/**\n * Performs a binary search algorithm over a sorted collection. Useful for cases\n * when we need to perform a binary search over something that isn't actually an\n * array, and converting data to an array would defeat the use of binary search\n * in the first place.\n *\n * @param length The collection length.\n * @param compareToKey A function that takes an index of an element in the\n *   collection and returns zero if the value at this index is equal to the\n *   search key, a negative number if the value precedes the search key in the\n *   sorting order, or a positive number if the search key precedes the value.\n * @return A non-negative index of an element, if found. If not found, the\n *   result is -(n+1) (or ~n, using bitwise notation), where n is the index\n *   where the key should be inserted to maintain the sorting order.\n */\nfunction binarySearch2(length, compareToKey) {\n  let low = 0,\n    high = length - 1;\n  while (low <= high) {\n    const mid = (low + high) / 2 | 0;\n    const comp = compareToKey(mid);\n    if (comp < 0) {\n      low = mid + 1;\n    } else if (comp > 0) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(low + 1);\n}\nfunction quickSelect(nth, data, compare) {\n  nth = nth | 0;\n  if (nth >= data.length) {\n    throw new TypeError('invalid index');\n  }\n  const pivotValue = data[Math.floor(data.length * Math.random())];\n  const lower = [];\n  const higher = [];\n  const pivots = [];\n  for (const value of data) {\n    const val = compare(value, pivotValue);\n    if (val < 0) {\n      lower.push(value);\n    } else if (val > 0) {\n      higher.push(value);\n    } else {\n      pivots.push(value);\n    }\n  }\n  if (nth < lower.length) {\n    return quickSelect(nth, lower, compare);\n  } else if (nth < lower.length + pivots.length) {\n    return pivots[0];\n  } else {\n    return quickSelect(nth - (lower.length + pivots.length), higher, compare);\n  }\n}\nfunction groupBy(data, compare) {\n  const result = [];\n  let currentGroup = undefined;\n  for (const element of data.slice(0).sort(compare)) {\n    if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n      currentGroup = [element];\n      result.push(currentGroup);\n    } else {\n      currentGroup.push(element);\n    }\n  }\n  return result;\n}\n/**\n * Splits the given items into a list of (non-empty) groups.\n * `shouldBeGrouped` is used to decide if two consecutive items should be in the same group.\n * The order of the items is preserved.\n */\nfunction* groupAdjacentBy(items, shouldBeGrouped) {\n  let currentGroup;\n  let last;\n  for (const item of items) {\n    if (last !== undefined && shouldBeGrouped(last, item)) {\n      currentGroup.push(item);\n    } else {\n      if (currentGroup) {\n        yield currentGroup;\n      }\n      currentGroup = [item];\n    }\n    last = item;\n  }\n  if (currentGroup) {\n    yield currentGroup;\n  }\n}\nfunction forEachAdjacent(arr, f) {\n  for (let i = 0; i <= arr.length; i++) {\n    f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);\n  }\n}\nfunction forEachWithNeighbors(arr, f) {\n  for (let i = 0; i < arr.length; i++) {\n    f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);\n  }\n}\n/**\n * @returns New array with all falsy values removed. The original array IS NOT modified.\n */\nfunction coalesce(array) {\n  return array.filter(e => !!e);\n}\n/**\n * Remove all falsy values from `array`. The original array IS modified.\n */\nfunction coalesceInPlace(array) {\n  let to = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (!!array[i]) {\n      array[to] = array[i];\n      to += 1;\n    }\n  }\n  array.length = to;\n}\n/**\n * @returns false if the provided object is an array and not empty.\n */\nfunction isFalsyOrEmpty(obj) {\n  return !Array.isArray(obj) || obj.length === 0;\n}\nfunction isNonEmptyArray(obj) {\n  return Array.isArray(obj) && obj.length > 0;\n}\n/**\n * Removes duplicates from the given array. The optional keyFn allows to specify\n * how elements are checked for equality by returning an alternate value for each.\n */\nfunction distinct(array, keyFn = value => value) {\n  const seen = new Set();\n  return array.filter(element => {\n    const key = keyFn(element);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n}\nfunction firstOrDefault(array, notFoundValue) {\n  return array.length > 0 ? array[0] : notFoundValue;\n}\nfunction range(arg, to) {\n  let from = typeof to === 'number' ? arg : 0;\n  if (typeof to === 'number') {\n    from = arg;\n  } else {\n    from = 0;\n    to = arg;\n  }\n  const result = [];\n  if (from <= to) {\n    for (let i = from; i < to; i++) {\n      result.push(i);\n    }\n  } else {\n    for (let i = from; i > to; i--) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n/**\n * Insert `insertArr` inside `target` at `insertIndex`.\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\n */\nfunction arrayInsert(target, insertIndex, insertArr) {\n  const before = target.slice(0, insertIndex);\n  const after = target.slice(insertIndex);\n  return before.concat(insertArr, after);\n}\n/**\n * Pushes an element to the start of the array, if found.\n */\nfunction pushToStart(arr, value) {\n  const index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.unshift(value);\n  }\n}\n/**\n * Pushes an element to the end of the array, if found.\n */\nfunction pushToEnd(arr, value) {\n  const index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.push(value);\n  }\n}\nfunction pushMany(arr, items) {\n  for (const item of items) {\n    arr.push(item);\n  }\n}\nfunction asArray(x) {\n  return Array.isArray(x) ? x : [x];\n}\n/**\n * Insert the new items in the array.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start inserting elements.\n * @param newItems The items to be inserted\n */\nfunction insertInto(array, start, newItems) {\n  const startIdx = getActualStartIndex(array, start);\n  const originalLength = array.length;\n  const newItemsLength = newItems.length;\n  array.length = originalLength + newItemsLength;\n  // Move the items after the start index, start from the end so that we don't overwrite any value.\n  for (let i = originalLength - 1; i >= startIdx; i--) {\n    array[i + newItemsLength] = array[i];\n  }\n  for (let i = 0; i < newItemsLength; i++) {\n    array[i + startIdx] = newItems[i];\n  }\n}\n/**\n * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it\n * can only support limited number of items due to the maximum call stack size limit.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start removing elements.\n * @param deleteCount The number of elements to remove.\n * @returns An array containing the elements that were deleted.\n */\nfunction splice(array, start, deleteCount, newItems) {\n  const index = getActualStartIndex(array, start);\n  let result = array.splice(index, deleteCount);\n  if (result === undefined) {\n    // see https://bugs.webkit.org/show_bug.cgi?id=261140\n    result = [];\n  }\n  insertInto(array, index, newItems);\n  return result;\n}\n/**\n * Determine the actual start index (same logic as the native splice() or slice())\n * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.\n * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.\n * @param array The target array.\n * @param start The operation index.\n */\nfunction getActualStartIndex(array, start) {\n  return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\n}\nvar CompareResult;\n(function (CompareResult) {\n  function isLessThan(result) {\n    return result < 0;\n  }\n  CompareResult.isLessThan = isLessThan;\n  function isLessThanOrEqual(result) {\n    return result <= 0;\n  }\n  CompareResult.isLessThanOrEqual = isLessThanOrEqual;\n  function isGreaterThan(result) {\n    return result > 0;\n  }\n  CompareResult.isGreaterThan = isGreaterThan;\n  function isNeitherLessOrGreaterThan(result) {\n    return result === 0;\n  }\n  CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;\n  CompareResult.greaterThan = 1;\n  CompareResult.lessThan = -1;\n  CompareResult.neitherLessOrGreaterThan = 0;\n})(CompareResult || (CompareResult = {}));\nfunction compareBy(selector, comparator) {\n  return (a, b) => comparator(selector(a), selector(b));\n}\nfunction tieBreakComparators(...comparators) {\n  return (item1, item2) => {\n    for (const comparator of comparators) {\n      const result = comparator(item1, item2);\n      if (!CompareResult.isNeitherLessOrGreaterThan(result)) {\n        return result;\n      }\n    }\n    return CompareResult.neitherLessOrGreaterThan;\n  };\n}\n/**\n * The natural order on numbers.\n*/\nconst numberComparator = (a, b) => a - b;\nconst booleanComparator = (a, b) => numberComparator(a ? 1 : 0, b ? 1 : 0);\nfunction reverseOrder(comparator) {\n  return (a, b) => -comparator(a, b);\n}\nclass ArrayQueue {\n  /**\n   * Constructs a queue that is backed by the given array. Runtime is O(1).\n  */\n  constructor(items) {\n    this.items = items;\n    this.firstIdx = 0;\n    this.lastIdx = this.items.length - 1;\n  }\n  get length() {\n    return this.lastIdx - this.firstIdx + 1;\n  }\n  /**\n   * Consumes elements from the beginning of the queue as long as the predicate returns true.\n   * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).\n  */\n  takeWhile(predicate) {\n    // P(k) := k <= this.lastIdx && predicate(this.items[k])\n    // Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)\n    let startIdx = this.firstIdx;\n    while (startIdx < this.items.length && predicate(this.items[startIdx])) {\n      startIdx++;\n    }\n    const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\n    this.firstIdx = startIdx;\n    return result;\n  }\n  /**\n   * Consumes elements from the end of the queue as long as the predicate returns true.\n   * If no elements were consumed, `null` is returned.\n   * The result has the same order as the underlying array!\n  */\n  takeFromEndWhile(predicate) {\n    // P(k) := this.firstIdx >= k && predicate(this.items[k])\n    // Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]\n    let endIdx = this.lastIdx;\n    while (endIdx >= 0 && predicate(this.items[endIdx])) {\n      endIdx--;\n    }\n    const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\n    this.lastIdx = endIdx;\n    return result;\n  }\n  peek() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    return this.items[this.firstIdx];\n  }\n  dequeue() {\n    const result = this.items[this.firstIdx];\n    this.firstIdx++;\n    return result;\n  }\n  takeCount(count) {\n    const result = this.items.slice(this.firstIdx, this.firstIdx + count);\n    this.firstIdx += count;\n    return result;\n  }\n}\n/**\n * This class is faster than an iterator and array for lazy computed data.\n*/\nclass CallbackIterable {\n  constructor(\n  /**\n   * Calls the callback for every item.\n   * Stops when the callback returns false.\n  */\n  iterate) {\n    this.iterate = iterate;\n  }\n  toArray() {\n    const result = [];\n    this.iterate(item => {\n      result.push(item);\n      return true;\n    });\n    return result;\n  }\n  filter(predicate) {\n    return new CallbackIterable(cb => this.iterate(item => predicate(item) ? cb(item) : true));\n  }\n  map(mapFn) {\n    return new CallbackIterable(cb => this.iterate(item => cb(mapFn(item))));\n  }\n  findLast(predicate) {\n    let result;\n    this.iterate(item => {\n      if (predicate(item)) {\n        result = item;\n      }\n      return true;\n    });\n    return result;\n  }\n  findLastMaxBy(comparator) {\n    let result;\n    let first = true;\n    this.iterate(item => {\n      if (first || CompareResult.isGreaterThan(comparator(item, result))) {\n        first = false;\n        result = item;\n      }\n      return true;\n    });\n    return result;\n  }\n}\nCallbackIterable.empty = new CallbackIterable(_callback => {});\n/**\n * Represents a re-arrangement of items in an array.\n */\nclass Permutation {\n  constructor(_indexMap) {\n    this._indexMap = _indexMap;\n  }\n  /**\n   * Returns a permutation that sorts the given array according to the given compare function.\n   */\n  static createSortPermutation(arr, compareFn) {\n    const sortIndices = Array.from(arr.keys()).sort((index1, index2) => compareFn(arr[index1], arr[index2]));\n    return new Permutation(sortIndices);\n  }\n  /**\n   * Returns a new array with the elements of the given array re-arranged according to this permutation.\n   */\n  apply(arr) {\n    return arr.map((_, index) => arr[this._indexMap[index]]);\n  }\n  /**\n   * Returns a new permutation that undoes the re-arrangement of this permutation.\n  */\n  inverse() {\n    const inverseIndexMap = this._indexMap.slice();\n    for (let i = 0; i < this._indexMap.length; i++) {\n      inverseIndexMap[this._indexMap[i]] = i;\n    }\n    return new Permutation(inverseIndexMap);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/arrays.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MonotonousArray\": function() { return /* binding */ MonotonousArray; },\n/* harmony export */   \"findFirstIdxMonotonousOrArrLen\": function() { return /* binding */ findFirstIdxMonotonousOrArrLen; },\n/* harmony export */   \"findFirstMax\": function() { return /* binding */ findFirstMax; },\n/* harmony export */   \"findFirstMin\": function() { return /* binding */ findFirstMin; },\n/* harmony export */   \"findFirstMonotonous\": function() { return /* binding */ findFirstMonotonous; },\n/* harmony export */   \"findLast\": function() { return /* binding */ findLast; },\n/* harmony export */   \"findLastIdx\": function() { return /* binding */ findLastIdx; },\n/* harmony export */   \"findLastIdxMonotonous\": function() { return /* binding */ findLastIdxMonotonous; },\n/* harmony export */   \"findLastMax\": function() { return /* binding */ findLastMax; },\n/* harmony export */   \"findLastMonotonous\": function() { return /* binding */ findLastMonotonous; },\n/* harmony export */   \"findMaxIdx\": function() { return /* binding */ findMaxIdx; },\n/* harmony export */   \"mapFindFirst\": function() { return /* binding */ mapFindFirst; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction findLast(array, predicate) {\n  const idx = findLastIdx(array, predicate);\n  if (idx === -1) {\n    return undefined;\n  }\n  return array[idx];\n}\nfunction findLastIdx(array, predicate, fromIndex = array.length - 1) {\n  for (let i = fromIndex; i >= 0; i--) {\n    const element = array[i];\n    if (predicate(element)) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Finds the last item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\n *\n * @returns `undefined` if no item matches, otherwise the last item that matches the predicate.\n */\nfunction findLastMonotonous(array, predicate) {\n  const idx = findLastIdxMonotonous(array, predicate);\n  return idx === -1 ? undefined : array[idx];\n}\n/**\n * Finds the last item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\n *\n * @returns `startIdx - 1` if predicate is false for all items, otherwise the index of the last item that matches the predicate.\n */\nfunction findLastIdxMonotonous(array, predicate, startIdx = 0, endIdxEx = array.length) {\n  let i = startIdx;\n  let j = endIdxEx;\n  while (i < j) {\n    const k = Math.floor((i + j) / 2);\n    if (predicate(array[k])) {\n      i = k + 1;\n    } else {\n      j = k;\n    }\n  }\n  return i - 1;\n}\n/**\n * Finds the first item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!\n *\n * @returns `undefined` if no item matches, otherwise the first item that matches the predicate.\n */\nfunction findFirstMonotonous(array, predicate) {\n  const idx = findFirstIdxMonotonousOrArrLen(array, predicate);\n  return idx === array.length ? undefined : array[idx];\n}\n/**\n * Finds the first item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!\n *\n * @returns `endIdxEx` if predicate is false for all items, otherwise the index of the first item that matches the predicate.\n */\nfunction findFirstIdxMonotonousOrArrLen(array, predicate, startIdx = 0, endIdxEx = array.length) {\n  let i = startIdx;\n  let j = endIdxEx;\n  while (i < j) {\n    const k = Math.floor((i + j) / 2);\n    if (predicate(array[k])) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  return i;\n}\n/**\n * Use this when\n * * You have a sorted array\n * * You query this array with a monotonous predicate to find the last item that has a certain property.\n * * You query this array multiple times with monotonous predicates that get weaker and weaker.\n */\nclass MonotonousArray {\n  constructor(_array) {\n    this._array = _array;\n    this._findLastMonotonousLastIdx = 0;\n  }\n  /**\n   * The predicate must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\n   * For subsequent calls, current predicate must be weaker than (or equal to) the previous predicate, i.e. more entries must be `true`.\n   */\n  findLastMonotonous(predicate) {\n    if (MonotonousArray.assertInvariants) {\n      if (this._prevFindLastPredicate) {\n        for (const item of this._array) {\n          if (this._prevFindLastPredicate(item) && !predicate(item)) {\n            throw new Error('MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.');\n          }\n        }\n      }\n      this._prevFindLastPredicate = predicate;\n    }\n    const idx = findLastIdxMonotonous(this._array, predicate, this._findLastMonotonousLastIdx);\n    this._findLastMonotonousLastIdx = idx + 1;\n    return idx === -1 ? undefined : this._array[idx];\n  }\n}\nMonotonousArray.assertInvariants = false;\n/**\n * Returns the first item that is equal to or greater than every other item.\n*/\nfunction findFirstMax(array, comparator) {\n  if (array.length === 0) {\n    return undefined;\n  }\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const item = array[i];\n    if (comparator(item, max) > 0) {\n      max = item;\n    }\n  }\n  return max;\n}\n/**\n * Returns the last item that is equal to or greater than every other item.\n*/\nfunction findLastMax(array, comparator) {\n  if (array.length === 0) {\n    return undefined;\n  }\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const item = array[i];\n    if (comparator(item, max) >= 0) {\n      max = item;\n    }\n  }\n  return max;\n}\n/**\n * Returns the first item that is equal to or less than every other item.\n*/\nfunction findFirstMin(array, comparator) {\n  return findFirstMax(array, (a, b) => -comparator(a, b));\n}\nfunction findMaxIdx(array, comparator) {\n  if (array.length === 0) {\n    return -1;\n  }\n  let maxIdx = 0;\n  for (let i = 1; i < array.length; i++) {\n    const item = array[i];\n    if (comparator(item, array[maxIdx]) > 0) {\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n}\n/**\n * Returns the first mapped value of the array which is not undefined.\n */\nfunction mapFindFirst(items, mapFn) {\n  for (const value of items) {\n    const mapped = mapFn(value);\n    if (mapped !== undefined) {\n      return mapped;\n    }\n  }\n  return undefined;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/assert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/assert.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assertFn\": function() { return /* binding */ assertFn; },\n/* harmony export */   \"assertNever\": function() { return /* binding */ assertNever; },\n/* harmony export */   \"checkAdjacentItems\": function() { return /* binding */ checkAdjacentItems; },\n/* harmony export */   \"ok\": function() { return /* binding */ ok; },\n/* harmony export */   \"softAssert\": function() { return /* binding */ softAssert; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.\n *\n * @deprecated Use `assert(...)` instead.\n * This method is usually used like this:\n * ```ts\n * import * as assert from 'vs/base/common/assert';\n * assert.ok(...);\n * ```\n *\n * However, `assert` in that example is a user chosen name.\n * There is no tooling for generating such an import statement.\n * Thus, the `assert(...)` function should be used instead.\n */\nfunction ok(value, message) {\n  if (!value) {\n    throw new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');\n  }\n}\nfunction assertNever(value, message = 'Unreachable') {\n  throw new Error(message);\n}\n/**\n * Like assert, but doesn't throw.\n */\nfunction softAssert(condition) {\n  if (!condition) {\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('Soft Assertion Failed'));\n  }\n}\n/**\n * condition must be side-effect free!\n */\nfunction assertFn(condition) {\n  if (!condition()) {\n    // eslint-disable-next-line no-debugger\n    debugger;\n    // Reevaluate `condition` again to make debugging easier\n    condition();\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('Assertion Failed'));\n  }\n}\nfunction checkAdjacentItems(items, predicate) {\n  let i = 0;\n  while (i < items.length - 1) {\n    const a = items[i];\n    const b = items[i + 1];\n    if (!predicate(a, b)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXNzZXJ0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ29FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRSxFQUFFQSxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtFQUMvQixJQUFJLENBQUNELEtBQUssRUFBRTtJQUNSLE1BQU0sSUFBSUUsS0FBSyxDQUFDRCxPQUFPLEdBQUcscUJBQXFCQSxPQUFPLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQztFQUNuRjtBQUNKO0FBQ08sU0FBU0UsV0FBV0EsQ0FBQ0gsS0FBSyxFQUFFQyxPQUFPLEdBQUcsYUFBYSxFQUFFO0VBQ3hELE1BQU0sSUFBSUMsS0FBSyxDQUFDRCxPQUFPLENBQUM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyxVQUFVQSxDQUFDQyxTQUFTLEVBQUU7RUFDbEMsSUFBSSxDQUFDQSxTQUFTLEVBQUU7SUFDWlAsNkRBQWlCLENBQUMsSUFBSUQsMERBQWtCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztFQUN0RTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU1MsUUFBUUEsQ0FBQ0QsU0FBUyxFQUFFO0VBQ2hDLElBQUksQ0FBQ0EsU0FBUyxDQUFDLENBQUMsRUFBRTtJQUNkO0lBQ0E7SUFDQTtJQUNBQSxTQUFTLENBQUMsQ0FBQztJQUNYUCw2REFBaUIsQ0FBQyxJQUFJRCwwREFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0VBQ2pFO0FBQ0o7QUFDTyxTQUFTVSxrQkFBa0JBLENBQUNDLEtBQUssRUFBRUMsU0FBUyxFQUFFO0VBQ2pELElBQUlDLENBQUMsR0FBRyxDQUFDO0VBQ1QsT0FBT0EsQ0FBQyxHQUFHRixLQUFLLENBQUNHLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDekIsTUFBTUMsQ0FBQyxHQUFHSixLQUFLLENBQUNFLENBQUMsQ0FBQztJQUNsQixNQUFNRyxDQUFDLEdBQUdMLEtBQUssQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUNELFNBQVMsQ0FBQ0csQ0FBQyxFQUFFQyxDQUFDLENBQUMsRUFBRTtNQUNsQixPQUFPLEtBQUs7SUFDaEI7SUFDQUgsQ0FBQyxFQUFFO0VBQ1A7RUFDQSxPQUFPLElBQUk7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXNzZXJ0LmpzPzkxN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBCdWdJbmRpY2F0aW5nRXJyb3IsIG9uVW5leHBlY3RlZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3Igd2l0aCB0aGUgcHJvdmlkZWQgbWVzc2FnZSBpZiB0aGUgcHJvdmlkZWQgdmFsdWUgZG9lcyBub3QgZXZhbHVhdGUgdG8gYSB0cnVlIEphdmFzY3JpcHQgdmFsdWUuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBhc3NlcnQoLi4uKWAgaW5zdGVhZC5cbiAqIFRoaXMgbWV0aG9kIGlzIHVzdWFsbHkgdXNlZCBsaWtlIHRoaXM6XG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ3ZzL2Jhc2UvY29tbW9uL2Fzc2VydCc7XG4gKiBhc3NlcnQub2soLi4uKTtcbiAqIGBgYFxuICpcbiAqIEhvd2V2ZXIsIGBhc3NlcnRgIGluIHRoYXQgZXhhbXBsZSBpcyBhIHVzZXIgY2hvc2VuIG5hbWUuXG4gKiBUaGVyZSBpcyBubyB0b29saW5nIGZvciBnZW5lcmF0aW5nIHN1Y2ggYW4gaW1wb3J0IHN0YXRlbWVudC5cbiAqIFRodXMsIHRoZSBgYXNzZXJ0KC4uLilgIGZ1bmN0aW9uIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgPyBgQXNzZXJ0aW9uIGZhaWxlZCAoJHttZXNzYWdlfSlgIDogJ0Fzc2VydGlvbiBGYWlsZWQnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TmV2ZXIodmFsdWUsIG1lc3NhZ2UgPSAnVW5yZWFjaGFibGUnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xufVxuLyoqXG4gKiBMaWtlIGFzc2VydCwgYnV0IGRvZXNuJ3QgdGhyb3cuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzb2Z0QXNzZXJ0KGNvbmRpdGlvbikge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIG9uVW5leHBlY3RlZEVycm9yKG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ1NvZnQgQXNzZXJ0aW9uIEZhaWxlZCcpKTtcbiAgICB9XG59XG4vKipcbiAqIGNvbmRpdGlvbiBtdXN0IGJlIHNpZGUtZWZmZWN0IGZyZWUhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGbihjb25kaXRpb24pIHtcbiAgICBpZiAoIWNvbmRpdGlvbigpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgLy8gUmVldmFsdWF0ZSBgY29uZGl0aW9uYCBhZ2FpbiB0byBtYWtlIGRlYnVnZ2luZyBlYXNpZXJcbiAgICAgICAgY29uZGl0aW9uKCk7XG4gICAgICAgIG9uVW5leHBlY3RlZEVycm9yKG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ0Fzc2VydGlvbiBGYWlsZWQnKSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQWRqYWNlbnRJdGVtcyhpdGVtcywgcHJlZGljYXRlKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICBjb25zdCBhID0gaXRlbXNbaV07XG4gICAgICAgIGNvbnN0IGIgPSBpdGVtc1tpICsgMV07XG4gICAgICAgIGlmICghcHJlZGljYXRlKGEsIGIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJuYW1lcyI6WyJCdWdJbmRpY2F0aW5nRXJyb3IiLCJvblVuZXhwZWN0ZWRFcnJvciIsIm9rIiwidmFsdWUiLCJtZXNzYWdlIiwiRXJyb3IiLCJhc3NlcnROZXZlciIsInNvZnRBc3NlcnQiLCJjb25kaXRpb24iLCJhc3NlcnRGbiIsImNoZWNrQWRqYWNlbnRJdGVtcyIsIml0ZW1zIiwicHJlZGljYXRlIiwiaSIsImxlbmd0aCIsImEiLCJiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/assert.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cache.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cache.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CachedFunction\": function() { return /* binding */ CachedFunction; },\n/* harmony export */   \"LRUCachedFunction\": function() { return /* binding */ LRUCachedFunction; },\n/* harmony export */   \"identity\": function() { return /* binding */ identity; }\n/* harmony export */ });\nfunction identity(t) {\n  return t;\n}\n/**\n * Uses a LRU cache to make a given parametrized function cached.\n * Caches just the last key/value.\n*/\nclass LRUCachedFunction {\n  constructor(arg1, arg2) {\n    this.lastCache = undefined;\n    this.lastArgKey = undefined;\n    if (typeof arg1 === 'function') {\n      this._fn = arg1;\n      this._computeKey = identity;\n    } else {\n      this._fn = arg2;\n      this._computeKey = arg1.getCacheKey;\n    }\n  }\n  get(arg) {\n    const key = this._computeKey(arg);\n    if (this.lastArgKey !== key) {\n      this.lastArgKey = key;\n      this.lastCache = this._fn(arg);\n    }\n    return this.lastCache;\n  }\n}\n/**\n * Uses an unbounded cache to memoize the results of the given function.\n*/\nclass CachedFunction {\n  get cachedValues() {\n    return this._map;\n  }\n  constructor(arg1, arg2) {\n    this._map = new Map();\n    this._map2 = new Map();\n    if (typeof arg1 === 'function') {\n      this._fn = arg1;\n      this._computeKey = identity;\n    } else {\n      this._fn = arg2;\n      this._computeKey = arg1.getCacheKey;\n    }\n  }\n  get(arg) {\n    const key = this._computeKey(arg);\n    if (this._map2.has(key)) {\n      return this._map2.get(key);\n    }\n    const value = this._fn(arg);\n    this._map.set(arg, value);\n    this._map2.set(key, value);\n    return value;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FjaGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sU0FBU0EsUUFBUUEsQ0FBQ0MsQ0FBQyxFQUFFO0VBQ3hCLE9BQU9BLENBQUM7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUMsaUJBQWlCLENBQUM7RUFDM0JDLFdBQVdBLENBQUNDLElBQUksRUFBRUMsSUFBSSxFQUFFO0lBQ3BCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQyxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsVUFBVSxHQUFHRCxTQUFTO0lBQzNCLElBQUksT0FBT0gsSUFBSSxLQUFLLFVBQVUsRUFBRTtNQUM1QixJQUFJLENBQUNLLEdBQUcsR0FBR0wsSUFBSTtNQUNmLElBQUksQ0FBQ00sV0FBVyxHQUFHVixRQUFRO0lBQy9CLENBQUMsTUFDSTtNQUNELElBQUksQ0FBQ1MsR0FBRyxHQUFHSixJQUFJO01BQ2YsSUFBSSxDQUFDSyxXQUFXLEdBQUdOLElBQUksQ0FBQ08sV0FBVztJQUN2QztFQUNKO0VBQ0FDLEdBQUdBLENBQUNDLEdBQUcsRUFBRTtJQUNMLE1BQU1DLEdBQUcsR0FBRyxJQUFJLENBQUNKLFdBQVcsQ0FBQ0csR0FBRyxDQUFDO0lBQ2pDLElBQUksSUFBSSxDQUFDTCxVQUFVLEtBQUtNLEdBQUcsRUFBRTtNQUN6QixJQUFJLENBQUNOLFVBQVUsR0FBR00sR0FBRztNQUNyQixJQUFJLENBQUNSLFNBQVMsR0FBRyxJQUFJLENBQUNHLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDO0lBQ2xDO0lBQ0EsT0FBTyxJQUFJLENBQUNQLFNBQVM7RUFDekI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1TLGNBQWMsQ0FBQztFQUN4QixJQUFJQyxZQUFZQSxDQUFBLEVBQUc7SUFDZixPQUFPLElBQUksQ0FBQ0MsSUFBSTtFQUNwQjtFQUNBZCxXQUFXQSxDQUFDQyxJQUFJLEVBQUVDLElBQUksRUFBRTtJQUNwQixJQUFJLENBQUNZLElBQUksR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztJQUNyQixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJRCxHQUFHLENBQUMsQ0FBQztJQUN0QixJQUFJLE9BQU9kLElBQUksS0FBSyxVQUFVLEVBQUU7TUFDNUIsSUFBSSxDQUFDSyxHQUFHLEdBQUdMLElBQUk7TUFDZixJQUFJLENBQUNNLFdBQVcsR0FBR1YsUUFBUTtJQUMvQixDQUFDLE1BQ0k7TUFDRCxJQUFJLENBQUNTLEdBQUcsR0FBR0osSUFBSTtNQUNmLElBQUksQ0FBQ0ssV0FBVyxHQUFHTixJQUFJLENBQUNPLFdBQVc7SUFDdkM7RUFDSjtFQUNBQyxHQUFHQSxDQUFDQyxHQUFHLEVBQUU7SUFDTCxNQUFNQyxHQUFHLEdBQUcsSUFBSSxDQUFDSixXQUFXLENBQUNHLEdBQUcsQ0FBQztJQUNqQyxJQUFJLElBQUksQ0FBQ00sS0FBSyxDQUFDQyxHQUFHLENBQUNOLEdBQUcsQ0FBQyxFQUFFO01BQ3JCLE9BQU8sSUFBSSxDQUFDSyxLQUFLLENBQUNQLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDO0lBQzlCO0lBQ0EsTUFBTU8sS0FBSyxHQUFHLElBQUksQ0FBQ1osR0FBRyxDQUFDSSxHQUFHLENBQUM7SUFDM0IsSUFBSSxDQUFDSSxJQUFJLENBQUNLLEdBQUcsQ0FBQ1QsR0FBRyxFQUFFUSxLQUFLLENBQUM7SUFDekIsSUFBSSxDQUFDRixLQUFLLENBQUNHLEdBQUcsQ0FBQ1IsR0FBRyxFQUFFTyxLQUFLLENBQUM7SUFDMUIsT0FBT0EsS0FBSztFQUNoQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9jYWNoZS5qcz8yMjVmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh0KSB7XG4gICAgcmV0dXJuIHQ7XG59XG4vKipcbiAqIFVzZXMgYSBMUlUgY2FjaGUgdG8gbWFrZSBhIGdpdmVuIHBhcmFtZXRyaXplZCBmdW5jdGlvbiBjYWNoZWQuXG4gKiBDYWNoZXMganVzdCB0aGUgbGFzdCBrZXkvdmFsdWUuXG4qL1xuZXhwb3J0IGNsYXNzIExSVUNhY2hlZEZ1bmN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhcmcxLCBhcmcyKSB7XG4gICAgICAgIHRoaXMubGFzdENhY2hlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhc3RBcmdLZXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fZm4gPSBhcmcxO1xuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZUtleSA9IGlkZW50aXR5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZm4gPSBhcmcyO1xuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZUtleSA9IGFyZzEuZ2V0Q2FjaGVLZXk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KGFyZykge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9jb21wdXRlS2V5KGFyZyk7XG4gICAgICAgIGlmICh0aGlzLmxhc3RBcmdLZXkgIT09IGtleSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0QXJnS2V5ID0ga2V5O1xuICAgICAgICAgICAgdGhpcy5sYXN0Q2FjaGUgPSB0aGlzLl9mbihhcmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RDYWNoZTtcbiAgICB9XG59XG4vKipcbiAqIFVzZXMgYW4gdW5ib3VuZGVkIGNhY2hlIHRvIG1lbW9pemUgdGhlIHJlc3VsdHMgb2YgdGhlIGdpdmVuIGZ1bmN0aW9uLlxuKi9cbmV4cG9ydCBjbGFzcyBDYWNoZWRGdW5jdGlvbiB7XG4gICAgZ2V0IGNhY2hlZFZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYXJnMSwgYXJnMikge1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX21hcDIgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fZm4gPSBhcmcxO1xuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZUtleSA9IGlkZW50aXR5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZm4gPSBhcmcyO1xuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZUtleSA9IGFyZzEuZ2V0Q2FjaGVLZXk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KGFyZykge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9jb21wdXRlS2V5KGFyZyk7XG4gICAgICAgIGlmICh0aGlzLl9tYXAyLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFwMi5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2ZuKGFyZyk7XG4gICAgICAgIHRoaXMuX21hcC5zZXQoYXJnLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuX21hcDIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImlkZW50aXR5IiwidCIsIkxSVUNhY2hlZEZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJhcmcxIiwiYXJnMiIsImxhc3RDYWNoZSIsInVuZGVmaW5lZCIsImxhc3RBcmdLZXkiLCJfZm4iLCJfY29tcHV0ZUtleSIsImdldENhY2hlS2V5IiwiZ2V0IiwiYXJnIiwia2V5IiwiQ2FjaGVkRnVuY3Rpb24iLCJjYWNoZWRWYWx1ZXMiLCJfbWFwIiwiTWFwIiwiX21hcDIiLCJoYXMiLCJ2YWx1ZSIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/cache.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cancellation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CancellationToken\": function() { return /* binding */ CancellationToken; },\n/* harmony export */   \"CancellationTokenSource\": function() { return /* binding */ CancellationTokenSource; },\n/* harmony export */   \"cancelOnDispose\": function() { return /* binding */ cancelOnDispose; }\n/* harmony export */ });\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst shortcutEvent = Object.freeze(function (callback, context) {\n  const handle = setTimeout(callback.bind(context), 0);\n  return {\n    dispose() {\n      clearTimeout(handle);\n    }\n  };\n});\nvar CancellationToken;\n(function (CancellationToken) {\n  function isCancellationToken(thing) {\n    if (thing === CancellationToken.None || thing === CancellationToken.Cancelled) {\n      return true;\n    }\n    if (thing instanceof MutableToken) {\n      return true;\n    }\n    if (!thing || typeof thing !== 'object') {\n      return false;\n    }\n    return typeof thing.isCancellationRequested === 'boolean' && typeof thing.onCancellationRequested === 'function';\n  }\n  CancellationToken.isCancellationToken = isCancellationToken;\n  CancellationToken.None = Object.freeze({\n    isCancellationRequested: false,\n    onCancellationRequested: _event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None\n  });\n  CancellationToken.Cancelled = Object.freeze({\n    isCancellationRequested: true,\n    onCancellationRequested: shortcutEvent\n  });\n})(CancellationToken || (CancellationToken = {}));\nclass MutableToken {\n  constructor() {\n    this._isCancelled = false;\n    this._emitter = null;\n  }\n  cancel() {\n    if (!this._isCancelled) {\n      this._isCancelled = true;\n      if (this._emitter) {\n        this._emitter.fire(undefined);\n        this.dispose();\n      }\n    }\n  }\n  get isCancellationRequested() {\n    return this._isCancelled;\n  }\n  get onCancellationRequested() {\n    if (this._isCancelled) {\n      return shortcutEvent;\n    }\n    if (!this._emitter) {\n      this._emitter = new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();\n    }\n    return this._emitter.event;\n  }\n  dispose() {\n    if (this._emitter) {\n      this._emitter.dispose();\n      this._emitter = null;\n    }\n  }\n}\nclass CancellationTokenSource {\n  constructor(parent) {\n    this._token = undefined;\n    this._parentListener = undefined;\n    this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);\n  }\n  get token() {\n    if (!this._token) {\n      // be lazy and create the token only when\n      // actually needed\n      this._token = new MutableToken();\n    }\n    return this._token;\n  }\n  cancel() {\n    if (!this._token) {\n      // save an object by returning the default\n      // cancelled token when cancellation happens\n      // before someone asks for the token\n      this._token = CancellationToken.Cancelled;\n    } else if (this._token instanceof MutableToken) {\n      // actually cancel\n      this._token.cancel();\n    }\n  }\n  dispose(cancel = false) {\n    var _a;\n    if (cancel) {\n      this.cancel();\n    }\n    (_a = this._parentListener) === null || _a === void 0 ? void 0 : _a.dispose();\n    if (!this._token) {\n      // ensure to initialize with an empty token if we had none\n      this._token = CancellationToken.None;\n    } else if (this._token instanceof MutableToken) {\n      // actually dispose\n      this._token.dispose();\n    }\n  }\n}\nfunction cancelOnDispose(store) {\n  const source = new CancellationTokenSource();\n  store.add({\n    dispose() {\n      source.cancel();\n    }\n  });\n  return source.token;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/cancellation.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codicons.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codicons.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Codicon\": function() { return /* binding */ Codicon; },\n/* harmony export */   \"codiconsDerived\": function() { return /* binding */ codiconsDerived; }\n/* harmony export */ });\n/* harmony import */ var _codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codiconsUtil.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\");\n/* harmony import */ var _codiconsLibrary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codiconsLibrary.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js\");\n\n\n/**\n * Derived icons, that could become separate icons.\n * These mappings should be moved into the mapping file in the vscode-codicons repo at some point.\n */\nconst codiconsDerived = {\n  dialogError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-error', 'error'),\n  dialogWarning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-warning', 'warning'),\n  dialogInfo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-info', 'info'),\n  dialogClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-close', 'close'),\n  treeItemExpanded: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-item-expanded', 'chevron-down'),\n  // collapsed is done with rotation\n  treeFilterOnTypeOn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-on-type-on', 'list-filter'),\n  treeFilterOnTypeOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-on-type-off', 'list-selection'),\n  treeFilterClear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-clear', 'close'),\n  treeItemLoading: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-item-loading', 'loading'),\n  menuSelection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu-selection', 'check'),\n  menuSubmenu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu-submenu', 'chevron-right'),\n  menuBarMore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menubar-more', 'more'),\n  scrollbarButtonLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-left', 'triangle-left'),\n  scrollbarButtonRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-right', 'triangle-right'),\n  scrollbarButtonUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-up', 'triangle-up'),\n  scrollbarButtonDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-down', 'triangle-down'),\n  toolBarMore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('toolbar-more', 'more'),\n  quickInputBack: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('quick-input-back', 'arrow-left'),\n  dropDownButton: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('drop-down-button', 0xeab4),\n  symbolCustomColor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-customcolor', 0xeb5c),\n  exportIcon: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('export', 0xebac),\n  workspaceUnspecified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-unspecified', 0xebc3),\n  newLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('newline', 0xebea),\n  thumbsDownFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown-filled', 0xec13),\n  thumbsUpFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup-filled', 0xec14),\n  gitFetch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-fetch', 0xec1d),\n  lightbulbSparkleAutofix: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-sparkle-autofix', 0xec1f),\n  debugBreakpointPending: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-pending', 0xebd9)\n};\n/**\n * The Codicon library is a set of default icons that are built-in in VS Code.\n *\n * In the product (outside of base) Codicons should only be used as defaults. In order to have all icons in VS Code\n * themeable, component should define new, UI component specific icons using `iconRegistry.registerIcon`.\n * In that call a Codicon can be named as default.\n */\nconst Codicon = {\n  ..._codiconsLibrary_js__WEBPACK_IMPORTED_MODULE_1__.codiconsLibrary,\n  ...codiconsDerived\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUUsZUFBZSxHQUFHO0VBQzNCQyxXQUFXLEVBQUVILDBEQUFRLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQztFQUM5Q0ksYUFBYSxFQUFFSiwwREFBUSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztFQUNwREssVUFBVSxFQUFFTCwwREFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7RUFDM0NNLFdBQVcsRUFBRU4sMERBQVEsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDO0VBQzlDTyxnQkFBZ0IsRUFBRVAsMERBQVEsQ0FBQyxvQkFBb0IsRUFBRSxjQUFjLENBQUM7RUFBRTtFQUNsRVEsa0JBQWtCLEVBQUVSLDBEQUFRLENBQUMsd0JBQXdCLEVBQUUsYUFBYSxDQUFDO0VBQ3JFUyxtQkFBbUIsRUFBRVQsMERBQVEsQ0FBQyx5QkFBeUIsRUFBRSxnQkFBZ0IsQ0FBQztFQUMxRVUsZUFBZSxFQUFFViwwREFBUSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQztFQUN2RFcsZUFBZSxFQUFFWCwwREFBUSxDQUFDLG1CQUFtQixFQUFFLFNBQVMsQ0FBQztFQUN6RFksYUFBYSxFQUFFWiwwREFBUSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQztFQUNsRGEsV0FBVyxFQUFFYiwwREFBUSxDQUFDLGNBQWMsRUFBRSxlQUFlLENBQUM7RUFDdERjLFdBQVcsRUFBRWQsMERBQVEsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO0VBQzdDZSxtQkFBbUIsRUFBRWYsMERBQVEsQ0FBQyx1QkFBdUIsRUFBRSxlQUFlLENBQUM7RUFDdkVnQixvQkFBb0IsRUFBRWhCLDBEQUFRLENBQUMsd0JBQXdCLEVBQUUsZ0JBQWdCLENBQUM7RUFDMUVpQixpQkFBaUIsRUFBRWpCLDBEQUFRLENBQUMscUJBQXFCLEVBQUUsYUFBYSxDQUFDO0VBQ2pFa0IsbUJBQW1CLEVBQUVsQiwwREFBUSxDQUFDLHVCQUF1QixFQUFFLGVBQWUsQ0FBQztFQUN2RW1CLFdBQVcsRUFBRW5CLDBEQUFRLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztFQUM3Q29CLGNBQWMsRUFBRXBCLDBEQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDO0VBQzFEcUIsY0FBYyxFQUFFckIsMERBQVEsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUM7RUFDcERzQixpQkFBaUIsRUFBRXRCLDBEQUFRLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDO0VBQ3pEdUIsVUFBVSxFQUFFdkIsMERBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO0VBQ3RDd0Isb0JBQW9CLEVBQUV4QiwwREFBUSxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQztFQUMvRHlCLE9BQU8sRUFBRXpCLDBEQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQztFQUNwQzBCLGdCQUFnQixFQUFFMUIsMERBQVEsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLENBQUM7RUFDdkQyQixjQUFjLEVBQUUzQiwwREFBUSxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQztFQUNuRDRCLFFBQVEsRUFBRTVCLDBEQUFRLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQztFQUN2QzZCLHVCQUF1QixFQUFFN0IsMERBQVEsQ0FBQywyQkFBMkIsRUFBRSxNQUFNLENBQUM7RUFDdEU4QixzQkFBc0IsRUFBRTlCLDBEQUFRLENBQUMsMEJBQTBCLEVBQUUsTUFBTTtBQUN2RSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNK0IsT0FBTyxHQUFHO0VBQ25CLEdBQUc5QixnRUFBZTtFQUNsQixHQUFHQztBQUNQLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2NvZGljb25zLmpzPzM1ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVnaXN0ZXIgfSBmcm9tICcuL2NvZGljb25zVXRpbC5qcyc7XG5pbXBvcnQgeyBjb2RpY29uc0xpYnJhcnkgfSBmcm9tICcuL2NvZGljb25zTGlicmFyeS5qcyc7XG4vKipcbiAqIERlcml2ZWQgaWNvbnMsIHRoYXQgY291bGQgYmVjb21lIHNlcGFyYXRlIGljb25zLlxuICogVGhlc2UgbWFwcGluZ3Mgc2hvdWxkIGJlIG1vdmVkIGludG8gdGhlIG1hcHBpbmcgZmlsZSBpbiB0aGUgdnNjb2RlLWNvZGljb25zIHJlcG8gYXQgc29tZSBwb2ludC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvZGljb25zRGVyaXZlZCA9IHtcbiAgICBkaWFsb2dFcnJvcjogcmVnaXN0ZXIoJ2RpYWxvZy1lcnJvcicsICdlcnJvcicpLFxuICAgIGRpYWxvZ1dhcm5pbmc6IHJlZ2lzdGVyKCdkaWFsb2ctd2FybmluZycsICd3YXJuaW5nJyksXG4gICAgZGlhbG9nSW5mbzogcmVnaXN0ZXIoJ2RpYWxvZy1pbmZvJywgJ2luZm8nKSxcbiAgICBkaWFsb2dDbG9zZTogcmVnaXN0ZXIoJ2RpYWxvZy1jbG9zZScsICdjbG9zZScpLFxuICAgIHRyZWVJdGVtRXhwYW5kZWQ6IHJlZ2lzdGVyKCd0cmVlLWl0ZW0tZXhwYW5kZWQnLCAnY2hldnJvbi1kb3duJyksIC8vIGNvbGxhcHNlZCBpcyBkb25lIHdpdGggcm90YXRpb25cbiAgICB0cmVlRmlsdGVyT25UeXBlT246IHJlZ2lzdGVyKCd0cmVlLWZpbHRlci1vbi10eXBlLW9uJywgJ2xpc3QtZmlsdGVyJyksXG4gICAgdHJlZUZpbHRlck9uVHlwZU9mZjogcmVnaXN0ZXIoJ3RyZWUtZmlsdGVyLW9uLXR5cGUtb2ZmJywgJ2xpc3Qtc2VsZWN0aW9uJyksXG4gICAgdHJlZUZpbHRlckNsZWFyOiByZWdpc3RlcigndHJlZS1maWx0ZXItY2xlYXInLCAnY2xvc2UnKSxcbiAgICB0cmVlSXRlbUxvYWRpbmc6IHJlZ2lzdGVyKCd0cmVlLWl0ZW0tbG9hZGluZycsICdsb2FkaW5nJyksXG4gICAgbWVudVNlbGVjdGlvbjogcmVnaXN0ZXIoJ21lbnUtc2VsZWN0aW9uJywgJ2NoZWNrJyksXG4gICAgbWVudVN1Ym1lbnU6IHJlZ2lzdGVyKCdtZW51LXN1Ym1lbnUnLCAnY2hldnJvbi1yaWdodCcpLFxuICAgIG1lbnVCYXJNb3JlOiByZWdpc3RlcignbWVudWJhci1tb3JlJywgJ21vcmUnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25MZWZ0OiByZWdpc3Rlcignc2Nyb2xsYmFyLWJ1dHRvbi1sZWZ0JywgJ3RyaWFuZ2xlLWxlZnQnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25SaWdodDogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tcmlnaHQnLCAndHJpYW5nbGUtcmlnaHQnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25VcDogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tdXAnLCAndHJpYW5nbGUtdXAnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25Eb3duOiByZWdpc3Rlcignc2Nyb2xsYmFyLWJ1dHRvbi1kb3duJywgJ3RyaWFuZ2xlLWRvd24nKSxcbiAgICB0b29sQmFyTW9yZTogcmVnaXN0ZXIoJ3Rvb2xiYXItbW9yZScsICdtb3JlJyksXG4gICAgcXVpY2tJbnB1dEJhY2s6IHJlZ2lzdGVyKCdxdWljay1pbnB1dC1iYWNrJywgJ2Fycm93LWxlZnQnKSxcbiAgICBkcm9wRG93bkJ1dHRvbjogcmVnaXN0ZXIoJ2Ryb3AtZG93bi1idXR0b24nLCAweGVhYjQpLFxuICAgIHN5bWJvbEN1c3RvbUNvbG9yOiByZWdpc3Rlcignc3ltYm9sLWN1c3RvbWNvbG9yJywgMHhlYjVjKSxcbiAgICBleHBvcnRJY29uOiByZWdpc3RlcignZXhwb3J0JywgMHhlYmFjKSxcbiAgICB3b3Jrc3BhY2VVbnNwZWNpZmllZDogcmVnaXN0ZXIoJ3dvcmtzcGFjZS11bnNwZWNpZmllZCcsIDB4ZWJjMyksXG4gICAgbmV3TGluZTogcmVnaXN0ZXIoJ25ld2xpbmUnLCAweGViZWEpLFxuICAgIHRodW1ic0Rvd25GaWxsZWQ6IHJlZ2lzdGVyKCd0aHVtYnNkb3duLWZpbGxlZCcsIDB4ZWMxMyksXG4gICAgdGh1bWJzVXBGaWxsZWQ6IHJlZ2lzdGVyKCd0aHVtYnN1cC1maWxsZWQnLCAweGVjMTQpLFxuICAgIGdpdEZldGNoOiByZWdpc3RlcignZ2l0LWZldGNoJywgMHhlYzFkKSxcbiAgICBsaWdodGJ1bGJTcGFya2xlQXV0b2ZpeDogcmVnaXN0ZXIoJ2xpZ2h0YnVsYi1zcGFya2xlLWF1dG9maXgnLCAweGVjMWYpLFxuICAgIGRlYnVnQnJlYWtwb2ludFBlbmRpbmc6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LXBlbmRpbmcnLCAweGViZDkpLFxufTtcbi8qKlxuICogVGhlIENvZGljb24gbGlicmFyeSBpcyBhIHNldCBvZiBkZWZhdWx0IGljb25zIHRoYXQgYXJlIGJ1aWx0LWluIGluIFZTIENvZGUuXG4gKlxuICogSW4gdGhlIHByb2R1Y3QgKG91dHNpZGUgb2YgYmFzZSkgQ29kaWNvbnMgc2hvdWxkIG9ubHkgYmUgdXNlZCBhcyBkZWZhdWx0cy4gSW4gb3JkZXIgdG8gaGF2ZSBhbGwgaWNvbnMgaW4gVlMgQ29kZVxuICogdGhlbWVhYmxlLCBjb21wb25lbnQgc2hvdWxkIGRlZmluZSBuZXcsIFVJIGNvbXBvbmVudCBzcGVjaWZpYyBpY29ucyB1c2luZyBgaWNvblJlZ2lzdHJ5LnJlZ2lzdGVySWNvbmAuXG4gKiBJbiB0aGF0IGNhbGwgYSBDb2RpY29uIGNhbiBiZSBuYW1lZCBhcyBkZWZhdWx0LlxuICovXG5leHBvcnQgY29uc3QgQ29kaWNvbiA9IHtcbiAgICAuLi5jb2RpY29uc0xpYnJhcnksXG4gICAgLi4uY29kaWNvbnNEZXJpdmVkXG59O1xuIl0sIm5hbWVzIjpbInJlZ2lzdGVyIiwiY29kaWNvbnNMaWJyYXJ5IiwiY29kaWNvbnNEZXJpdmVkIiwiZGlhbG9nRXJyb3IiLCJkaWFsb2dXYXJuaW5nIiwiZGlhbG9nSW5mbyIsImRpYWxvZ0Nsb3NlIiwidHJlZUl0ZW1FeHBhbmRlZCIsInRyZWVGaWx0ZXJPblR5cGVPbiIsInRyZWVGaWx0ZXJPblR5cGVPZmYiLCJ0cmVlRmlsdGVyQ2xlYXIiLCJ0cmVlSXRlbUxvYWRpbmciLCJtZW51U2VsZWN0aW9uIiwibWVudVN1Ym1lbnUiLCJtZW51QmFyTW9yZSIsInNjcm9sbGJhckJ1dHRvbkxlZnQiLCJzY3JvbGxiYXJCdXR0b25SaWdodCIsInNjcm9sbGJhckJ1dHRvblVwIiwic2Nyb2xsYmFyQnV0dG9uRG93biIsInRvb2xCYXJNb3JlIiwicXVpY2tJbnB1dEJhY2siLCJkcm9wRG93bkJ1dHRvbiIsInN5bWJvbEN1c3RvbUNvbG9yIiwiZXhwb3J0SWNvbiIsIndvcmtzcGFjZVVuc3BlY2lmaWVkIiwibmV3TGluZSIsInRodW1ic0Rvd25GaWxsZWQiLCJ0aHVtYnNVcEZpbGxlZCIsImdpdEZldGNoIiwibGlnaHRidWxiU3BhcmtsZUF1dG9maXgiLCJkZWJ1Z0JyZWFrcG9pbnRQZW5kaW5nIiwiQ29kaWNvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codicons.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"codiconsLibrary\": function() { return /* binding */ codiconsLibrary; }\n/* harmony export */ });\n/* harmony import */ var _codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codiconsUtil.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// This file is automatically generated by (microsoft/vscode-codicons)/scripts/export-to-ts.js\n// Please don't edit it, as your changes will be overwritten.\n// Instead, add mappings to codiconsDerived in codicons.ts.\nconst codiconsLibrary = {\n  add: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('add', 0xea60),\n  plus: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('plus', 0xea60),\n  gistNew: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-new', 0xea60),\n  repoCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-create', 0xea60),\n  lightbulb: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb', 0xea61),\n  lightBulb: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('light-bulb', 0xea61),\n  repo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo', 0xea62),\n  repoDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-delete', 0xea62),\n  gistFork: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-fork', 0xea63),\n  repoForked: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-forked', 0xea63),\n  gitPullRequest: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request', 0xea64),\n  gitPullRequestAbandoned: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-abandoned', 0xea64),\n  recordKeys: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record-keys', 0xea65),\n  keyboard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('keyboard', 0xea65),\n  tag: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag', 0xea66),\n  gitPullRequestLabel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-label', 0xea66),\n  tagAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag-add', 0xea66),\n  tagRemove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag-remove', 0xea66),\n  person: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person', 0xea67),\n  personFollow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-follow', 0xea67),\n  personOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-outline', 0xea67),\n  personFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-filled', 0xea67),\n  gitBranch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch', 0xea68),\n  gitBranchCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch-create', 0xea68),\n  gitBranchDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch-delete', 0xea68),\n  sourceControl: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('source-control', 0xea68),\n  mirror: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror', 0xea69),\n  mirrorPublic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror-public', 0xea69),\n  star: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star', 0xea6a),\n  starAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-add', 0xea6a),\n  starDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-delete', 0xea6a),\n  starEmpty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-empty', 0xea6a),\n  comment: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment', 0xea6b),\n  commentAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-add', 0xea6b),\n  alert: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('alert', 0xea6c),\n  warning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('warning', 0xea6c),\n  search: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search', 0xea6d),\n  searchSave: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-save', 0xea6d),\n  logOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('log-out', 0xea6e),\n  signOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sign-out', 0xea6e),\n  logIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('log-in', 0xea6f),\n  signIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sign-in', 0xea6f),\n  eye: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye', 0xea70),\n  eyeUnwatch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-unwatch', 0xea70),\n  eyeWatch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-watch', 0xea70),\n  circleFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-filled', 0xea71),\n  primitiveDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('primitive-dot', 0xea71),\n  closeDirty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close-dirty', 0xea71),\n  debugBreakpoint: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint', 0xea71),\n  debugBreakpointDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-disabled', 0xea71),\n  debugHint: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-hint', 0xea71),\n  terminalDecorationSuccess: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-success', 0xea71),\n  primitiveSquare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('primitive-square', 0xea72),\n  edit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('edit', 0xea73),\n  pencil: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pencil', 0xea73),\n  info: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('info', 0xea74),\n  issueOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-opened', 0xea74),\n  gistPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-private', 0xea75),\n  gitForkPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-fork-private', 0xea75),\n  lock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lock', 0xea75),\n  mirrorPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror-private', 0xea75),\n  close: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close', 0xea76),\n  removeClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remove-close', 0xea76),\n  x: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('x', 0xea76),\n  repoSync: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-sync', 0xea77),\n  sync: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sync', 0xea77),\n  clone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clone', 0xea78),\n  desktopDownload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('desktop-download', 0xea78),\n  beaker: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('beaker', 0xea79),\n  microscope: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('microscope', 0xea79),\n  vm: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm', 0xea7a),\n  deviceDesktop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-desktop', 0xea7a),\n  file: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file', 0xea7b),\n  fileText: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-text', 0xea7b),\n  more: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('more', 0xea7c),\n  ellipsis: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ellipsis', 0xea7c),\n  kebabHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('kebab-horizontal', 0xea7c),\n  mailReply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail-reply', 0xea7d),\n  reply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('reply', 0xea7d),\n  organization: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization', 0xea7e),\n  organizationFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization-filled', 0xea7e),\n  organizationOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization-outline', 0xea7e),\n  newFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('new-file', 0xea7f),\n  fileAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-add', 0xea7f),\n  newFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('new-folder', 0xea80),\n  fileDirectoryCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-directory-create', 0xea80),\n  trash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('trash', 0xea81),\n  trashcan: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('trashcan', 0xea81),\n  history: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('history', 0xea82),\n  clock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clock', 0xea82),\n  folder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder', 0xea83),\n  fileDirectory: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-directory', 0xea83),\n  symbolFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-folder', 0xea83),\n  logoGithub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('logo-github', 0xea84),\n  markGithub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mark-github', 0xea84),\n  github: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github', 0xea84),\n  terminal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal', 0xea85),\n  console: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('console', 0xea85),\n  repl: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repl', 0xea85),\n  zap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zap', 0xea86),\n  symbolEvent: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-event', 0xea86),\n  error: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('error', 0xea87),\n  stop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('stop', 0xea87),\n  variable: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('variable', 0xea88),\n  symbolVariable: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-variable', 0xea88),\n  array: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('array', 0xea8a),\n  symbolArray: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-array', 0xea8a),\n  symbolModule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-module', 0xea8b),\n  symbolPackage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-package', 0xea8b),\n  symbolNamespace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-namespace', 0xea8b),\n  symbolObject: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-object', 0xea8b),\n  symbolMethod: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-method', 0xea8c),\n  symbolFunction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-function', 0xea8c),\n  symbolConstructor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-constructor', 0xea8c),\n  symbolBoolean: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-boolean', 0xea8f),\n  symbolNull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-null', 0xea8f),\n  symbolNumeric: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-numeric', 0xea90),\n  symbolNumber: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-number', 0xea90),\n  symbolStructure: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-structure', 0xea91),\n  symbolStruct: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-struct', 0xea91),\n  symbolParameter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-parameter', 0xea92),\n  symbolTypeParameter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-type-parameter', 0xea92),\n  symbolKey: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-key', 0xea93),\n  symbolText: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-text', 0xea93),\n  symbolReference: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-reference', 0xea94),\n  goToFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('go-to-file', 0xea94),\n  symbolEnum: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-enum', 0xea95),\n  symbolValue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-value', 0xea95),\n  symbolRuler: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-ruler', 0xea96),\n  symbolUnit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-unit', 0xea96),\n  activateBreakpoints: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('activate-breakpoints', 0xea97),\n  archive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('archive', 0xea98),\n  arrowBoth: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-both', 0xea99),\n  arrowDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-down', 0xea9a),\n  arrowLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-left', 0xea9b),\n  arrowRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-right', 0xea9c),\n  arrowSmallDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-down', 0xea9d),\n  arrowSmallLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-left', 0xea9e),\n  arrowSmallRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-right', 0xea9f),\n  arrowSmallUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-up', 0xeaa0),\n  arrowUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-up', 0xeaa1),\n  bell: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell', 0xeaa2),\n  bold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bold', 0xeaa3),\n  book: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('book', 0xeaa4),\n  bookmark: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bookmark', 0xeaa5),\n  debugBreakpointConditionalUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional-unverified', 0xeaa6),\n  debugBreakpointConditional: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional', 0xeaa7),\n  debugBreakpointConditionalDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional-disabled', 0xeaa7),\n  debugBreakpointDataUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data-unverified', 0xeaa8),\n  debugBreakpointData: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data', 0xeaa9),\n  debugBreakpointDataDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data-disabled', 0xeaa9),\n  debugBreakpointLogUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log-unverified', 0xeaaa),\n  debugBreakpointLog: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log', 0xeaab),\n  debugBreakpointLogDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log-disabled', 0xeaab),\n  briefcase: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('briefcase', 0xeaac),\n  broadcast: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('broadcast', 0xeaad),\n  browser: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('browser', 0xeaae),\n  bug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bug', 0xeaaf),\n  calendar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('calendar', 0xeab0),\n  caseSensitive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('case-sensitive', 0xeab1),\n  check: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('check', 0xeab2),\n  checklist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('checklist', 0xeab3),\n  chevronDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-down', 0xeab4),\n  chevronLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-left', 0xeab5),\n  chevronRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-right', 0xeab6),\n  chevronUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-up', 0xeab7),\n  chromeClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-close', 0xeab8),\n  chromeMaximize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-maximize', 0xeab9),\n  chromeMinimize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-minimize', 0xeaba),\n  chromeRestore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-restore', 0xeabb),\n  circleOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-outline', 0xeabc),\n  circle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle', 0xeabc),\n  debugBreakpointUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-unverified', 0xeabc),\n  terminalDecorationIncomplete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-incomplete', 0xeabc),\n  circleSlash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-slash', 0xeabd),\n  circuitBoard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circuit-board', 0xeabe),\n  clearAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clear-all', 0xeabf),\n  clippy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clippy', 0xeac0),\n  closeAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close-all', 0xeac1),\n  cloudDownload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud-download', 0xeac2),\n  cloudUpload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud-upload', 0xeac3),\n  code: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('code', 0xeac4),\n  collapseAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('collapse-all', 0xeac5),\n  colorMode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('color-mode', 0xeac6),\n  commentDiscussion: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-discussion', 0xeac7),\n  creditCard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('credit-card', 0xeac9),\n  dash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dash', 0xeacc),\n  dashboard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dashboard', 0xeacd),\n  database: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('database', 0xeace),\n  debugContinue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-continue', 0xeacf),\n  debugDisconnect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-disconnect', 0xead0),\n  debugPause: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-pause', 0xead1),\n  debugRestart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-restart', 0xead2),\n  debugStart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-start', 0xead3),\n  debugStepInto: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-into', 0xead4),\n  debugStepOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-out', 0xead5),\n  debugStepOver: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-over', 0xead6),\n  debugStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stop', 0xead7),\n  debug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug', 0xead8),\n  deviceCameraVideo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-camera-video', 0xead9),\n  deviceCamera: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-camera', 0xeada),\n  deviceMobile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-mobile', 0xeadb),\n  diffAdded: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-added', 0xeadc),\n  diffIgnored: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-ignored', 0xeadd),\n  diffModified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-modified', 0xeade),\n  diffRemoved: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-removed', 0xeadf),\n  diffRenamed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-renamed', 0xeae0),\n  diff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff', 0xeae1),\n  diffSidebyside: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-sidebyside', 0xeae1),\n  discard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('discard', 0xeae2),\n  editorLayout: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('editor-layout', 0xeae3),\n  emptyWindow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('empty-window', 0xeae4),\n  exclude: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('exclude', 0xeae5),\n  extensions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('extensions', 0xeae6),\n  eyeClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-closed', 0xeae7),\n  fileBinary: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-binary', 0xeae8),\n  fileCode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-code', 0xeae9),\n  fileMedia: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-media', 0xeaea),\n  filePdf: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-pdf', 0xeaeb),\n  fileSubmodule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-submodule', 0xeaec),\n  fileSymlinkDirectory: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-symlink-directory', 0xeaed),\n  fileSymlinkFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-symlink-file', 0xeaee),\n  fileZip: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-zip', 0xeaef),\n  files: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('files', 0xeaf0),\n  filter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('filter', 0xeaf1),\n  flame: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('flame', 0xeaf2),\n  foldDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-down', 0xeaf3),\n  foldUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-up', 0xeaf4),\n  fold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold', 0xeaf5),\n  folderActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-active', 0xeaf6),\n  folderOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-opened', 0xeaf7),\n  gear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gear', 0xeaf8),\n  gift: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gift', 0xeaf9),\n  gistSecret: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-secret', 0xeafa),\n  gist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist', 0xeafb),\n  gitCommit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-commit', 0xeafc),\n  gitCompare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-compare', 0xeafd),\n  compareChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compare-changes', 0xeafd),\n  gitMerge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-merge', 0xeafe),\n  githubAction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-action', 0xeaff),\n  githubAlt: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-alt', 0xeb00),\n  globe: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('globe', 0xeb01),\n  grabber: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('grabber', 0xeb02),\n  graph: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph', 0xeb03),\n  gripper: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gripper', 0xeb04),\n  heart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('heart', 0xeb05),\n  home: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('home', 0xeb06),\n  horizontalRule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('horizontal-rule', 0xeb07),\n  hubot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('hubot', 0xeb08),\n  inbox: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('inbox', 0xeb09),\n  issueReopened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-reopened', 0xeb0b),\n  issues: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issues', 0xeb0c),\n  italic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('italic', 0xeb0d),\n  jersey: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('jersey', 0xeb0e),\n  json: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('json', 0xeb0f),\n  kebabVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('kebab-vertical', 0xeb10),\n  key: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('key', 0xeb11),\n  law: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('law', 0xeb12),\n  lightbulbAutofix: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-autofix', 0xeb13),\n  linkExternal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('link-external', 0xeb14),\n  link: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('link', 0xeb15),\n  listOrdered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-ordered', 0xeb16),\n  listUnordered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-unordered', 0xeb17),\n  liveShare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('live-share', 0xeb18),\n  loading: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('loading', 0xeb19),\n  location: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('location', 0xeb1a),\n  mailRead: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail-read', 0xeb1b),\n  mail: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail', 0xeb1c),\n  markdown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('markdown', 0xeb1d),\n  megaphone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('megaphone', 0xeb1e),\n  mention: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mention', 0xeb1f),\n  milestone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('milestone', 0xeb20),\n  gitPullRequestMilestone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-milestone', 0xeb20),\n  mortarBoard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mortar-board', 0xeb21),\n  move: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('move', 0xeb22),\n  multipleWindows: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('multiple-windows', 0xeb23),\n  mute: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mute', 0xeb24),\n  noNewline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('no-newline', 0xeb25),\n  note: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('note', 0xeb26),\n  octoface: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('octoface', 0xeb27),\n  openPreview: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('open-preview', 0xeb28),\n  package: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('package', 0xeb29),\n  paintcan: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('paintcan', 0xeb2a),\n  pin: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pin', 0xeb2b),\n  play: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('play', 0xeb2c),\n  run: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run', 0xeb2c),\n  plug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('plug', 0xeb2d),\n  preserveCase: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('preserve-case', 0xeb2e),\n  preview: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('preview', 0xeb2f),\n  project: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('project', 0xeb30),\n  pulse: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pulse', 0xeb31),\n  question: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('question', 0xeb32),\n  quote: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('quote', 0xeb33),\n  radioTower: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('radio-tower', 0xeb34),\n  reactions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('reactions', 0xeb35),\n  references: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('references', 0xeb36),\n  refresh: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('refresh', 0xeb37),\n  regex: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('regex', 0xeb38),\n  remoteExplorer: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remote-explorer', 0xeb39),\n  remote: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remote', 0xeb3a),\n  remove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remove', 0xeb3b),\n  replaceAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('replace-all', 0xeb3c),\n  replace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('replace', 0xeb3d),\n  repoClone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-clone', 0xeb3e),\n  repoForcePush: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-force-push', 0xeb3f),\n  repoPull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-pull', 0xeb40),\n  repoPush: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-push', 0xeb41),\n  report: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('report', 0xeb42),\n  requestChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('request-changes', 0xeb43),\n  rocket: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('rocket', 0xeb44),\n  rootFolderOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('root-folder-opened', 0xeb45),\n  rootFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('root-folder', 0xeb46),\n  rss: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('rss', 0xeb47),\n  ruby: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ruby', 0xeb48),\n  saveAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save-all', 0xeb49),\n  saveAs: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save-as', 0xeb4a),\n  save: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save', 0xeb4b),\n  screenFull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('screen-full', 0xeb4c),\n  screenNormal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('screen-normal', 0xeb4d),\n  searchStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-stop', 0xeb4e),\n  server: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server', 0xeb50),\n  settingsGear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('settings-gear', 0xeb51),\n  settings: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('settings', 0xeb52),\n  shield: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('shield', 0xeb53),\n  smiley: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('smiley', 0xeb54),\n  sortPrecedence: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sort-precedence', 0xeb55),\n  splitHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('split-horizontal', 0xeb56),\n  splitVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('split-vertical', 0xeb57),\n  squirrel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('squirrel', 0xeb58),\n  starFull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-full', 0xeb59),\n  starHalf: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-half', 0xeb5a),\n  symbolClass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-class', 0xeb5b),\n  symbolColor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-color', 0xeb5c),\n  symbolConstant: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-constant', 0xeb5d),\n  symbolEnumMember: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-enum-member', 0xeb5e),\n  symbolField: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-field', 0xeb5f),\n  symbolFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-file', 0xeb60),\n  symbolInterface: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-interface', 0xeb61),\n  symbolKeyword: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-keyword', 0xeb62),\n  symbolMisc: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-misc', 0xeb63),\n  symbolOperator: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-operator', 0xeb64),\n  symbolProperty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-property', 0xeb65),\n  wrench: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wrench', 0xeb65),\n  wrenchSubaction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wrench-subaction', 0xeb65),\n  symbolSnippet: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-snippet', 0xeb66),\n  tasklist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tasklist', 0xeb67),\n  telescope: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('telescope', 0xeb68),\n  textSize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('text-size', 0xeb69),\n  threeBars: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('three-bars', 0xeb6a),\n  thumbsdown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown', 0xeb6b),\n  thumbsup: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup', 0xeb6c),\n  tools: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tools', 0xeb6d),\n  triangleDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-down', 0xeb6e),\n  triangleLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-left', 0xeb6f),\n  triangleRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-right', 0xeb70),\n  triangleUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-up', 0xeb71),\n  twitter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('twitter', 0xeb72),\n  unfold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unfold', 0xeb73),\n  unlock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unlock', 0xeb74),\n  unmute: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unmute', 0xeb75),\n  unverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unverified', 0xeb76),\n  verified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('verified', 0xeb77),\n  versions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('versions', 0xeb78),\n  vmActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-active', 0xeb79),\n  vmOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-outline', 0xeb7a),\n  vmRunning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-running', 0xeb7b),\n  watch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('watch', 0xeb7c),\n  whitespace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('whitespace', 0xeb7d),\n  wholeWord: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('whole-word', 0xeb7e),\n  window: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('window', 0xeb7f),\n  wordWrap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('word-wrap', 0xeb80),\n  zoomIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zoom-in', 0xeb81),\n  zoomOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zoom-out', 0xeb82),\n  listFilter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-filter', 0xeb83),\n  listFlat: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-flat', 0xeb84),\n  listSelection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-selection', 0xeb85),\n  selection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('selection', 0xeb85),\n  listTree: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-tree', 0xeb86),\n  debugBreakpointFunctionUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function-unverified', 0xeb87),\n  debugBreakpointFunction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function', 0xeb88),\n  debugBreakpointFunctionDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function-disabled', 0xeb88),\n  debugStackframeActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-active', 0xeb89),\n  circleSmallFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-small-filled', 0xeb8a),\n  debugStackframeDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-dot', 0xeb8a),\n  terminalDecorationMark: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-mark', 0xeb8a),\n  debugStackframe: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe', 0xeb8b),\n  debugStackframeFocused: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-focused', 0xeb8b),\n  debugBreakpointUnsupported: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-unsupported', 0xeb8c),\n  symbolString: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-string', 0xeb8d),\n  debugReverseContinue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-reverse-continue', 0xeb8e),\n  debugStepBack: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-back', 0xeb8f),\n  debugRestartFrame: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-restart-frame', 0xeb90),\n  debugAlt: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-alt', 0xeb91),\n  callIncoming: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('call-incoming', 0xeb92),\n  callOutgoing: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('call-outgoing', 0xeb93),\n  menu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu', 0xeb94),\n  expandAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('expand-all', 0xeb95),\n  feedback: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('feedback', 0xeb96),\n  gitPullRequestReviewer: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-reviewer', 0xeb96),\n  groupByRefType: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('group-by-ref-type', 0xeb97),\n  ungroupByRefType: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ungroup-by-ref-type', 0xeb98),\n  account: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('account', 0xeb99),\n  gitPullRequestAssignee: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-assignee', 0xeb99),\n  bellDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-dot', 0xeb9a),\n  debugConsole: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-console', 0xeb9b),\n  library: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('library', 0xeb9c),\n  output: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('output', 0xeb9d),\n  runAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-all', 0xeb9e),\n  syncIgnored: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sync-ignored', 0xeb9f),\n  pinned: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pinned', 0xeba0),\n  githubInverted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-inverted', 0xeba1),\n  serverProcess: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server-process', 0xeba2),\n  serverEnvironment: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server-environment', 0xeba3),\n  pass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pass', 0xeba4),\n  issueClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-closed', 0xeba4),\n  stopCircle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('stop-circle', 0xeba5),\n  playCircle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('play-circle', 0xeba6),\n  record: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record', 0xeba7),\n  debugAltSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-alt-small', 0xeba8),\n  vmConnect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-connect', 0xeba9),\n  cloud: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud', 0xebaa),\n  merge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('merge', 0xebab),\n  export: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('export', 0xebac),\n  graphLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-left', 0xebad),\n  magnet: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('magnet', 0xebae),\n  notebook: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('notebook', 0xebaf),\n  redo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('redo', 0xebb0),\n  checkAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('check-all', 0xebb1),\n  pinnedDirty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pinned-dirty', 0xebb2),\n  passFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pass-filled', 0xebb3),\n  circleLargeFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large-filled', 0xebb4),\n  circleLarge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large', 0xebb5),\n  circleLargeOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large-outline', 0xebb5),\n  combine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('combine', 0xebb6),\n  gather: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gather', 0xebb6),\n  table: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('table', 0xebb7),\n  variableGroup: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('variable-group', 0xebb8),\n  typeHierarchy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy', 0xebb9),\n  typeHierarchySub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy-sub', 0xebba),\n  typeHierarchySuper: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy-super', 0xebbb),\n  gitPullRequestCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-create', 0xebbc),\n  runAbove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-above', 0xebbd),\n  runBelow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-below', 0xebbe),\n  notebookTemplate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('notebook-template', 0xebbf),\n  debugRerun: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-rerun', 0xebc0),\n  workspaceTrusted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-trusted', 0xebc1),\n  workspaceUntrusted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-untrusted', 0xebc2),\n  workspaceUnknown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-unknown', 0xebc3),\n  terminalCmd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-cmd', 0xebc4),\n  terminalDebian: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-debian', 0xebc5),\n  terminalLinux: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-linux', 0xebc6),\n  terminalPowershell: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-powershell', 0xebc7),\n  terminalTmux: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-tmux', 0xebc8),\n  terminalUbuntu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-ubuntu', 0xebc9),\n  terminalBash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-bash', 0xebca),\n  arrowSwap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-swap', 0xebcb),\n  copy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('copy', 0xebcc),\n  personAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-add', 0xebcd),\n  filterFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('filter-filled', 0xebce),\n  wand: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wand', 0xebcf),\n  debugLineByLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-line-by-line', 0xebd0),\n  inspect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('inspect', 0xebd1),\n  layers: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers', 0xebd2),\n  layersDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers-dot', 0xebd3),\n  layersActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers-active', 0xebd4),\n  compass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass', 0xebd5),\n  compassDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass-dot', 0xebd6),\n  compassActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass-active', 0xebd7),\n  azure: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('azure', 0xebd8),\n  issueDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-draft', 0xebd9),\n  gitPullRequestClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-closed', 0xebda),\n  gitPullRequestDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-draft', 0xebdb),\n  debugAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-all', 0xebdc),\n  debugCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-coverage', 0xebdd),\n  runErrors: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-errors', 0xebde),\n  folderLibrary: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-library', 0xebdf),\n  debugContinueSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-continue-small', 0xebe0),\n  beakerStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('beaker-stop', 0xebe1),\n  graphLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-line', 0xebe2),\n  graphScatter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-scatter', 0xebe3),\n  pieChart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pie-chart', 0xebe4),\n  bracket: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket', 0xeb0f),\n  bracketDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket-dot', 0xebe5),\n  bracketError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket-error', 0xebe6),\n  lockSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lock-small', 0xebe7),\n  azureDevops: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('azure-devops', 0xebe8),\n  verifiedFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('verified-filled', 0xebe9),\n  newline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('newline', 0xebea),\n  layout: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout', 0xebeb),\n  layoutActivitybarLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-activitybar-left', 0xebec),\n  layoutActivitybarRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-activitybar-right', 0xebed),\n  layoutPanelLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-left', 0xebee),\n  layoutPanelCenter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-center', 0xebef),\n  layoutPanelJustify: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-justify', 0xebf0),\n  layoutPanelRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-right', 0xebf1),\n  layoutPanel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel', 0xebf2),\n  layoutSidebarLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-left', 0xebf3),\n  layoutSidebarRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-right', 0xebf4),\n  layoutStatusbar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-statusbar', 0xebf5),\n  layoutMenubar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-menubar', 0xebf6),\n  layoutCentered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-centered', 0xebf7),\n  target: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('target', 0xebf8),\n  indent: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('indent', 0xebf9),\n  recordSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record-small', 0xebfa),\n  errorSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('error-small', 0xebfb),\n  terminalDecorationError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-error', 0xebfb),\n  arrowCircleDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-down', 0xebfc),\n  arrowCircleLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-left', 0xebfd),\n  arrowCircleRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-right', 0xebfe),\n  arrowCircleUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-up', 0xebff),\n  layoutSidebarRightOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-right-off', 0xec00),\n  layoutPanelOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-off', 0xec01),\n  layoutSidebarLeftOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-left-off', 0xec02),\n  blank: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('blank', 0xec03),\n  heartFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('heart-filled', 0xec04),\n  map: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map', 0xec05),\n  mapHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-horizontal', 0xec05),\n  foldHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-horizontal', 0xec05),\n  mapFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-filled', 0xec06),\n  mapHorizontalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-horizontal-filled', 0xec06),\n  foldHorizontalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-horizontal-filled', 0xec06),\n  circleSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-small', 0xec07),\n  bellSlash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-slash', 0xec08),\n  bellSlashDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-slash-dot', 0xec09),\n  commentUnresolved: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-unresolved', 0xec0a),\n  gitPullRequestGoToChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-go-to-changes', 0xec0b),\n  gitPullRequestNewChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-new-changes', 0xec0c),\n  searchFuzzy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-fuzzy', 0xec0d),\n  commentDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-draft', 0xec0e),\n  send: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('send', 0xec0f),\n  sparkle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sparkle', 0xec10),\n  insert: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('insert', 0xec11),\n  mic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mic', 0xec12),\n  thumbsdownFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown-filled', 0xec13),\n  thumbsupFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup-filled', 0xec14),\n  coffee: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('coffee', 0xec15),\n  snake: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('snake', 0xec16),\n  game: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('game', 0xec17),\n  vr: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vr', 0xec18),\n  chip: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chip', 0xec19),\n  piano: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('piano', 0xec1a),\n  music: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('music', 0xec1b),\n  micFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mic-filled', 0xec1c),\n  repoFetch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-fetch', 0xec1d),\n  copilot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('copilot', 0xec1e),\n  lightbulbSparkle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-sparkle', 0xec1f),\n  robot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('robot', 0xec20),\n  sparkleFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sparkle-filled', 0xec21),\n  diffSingle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-single', 0xec22),\n  diffMultiple: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-multiple', 0xec23),\n  surroundWith: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('surround-with', 0xec24),\n  share: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('share', 0xec25),\n  gitStash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash', 0xec26),\n  gitStashApply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash-apply', 0xec27),\n  gitStashPop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash-pop', 0xec28),\n  vscode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vscode', 0xec29),\n  vscodeInsiders: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vscode-insiders', 0xec2a),\n  codeOss: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('code-oss', 0xec2b),\n  runCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-coverage', 0xec2c),\n  runAllCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-all-coverage', 0xec2d),\n  coverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('coverage', 0xec2e),\n  githubProject: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-project', 0xec2f),\n  mapVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-vertical', 0xec30),\n  foldVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-vertical', 0xec30),\n  mapVerticalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-vertical-filled', 0xec31),\n  foldVerticalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-vertical-filled', 0xec31),\n  goToSearch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('go-to-search', 0xec32),\n  percentage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('percentage', 0xec33),\n  sortPercentage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sort-percentage', 0xec33)\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getCodiconFontCharacters\": function() { return /* binding */ getCodiconFontCharacters; },\n/* harmony export */   \"register\": function() { return /* binding */ register; }\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/monaco-editor/esm/vs/base/common/types.js\");\n\nconst _codiconFontCharacters = Object.create(null);\nfunction register(id, fontCharacter) {\n  if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isString)(fontCharacter)) {\n    const val = _codiconFontCharacters[fontCharacter];\n    if (val === undefined) {\n      throw new Error(`${id} references an unknown codicon: ${fontCharacter}`);\n    }\n    fontCharacter = val;\n  }\n  _codiconFontCharacters[id] = fontCharacter;\n  return {\n    id\n  };\n}\n/**\n * Only to be used by the iconRegistry.\n */\nfunction getCodiconFontCharacters() {\n  return _codiconFontCharacters;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnNVdGlsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUN0QyxNQUFNQyxzQkFBc0IsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzNDLFNBQVNDLFFBQVFBLENBQUNDLEVBQUUsRUFBRUMsYUFBYSxFQUFFO0VBQ3hDLElBQUlOLG1EQUFRLENBQUNNLGFBQWEsQ0FBQyxFQUFFO0lBQ3pCLE1BQU1DLEdBQUcsR0FBR04sc0JBQXNCLENBQUNLLGFBQWEsQ0FBQztJQUNqRCxJQUFJQyxHQUFHLEtBQUtDLFNBQVMsRUFBRTtNQUNuQixNQUFNLElBQUlDLEtBQUssQ0FBQyxHQUFHSixFQUFFLG1DQUFtQ0MsYUFBYSxFQUFFLENBQUM7SUFDNUU7SUFDQUEsYUFBYSxHQUFHQyxHQUFHO0VBQ3ZCO0VBQ0FOLHNCQUFzQixDQUFDSSxFQUFFLENBQUMsR0FBR0MsYUFBYTtFQUMxQyxPQUFPO0lBQUVEO0VBQUcsQ0FBQztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNLLHdCQUF3QkEsQ0FBQSxFQUFHO0VBQ3ZDLE9BQU9ULHNCQUFzQjtBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnNVdGlsLmpzPzg0YTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL3R5cGVzLmpzJztcbmNvbnN0IF9jb2RpY29uRm9udENoYXJhY3RlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKGlkLCBmb250Q2hhcmFjdGVyKSB7XG4gICAgaWYgKGlzU3RyaW5nKGZvbnRDaGFyYWN0ZXIpKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IF9jb2RpY29uRm9udENoYXJhY3RlcnNbZm9udENoYXJhY3Rlcl07XG4gICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2lkfSByZWZlcmVuY2VzIGFuIHVua25vd24gY29kaWNvbjogJHtmb250Q2hhcmFjdGVyfWApO1xuICAgICAgICB9XG4gICAgICAgIGZvbnRDaGFyYWN0ZXIgPSB2YWw7XG4gICAgfVxuICAgIF9jb2RpY29uRm9udENoYXJhY3RlcnNbaWRdID0gZm9udENoYXJhY3RlcjtcbiAgICByZXR1cm4geyBpZCB9O1xufVxuLyoqXG4gKiBPbmx5IHRvIGJlIHVzZWQgYnkgdGhlIGljb25SZWdpc3RyeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvZGljb25Gb250Q2hhcmFjdGVycygpIHtcbiAgICByZXR1cm4gX2NvZGljb25Gb250Q2hhcmFjdGVycztcbn1cbiJdLCJuYW1lcyI6WyJpc1N0cmluZyIsIl9jb2RpY29uRm9udENoYXJhY3RlcnMiLCJPYmplY3QiLCJjcmVhdGUiLCJyZWdpc3RlciIsImlkIiwiZm9udENoYXJhY3RlciIsInZhbCIsInVuZGVmaW5lZCIsIkVycm9yIiwiZ2V0Q29kaWNvbkZvbnRDaGFyYWN0ZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/color.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/color.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Color\": function() { return /* binding */ Color; },\n/* harmony export */   \"HSLA\": function() { return /* binding */ HSLA; },\n/* harmony export */   \"HSVA\": function() { return /* binding */ HSVA; },\n/* harmony export */   \"RGBA\": function() { return /* binding */ RGBA; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  const decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\nclass RGBA {\n  constructor(r, g, b, a = 1) {\n    this._rgbaBrand = undefined;\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n  }\n}\nclass HSLA {\n  constructor(h, s, l, a) {\n    this._hslaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n  }\n  /**\n   * Converts an RGB color value to HSL. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes r, g, and b are contained in the set [0, 255] and\n   * returns h in the set [0, 360], s, and l in the set [0, 1].\n   */\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const a = rgba.a;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const l = (min + max) / 2;\n    const chroma = max - min;\n    if (chroma > 0) {\n      s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n      switch (max) {\n        case r:\n          h = (g - b) / chroma + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / chroma + 2;\n          break;\n        case b:\n          h = (r - g) / chroma + 4;\n          break;\n      }\n      h *= 60;\n      h = Math.round(h);\n    }\n    return new HSLA(h, s, l, a);\n  }\n  static _hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  }\n  /**\n   * Converts an HSL color value to RGB. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n   * returns r, g, and b in the set [0, 255].\n   */\n  static toRGBA(hsla) {\n    const h = hsla.h / 360;\n    const {\n      s,\n      l,\n      a\n    } = hsla;\n    let r, g, b;\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      r = HSLA._hue2rgb(p, q, h + 1 / 3);\n      g = HSLA._hue2rgb(p, q, h);\n      b = HSLA._hue2rgb(p, q, h - 1 / 3);\n    }\n    return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n  }\n}\nclass HSVA {\n  constructor(h, s, v, a) {\n    this._hsvaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n  }\n  // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const cmax = Math.max(r, g, b);\n    const cmin = Math.min(r, g, b);\n    const delta = cmax - cmin;\n    const s = cmax === 0 ? 0 : delta / cmax;\n    let m;\n    if (delta === 0) {\n      m = 0;\n    } else if (cmax === r) {\n      m = ((g - b) / delta % 6 + 6) % 6;\n    } else if (cmax === g) {\n      m = (b - r) / delta + 2;\n    } else {\n      m = (r - g) / delta + 4;\n    }\n    return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n  }\n  // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n  static toRGBA(hsva) {\n    const {\n      h,\n      s,\n      v,\n      a\n    } = hsva;\n    const c = v * s;\n    const x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    const m = v - c;\n    let [r, g, b] = [0, 0, 0];\n    if (h < 60) {\n      r = c;\n      g = x;\n    } else if (h < 120) {\n      r = x;\n      g = c;\n    } else if (h < 180) {\n      g = c;\n      b = x;\n    } else if (h < 240) {\n      g = x;\n      b = c;\n    } else if (h < 300) {\n      r = x;\n      b = c;\n    } else if (h <= 360) {\n      r = c;\n      b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n    return new RGBA(r, g, b, a);\n  }\n}\nclass Color {\n  static fromHex(hex) {\n    return Color.Format.CSS.parseHex(hex) || Color.red;\n  }\n  static equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    if (!a || !b) {\n      return false;\n    }\n    return a.equals(b);\n  }\n  get hsla() {\n    if (this._hsla) {\n      return this._hsla;\n    } else {\n      return HSLA.fromRGBA(this.rgba);\n    }\n  }\n  get hsva() {\n    if (this._hsva) {\n      return this._hsva;\n    }\n    return HSVA.fromRGBA(this.rgba);\n  }\n  constructor(arg) {\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n  equals(other) {\n    return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n  }\n  /**\n   * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n   * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n   */\n  getRelativeLuminance() {\n    const R = Color._relativeLuminanceForComponent(this.rgba.r);\n    const G = Color._relativeLuminanceForComponent(this.rgba.g);\n    const B = Color._relativeLuminanceForComponent(this.rgba.b);\n    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return roundFloat(luminance, 4);\n  }\n  static _relativeLuminanceForComponent(color) {\n    const c = color / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  }\n  /**\n   *\thttp://24ways.org/2010/calculating-color-contrast\n   *  Return 'true' if lighter color otherwise 'false'\n   */\n  isLighter() {\n    const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n    return yiq >= 128;\n  }\n  isLighterThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 > lum2;\n  }\n  isDarkerThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 < lum2;\n  }\n  lighten(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n  }\n  darken(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n  }\n  transparent(factor) {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this.rgba;\n    return new Color(new RGBA(r, g, b, a * factor));\n  }\n  isTransparent() {\n    return this.rgba.a === 0;\n  }\n  isOpaque() {\n    return this.rgba.a === 1;\n  }\n  opposite() {\n    return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n  }\n  makeOpaque(opaqueBackground) {\n    if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\n      // only allow to blend onto a non-opaque color onto a opaque color\n      return this;\n    }\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this.rgba;\n    // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\n    return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));\n  }\n  toString() {\n    if (!this._toString) {\n      this._toString = Color.Format.CSS.format(this);\n    }\n    return this._toString;\n  }\n  static getLighterColor(of, relative, factor) {\n    if (of.isLighterThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum2 - lum1) / lum2;\n    return of.lighten(factor);\n  }\n  static getDarkerColor(of, relative, factor) {\n    if (of.isDarkerThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum1 - lum2) / lum1;\n    return of.darken(factor);\n  }\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n  let Format;\n  (function (Format) {\n    let CSS;\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.formatRGB = formatRGB;\n      function formatRGBA(color) {\n        return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+color.rgba.a.toFixed(2)})`;\n      }\n      CSS.formatRGBA = formatRGBA;\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n        }\n        return Color.Format.CSS.formatHSLA(color);\n      }\n      CSS.formatHSL = formatHSL;\n      function formatHSLA(color) {\n        return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n      }\n      CSS.formatHSLA = formatHSLA;\n      function _toTwoDigitHex(n) {\n        const r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\n       * Formats the color as #RRGGBB\n       */\n      function formatHex(color) {\n        return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n      }\n      CSS.formatHex = formatHex;\n      /**\n       * Formats the color as #RRGGBBAA\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n       */\n      function formatHexA(color, compact = false) {\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n      }\n      CSS.formatHexA = formatHexA;\n      /**\n       * The default format will use HEX if opaque and RGBA otherwise.\n       */\n      function format(color) {\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.format = format;\n      /**\n       * Converts an Hex color value to a Color.\n       * returns r, g, and b are contained in the set [0, 255]\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n       */\n      function parseHex(hex) {\n        const length = hex.length;\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n        if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {\n          // Does not begin with a #\n          return null;\n        }\n        if (length === 7) {\n          // #RRGGBB format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          return new Color(new RGBA(r, g, b, 1));\n        }\n        if (length === 9) {\n          // #RRGGBBAA format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n          return new Color(new RGBA(r, g, b, a / 255));\n        }\n        if (length === 4) {\n          // #RGB format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n          const g = _parseHexDigit(hex.charCodeAt(2));\n          const b = _parseHexDigit(hex.charCodeAt(3));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n        }\n        if (length === 5) {\n          // #RGBA format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n          const g = _parseHexDigit(hex.charCodeAt(2));\n          const b = _parseHexDigit(hex.charCodeAt(3));\n          const a = _parseHexDigit(hex.charCodeAt(4));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n        }\n        // Invalid color\n        return null;\n      }\n      CSS.parseHex = parseHex;\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48 /* CharCode.Digit0 */:\n            return 0;\n          case 49 /* CharCode.Digit1 */:\n            return 1;\n          case 50 /* CharCode.Digit2 */:\n            return 2;\n          case 51 /* CharCode.Digit3 */:\n            return 3;\n          case 52 /* CharCode.Digit4 */:\n            return 4;\n          case 53 /* CharCode.Digit5 */:\n            return 5;\n          case 54 /* CharCode.Digit6 */:\n            return 6;\n          case 55 /* CharCode.Digit7 */:\n            return 7;\n          case 56 /* CharCode.Digit8 */:\n            return 8;\n          case 57 /* CharCode.Digit9 */:\n            return 9;\n          case 97 /* CharCode.a */:\n            return 10;\n          case 65 /* CharCode.A */:\n            return 10;\n          case 98 /* CharCode.b */:\n            return 11;\n          case 66 /* CharCode.B */:\n            return 11;\n          case 99 /* CharCode.c */:\n            return 12;\n          case 67 /* CharCode.C */:\n            return 12;\n          case 100 /* CharCode.d */:\n            return 13;\n          case 68 /* CharCode.D */:\n            return 13;\n          case 101 /* CharCode.e */:\n            return 14;\n          case 69 /* CharCode.E */:\n            return 14;\n          case 102 /* CharCode.f */:\n            return 15;\n          case 70 /* CharCode.F */:\n            return 15;\n        }\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/color.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LcsDiff\": function() { return /* binding */ LcsDiff; },\n/* harmony export */   \"StringDiffSequence\": function() { return /* binding */ StringDiffSequence; },\n/* harmony export */   \"stringDiff\": function() { return /* binding */ stringDiff; }\n/* harmony export */ });\n/* harmony import */ var _diffChange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diffChange.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash.js */ \"./node_modules/monaco-editor/esm/vs/base/common/hash.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass StringDiffSequence {\n  constructor(source) {\n    this.source = source;\n  }\n  getElements() {\n    const source = this.source;\n    const characters = new Int32Array(source.length);\n    for (let i = 0, len = source.length; i < len; i++) {\n      characters[i] = source.charCodeAt(i);\n    }\n    return characters;\n  }\n}\nfunction stringDiff(original, modified, pretty) {\n  return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;\n}\n//\n// The code below has been ported from a C# implementation in VS\n//\nclass Debug {\n  static Assert(condition, message) {\n    if (!condition) {\n      throw new Error(message);\n    }\n  }\n}\nclass MyArray {\n  /**\n   * Copies a range of elements from an Array starting at the specified source index and pastes\n   * them to another Array starting at the specified destination index. The length and the indexes\n   * are specified as 64-bit integers.\n   * sourceArray:\n   *\t\tThe Array that contains the data to copy.\n   * sourceIndex:\n   *\t\tA 64-bit integer that represents the index in the sourceArray at which copying begins.\n   * destinationArray:\n   *\t\tThe Array that receives the data.\n   * destinationIndex:\n   *\t\tA 64-bit integer that represents the index in the destinationArray at which storing begins.\n   * length:\n   *\t\tA 64-bit integer that represents the number of elements to copy.\n   */\n  static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n    for (let i = 0; i < length; i++) {\n      destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n    }\n  }\n  static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n    for (let i = 0; i < length; i++) {\n      destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n    }\n  }\n}\n/**\n * A utility class which helps to create the set of DiffChanges from\n * a difference operation. This class accepts original DiffElements and\n * modified DiffElements that are involved in a particular change. The\n * MarkNextChange() method can be called to mark the separation between\n * distinct changes. At the end, the Changes property can be called to retrieve\n * the constructed changes.\n */\nclass DiffChangeHelper {\n  /**\n   * Constructs a new DiffChangeHelper for the given DiffSequences.\n   */\n  constructor() {\n    this.m_changes = [];\n    this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n    this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n    this.m_originalCount = 0;\n    this.m_modifiedCount = 0;\n  }\n  /**\n   * Marks the beginning of the next change in the set of differences.\n   */\n  MarkNextChange() {\n    // Only add to the list if there is something to add\n    if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n      // Add the new change to our list\n      this.m_changes.push(new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));\n    }\n    // Reset for the next change\n    this.m_originalCount = 0;\n    this.m_modifiedCount = 0;\n    this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n    this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n  }\n  /**\n   * Adds the original element at the given position to the elements\n   * affected by the current change. The modified index gives context\n   * to the change position with respect to the original sequence.\n   * @param originalIndex The index of the original element to add.\n   * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.\n   */\n  AddOriginalElement(originalIndex, modifiedIndex) {\n    // The 'true' start index is the smallest of the ones we've seen\n    this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n    this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n    this.m_originalCount++;\n  }\n  /**\n   * Adds the modified element at the given position to the elements\n   * affected by the current change. The original index gives context\n   * to the change position with respect to the modified sequence.\n   * @param originalIndex The index of the original element that provides corresponding position in the original sequence.\n   * @param modifiedIndex The index of the modified element to add.\n   */\n  AddModifiedElement(originalIndex, modifiedIndex) {\n    // The 'true' start index is the smallest of the ones we've seen\n    this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n    this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n    this.m_modifiedCount++;\n  }\n  /**\n   * Retrieves all of the changes marked by the class.\n   */\n  getChanges() {\n    if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n      // Finish up on whatever is left\n      this.MarkNextChange();\n    }\n    return this.m_changes;\n  }\n  /**\n   * Retrieves all of the changes marked by the class in the reverse order\n   */\n  getReverseChanges() {\n    if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n      // Finish up on whatever is left\n      this.MarkNextChange();\n    }\n    this.m_changes.reverse();\n    return this.m_changes;\n  }\n}\n/**\n * An implementation of the difference algorithm described in\n * \"An O(ND) Difference Algorithm and its variations\" by Eugene W. Myers\n */\nclass LcsDiff {\n  /**\n   * Constructs the DiffFinder\n   */\n  constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null) {\n    this.ContinueProcessingPredicate = continueProcessingPredicate;\n    this._originalSequence = originalSequence;\n    this._modifiedSequence = modifiedSequence;\n    const [originalStringElements, originalElementsOrHash, originalHasStrings] = LcsDiff._getElements(originalSequence);\n    const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = LcsDiff._getElements(modifiedSequence);\n    this._hasStrings = originalHasStrings && modifiedHasStrings;\n    this._originalStringElements = originalStringElements;\n    this._originalElementsOrHash = originalElementsOrHash;\n    this._modifiedStringElements = modifiedStringElements;\n    this._modifiedElementsOrHash = modifiedElementsOrHash;\n    this.m_forwardHistory = [];\n    this.m_reverseHistory = [];\n  }\n  static _isStringArray(arr) {\n    return arr.length > 0 && typeof arr[0] === 'string';\n  }\n  static _getElements(sequence) {\n    const elements = sequence.getElements();\n    if (LcsDiff._isStringArray(elements)) {\n      const hashes = new Int32Array(elements.length);\n      for (let i = 0, len = elements.length; i < len; i++) {\n        hashes[i] = (0,_hash_js__WEBPACK_IMPORTED_MODULE_1__.stringHash)(elements[i], 0);\n      }\n      return [elements, hashes, true];\n    }\n    if (elements instanceof Int32Array) {\n      return [[], elements, false];\n    }\n    return [[], new Int32Array(elements), false];\n  }\n  ElementsAreEqual(originalIndex, newIndex) {\n    if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {\n      return false;\n    }\n    return this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true;\n  }\n  ElementsAreStrictEqual(originalIndex, newIndex) {\n    if (!this.ElementsAreEqual(originalIndex, newIndex)) {\n      return false;\n    }\n    const originalElement = LcsDiff._getStrictElement(this._originalSequence, originalIndex);\n    const modifiedElement = LcsDiff._getStrictElement(this._modifiedSequence, newIndex);\n    return originalElement === modifiedElement;\n  }\n  static _getStrictElement(sequence, index) {\n    if (typeof sequence.getStrictElement === 'function') {\n      return sequence.getStrictElement(index);\n    }\n    return null;\n  }\n  OriginalElementsAreEqual(index1, index2) {\n    if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {\n      return false;\n    }\n    return this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true;\n  }\n  ModifiedElementsAreEqual(index1, index2) {\n    if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {\n      return false;\n    }\n    return this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true;\n  }\n  ComputeDiff(pretty) {\n    return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);\n  }\n  /**\n   * Computes the differences between the original and modified input\n   * sequences on the bounded range.\n   * @returns An array of the differences between the two input sequences.\n   */\n  _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {\n    const quitEarlyArr = [false];\n    let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);\n    if (pretty) {\n      // We have to clean up the computed diff to be more intuitive\n      // but it turns out this cannot be done correctly until the entire set\n      // of diffs have been computed\n      changes = this.PrettifyChanges(changes);\n    }\n    return {\n      quitEarly: quitEarlyArr[0],\n      changes: changes\n    };\n  }\n  /**\n   * Private helper method which computes the differences on the bounded range\n   * recursively.\n   * @returns An array of the differences between the two input sequences.\n   */\n  ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {\n    quitEarlyArr[0] = false;\n    // Find the start of the differences\n    while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {\n      originalStart++;\n      modifiedStart++;\n    }\n    // Find the end of the differences\n    while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {\n      originalEnd--;\n      modifiedEnd--;\n    }\n    // In the special case where we either have all insertions or all deletions or the sequences are identical\n    if (originalStart > originalEnd || modifiedStart > modifiedEnd) {\n      let changes;\n      if (modifiedStart <= modifiedEnd) {\n        Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\n        // All insertions\n        changes = [new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)];\n      } else if (originalStart <= originalEnd) {\n        Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\n        // All deletions\n        changes = [new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)];\n      } else {\n        Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\n        Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\n        // Identical sequences - No differences\n        changes = [];\n      }\n      return changes;\n    }\n    // This problem can be solved using the Divide-And-Conquer technique.\n    const midOriginalArr = [0];\n    const midModifiedArr = [0];\n    const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);\n    const midOriginal = midOriginalArr[0];\n    const midModified = midModifiedArr[0];\n    if (result !== null) {\n      // Result is not-null when there was enough memory to compute the changes while\n      // searching for the recursion point\n      return result;\n    } else if (!quitEarlyArr[0]) {\n      // We can break the problem down recursively by finding the changes in the\n      // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)\n      // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)\n      // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point\n      const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);\n      let rightChanges = [];\n      if (!quitEarlyArr[0]) {\n        rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);\n      } else {\n        // We didn't have time to finish the first half, so we don't have time to compute this half.\n        // Consider the entire rest of the sequence different.\n        rightChanges = [new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)];\n      }\n      return this.ConcatenateChanges(leftChanges, rightChanges);\n    }\n    // If we hit here, we quit early, and so can't return anything meaningful\n    return [new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)];\n  }\n  WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {\n    let forwardChanges = null;\n    let reverseChanges = null;\n    // First, walk backward through the forward diagonals history\n    let changeHelper = new DiffChangeHelper();\n    let diagonalMin = diagonalForwardStart;\n    let diagonalMax = diagonalForwardEnd;\n    let diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalForwardOffset;\n    let lastOriginalIndex = -1073741824 /* Constants.MIN_SAFE_SMALL_INTEGER */;\n    let historyIndex = this.m_forwardHistory.length - 1;\n    do {\n      // Get the diagonal index from the relative diagonal number\n      const diagonal = diagonalRelative + diagonalForwardBase;\n      // Figure out where we came from\n      if (diagonal === diagonalMin || diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {\n        // Vertical line (the element is an insert)\n        originalIndex = forwardPoints[diagonal + 1];\n        modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n        if (originalIndex < lastOriginalIndex) {\n          changeHelper.MarkNextChange();\n        }\n        lastOriginalIndex = originalIndex;\n        changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);\n        diagonalRelative = diagonal + 1 - diagonalForwardBase; //Setup for the next iteration\n      } else {\n        // Horizontal line (the element is a deletion)\n        originalIndex = forwardPoints[diagonal - 1] + 1;\n        modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n        if (originalIndex < lastOriginalIndex) {\n          changeHelper.MarkNextChange();\n        }\n        lastOriginalIndex = originalIndex - 1;\n        changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);\n        diagonalRelative = diagonal - 1 - diagonalForwardBase; //Setup for the next iteration\n      }\n      if (historyIndex >= 0) {\n        forwardPoints = this.m_forwardHistory[historyIndex];\n        diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot\n        diagonalMin = 1;\n        diagonalMax = forwardPoints.length - 1;\n      }\n    } while (--historyIndex >= -1);\n    // Ironically, we get the forward changes as the reverse of the\n    // order we added them since we technically added them backwards\n    forwardChanges = changeHelper.getReverseChanges();\n    if (quitEarlyArr[0]) {\n      // TODO: Calculate a partial from the reverse diagonals.\n      //       For now, just assume everything after the midOriginal/midModified point is a diff\n      let originalStartPoint = midOriginalArr[0] + 1;\n      let modifiedStartPoint = midModifiedArr[0] + 1;\n      if (forwardChanges !== null && forwardChanges.length > 0) {\n        const lastForwardChange = forwardChanges[forwardChanges.length - 1];\n        originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());\n        modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());\n      }\n      reverseChanges = [new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)];\n    } else {\n      // Now walk backward through the reverse diagonals history\n      changeHelper = new DiffChangeHelper();\n      diagonalMin = diagonalReverseStart;\n      diagonalMax = diagonalReverseEnd;\n      diagonalRelative = midOriginalArr[0] - midModifiedArr[0] - diagonalReverseOffset;\n      lastOriginalIndex = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n      historyIndex = deltaIsEven ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;\n      do {\n        // Get the diagonal index from the relative diagonal number\n        const diagonal = diagonalRelative + diagonalReverseBase;\n        // Figure out where we came from\n        if (diagonal === diagonalMin || diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {\n          // Horizontal line (the element is a deletion))\n          originalIndex = reversePoints[diagonal + 1] - 1;\n          modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n          if (originalIndex > lastOriginalIndex) {\n            changeHelper.MarkNextChange();\n          }\n          lastOriginalIndex = originalIndex + 1;\n          changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);\n          diagonalRelative = diagonal + 1 - diagonalReverseBase; //Setup for the next iteration\n        } else {\n          // Vertical line (the element is an insertion)\n          originalIndex = reversePoints[diagonal - 1];\n          modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n          if (originalIndex > lastOriginalIndex) {\n            changeHelper.MarkNextChange();\n          }\n          lastOriginalIndex = originalIndex;\n          changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);\n          diagonalRelative = diagonal - 1 - diagonalReverseBase; //Setup for the next iteration\n        }\n        if (historyIndex >= 0) {\n          reversePoints = this.m_reverseHistory[historyIndex];\n          diagonalReverseBase = reversePoints[0]; //We stored this in the first spot\n          diagonalMin = 1;\n          diagonalMax = reversePoints.length - 1;\n        }\n      } while (--historyIndex >= -1);\n      // There are cases where the reverse history will find diffs that\n      // are correct, but not intuitive, so we need shift them.\n      reverseChanges = changeHelper.getChanges();\n    }\n    return this.ConcatenateChanges(forwardChanges, reverseChanges);\n  }\n  /**\n   * Given the range to compute the diff on, this method finds the point:\n   * (midOriginal, midModified)\n   * that exists in the middle of the LCS of the two sequences and\n   * is the point at which the LCS problem may be broken down recursively.\n   * This method will try to keep the LCS trace in memory. If the LCS recursion\n   * point is calculated and the full trace is available in memory, then this method\n   * will return the change list.\n   * @param originalStart The start bound of the original sequence range\n   * @param originalEnd The end bound of the original sequence range\n   * @param modifiedStart The start bound of the modified sequence range\n   * @param modifiedEnd The end bound of the modified sequence range\n   * @param midOriginal The middle point of the original sequence range\n   * @param midModified The middle point of the modified sequence range\n   * @returns The diff changes, if available, otherwise null\n   */\n  ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {\n    let originalIndex = 0,\n      modifiedIndex = 0;\n    let diagonalForwardStart = 0,\n      diagonalForwardEnd = 0;\n    let diagonalReverseStart = 0,\n      diagonalReverseEnd = 0;\n    // To traverse the edit graph and produce the proper LCS, our actual\n    // start position is just outside the given boundary\n    originalStart--;\n    modifiedStart--;\n    // We set these up to make the compiler happy, but they will\n    // be replaced before we return with the actual recursion point\n    midOriginalArr[0] = 0;\n    midModifiedArr[0] = 0;\n    // Clear out the history\n    this.m_forwardHistory = [];\n    this.m_reverseHistory = [];\n    // Each cell in the two arrays corresponds to a diagonal in the edit graph.\n    // The integer value in the cell represents the originalIndex of the furthest\n    // reaching point found so far that ends in that diagonal.\n    // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.\n    const maxDifferences = originalEnd - originalStart + (modifiedEnd - modifiedStart);\n    const numDiagonals = maxDifferences + 1;\n    const forwardPoints = new Int32Array(numDiagonals);\n    const reversePoints = new Int32Array(numDiagonals);\n    // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)\n    // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)\n    const diagonalForwardBase = modifiedEnd - modifiedStart;\n    const diagonalReverseBase = originalEnd - originalStart;\n    // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n    //    diagonal number (relative to diagonalForwardBase)\n    // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n    //    diagonal number (relative to diagonalReverseBase)\n    const diagonalForwardOffset = originalStart - modifiedStart;\n    const diagonalReverseOffset = originalEnd - modifiedEnd;\n    // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers\n    //   relative to the start diagonal with diagonal numbers relative to the end diagonal.\n    // The Even/Oddn-ness of this delta is important for determining when we should check for overlap\n    const delta = diagonalReverseBase - diagonalForwardBase;\n    const deltaIsEven = delta % 2 === 0;\n    // Here we set up the start and end points as the furthest points found so far\n    // in both the forward and reverse directions, respectively\n    forwardPoints[diagonalForwardBase] = originalStart;\n    reversePoints[diagonalReverseBase] = originalEnd;\n    // Remember if we quit early, and thus need to do a best-effort result instead of a real result.\n    quitEarlyArr[0] = false;\n    // A couple of points:\n    // --With this method, we iterate on the number of differences between the two sequences.\n    //   The more differences there actually are, the longer this will take.\n    // --Also, as the number of differences increases, we have to search on diagonals further\n    //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).\n    // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences\n    //   is even and odd diagonals only when numDifferences is odd.\n    for (let numDifferences = 1; numDifferences <= maxDifferences / 2 + 1; numDifferences++) {\n      let furthestOriginalIndex = 0;\n      let furthestModifiedIndex = 0;\n      // Run the algorithm in the forward direction\n      diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n      diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n      for (let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {\n        // STEP 1: We extend the furthest reaching point in the present diagonal\n        // by looking at the diagonals above and below and picking the one whose point\n        // is further away from the start point (originalStart, modifiedStart)\n        if (diagonal === diagonalForwardStart || diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1]) {\n          originalIndex = forwardPoints[diagonal + 1];\n        } else {\n          originalIndex = forwardPoints[diagonal - 1] + 1;\n        }\n        modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;\n        // Save the current originalIndex so we can test for false overlap in step 3\n        const tempOriginalIndex = originalIndex;\n        // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n        // so long as the elements are equal.\n        while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {\n          originalIndex++;\n          modifiedIndex++;\n        }\n        forwardPoints[diagonal] = originalIndex;\n        if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {\n          furthestOriginalIndex = originalIndex;\n          furthestModifiedIndex = modifiedIndex;\n        }\n        // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)\n        // and diagonal is in the range of reverse diagonals computed for numDifferences-1\n        // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)\n        // then check for overlap.\n        if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= numDifferences - 1) {\n          if (originalIndex >= reversePoints[diagonal]) {\n            midOriginalArr[0] = originalIndex;\n            midModifiedArr[0] = modifiedIndex;\n            if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */ + 1) {\n              // BINGO! We overlapped, and we have the full trace in memory!\n              return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n            } else {\n              // Either false overlap, or we didn't have enough memory for the full trace\n              // Just return the recursion point\n              return null;\n            }\n          }\n        }\n      }\n      // Check to see if we should be quitting early, before moving on to the next iteration.\n      const matchLengthOfLongest = (furthestOriginalIndex - originalStart + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;\n      if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {\n        // We can't finish, so skip ahead to generating a result from what we have.\n        quitEarlyArr[0] = true;\n        // Use the furthest distance we got in the forward direction.\n        midOriginalArr[0] = furthestOriginalIndex;\n        midModifiedArr[0] = furthestModifiedIndex;\n        if (matchLengthOfLongest > 0 && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */ + 1) {\n          // Enough of the history is in memory to walk it backwards\n          return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n        } else {\n          // We didn't actually remember enough of the history.\n          //Since we are quitting the diff early, we need to shift back the originalStart and modified start\n          //back into the boundary limits since we decremented their value above beyond the boundary limit.\n          originalStart++;\n          modifiedStart++;\n          return [new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)];\n        }\n      }\n      // Run the algorithm in the reverse direction\n      diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n      diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n      for (let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {\n        // STEP 1: We extend the furthest reaching point in the present diagonal\n        // by looking at the diagonals above and below and picking the one whose point\n        // is further away from the start point (originalEnd, modifiedEnd)\n        if (diagonal === diagonalReverseStart || diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1]) {\n          originalIndex = reversePoints[diagonal + 1] - 1;\n        } else {\n          originalIndex = reversePoints[diagonal - 1];\n        }\n        modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;\n        // Save the current originalIndex so we can test for false overlap\n        const tempOriginalIndex = originalIndex;\n        // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n        // as long as the elements are equal.\n        while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {\n          originalIndex--;\n          modifiedIndex--;\n        }\n        reversePoints[diagonal] = originalIndex;\n        // STEP 4: If delta is even (overlap first happens on reverse when delta is even)\n        // and diagonal is in the range of forward diagonals computed for numDifferences\n        // then check for overlap.\n        if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {\n          if (originalIndex <= forwardPoints[diagonal]) {\n            midOriginalArr[0] = originalIndex;\n            midModifiedArr[0] = modifiedIndex;\n            if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */ + 1) {\n              // BINGO! We overlapped, and we have the full trace in memory!\n              return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n            } else {\n              // Either false overlap, or we didn't have enough memory for the full trace\n              // Just return the recursion point\n              return null;\n            }\n          }\n        }\n      }\n      // Save current vectors to history before the next iteration\n      if (numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */) {\n        // We are allocating space for one extra int, which we fill with\n        // the index of the diagonal base index\n        let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);\n        temp[0] = diagonalForwardBase - diagonalForwardStart + 1;\n        MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);\n        this.m_forwardHistory.push(temp);\n        temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);\n        temp[0] = diagonalReverseBase - diagonalReverseStart + 1;\n        MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);\n        this.m_reverseHistory.push(temp);\n      }\n    }\n    // If we got here, then we have the full trace in history. We just have to convert it to a change list\n    // NOTE: This part is a bit messy\n    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n  }\n  /**\n   * Shifts the given changes to provide a more intuitive diff.\n   * While the first element in a diff matches the first element after the diff,\n   * we shift the diff down.\n   *\n   * @param changes The list of changes to shift\n   * @returns The shifted changes\n   */\n  PrettifyChanges(changes) {\n    // Shift all the changes down first\n    for (let i = 0; i < changes.length; i++) {\n      const change = changes[i];\n      const originalStop = i < changes.length - 1 ? changes[i + 1].originalStart : this._originalElementsOrHash.length;\n      const modifiedStop = i < changes.length - 1 ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;\n      const checkOriginal = change.originalLength > 0;\n      const checkModified = change.modifiedLength > 0;\n      while (change.originalStart + change.originalLength < originalStop && change.modifiedStart + change.modifiedLength < modifiedStop && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength)) && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {\n        const startStrictEqual = this.ElementsAreStrictEqual(change.originalStart, change.modifiedStart);\n        const endStrictEqual = this.ElementsAreStrictEqual(change.originalStart + change.originalLength, change.modifiedStart + change.modifiedLength);\n        if (endStrictEqual && !startStrictEqual) {\n          // moving the change down would create an equal change, but the elements are not strict equal\n          break;\n        }\n        change.originalStart++;\n        change.modifiedStart++;\n      }\n      const mergedChangeArr = [null];\n      if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {\n        changes[i] = mergedChangeArr[0];\n        changes.splice(i + 1, 1);\n        i--;\n        continue;\n      }\n    }\n    // Shift changes back up until we hit empty or whitespace-only lines\n    for (let i = changes.length - 1; i >= 0; i--) {\n      const change = changes[i];\n      let originalStop = 0;\n      let modifiedStop = 0;\n      if (i > 0) {\n        const prevChange = changes[i - 1];\n        originalStop = prevChange.originalStart + prevChange.originalLength;\n        modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;\n      }\n      const checkOriginal = change.originalLength > 0;\n      const checkModified = change.modifiedLength > 0;\n      let bestDelta = 0;\n      let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);\n      for (let delta = 1;; delta++) {\n        const originalStart = change.originalStart - delta;\n        const modifiedStart = change.modifiedStart - delta;\n        if (originalStart < originalStop || modifiedStart < modifiedStop) {\n          break;\n        }\n        if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {\n          break;\n        }\n        if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {\n          break;\n        }\n        const touchingPreviousChange = originalStart === originalStop && modifiedStart === modifiedStop;\n        const score = (touchingPreviousChange ? 5 : 0) + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength);\n        if (score > bestScore) {\n          bestScore = score;\n          bestDelta = delta;\n        }\n      }\n      change.originalStart -= bestDelta;\n      change.modifiedStart -= bestDelta;\n      const mergedChangeArr = [null];\n      if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {\n        changes[i - 1] = mergedChangeArr[0];\n        changes.splice(i, 1);\n        i++;\n        continue;\n      }\n    }\n    // There could be multiple longest common substrings.\n    // Give preference to the ones containing longer lines\n    if (this._hasStrings) {\n      for (let i = 1, len = changes.length; i < len; i++) {\n        const aChange = changes[i - 1];\n        const bChange = changes[i];\n        const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;\n        const aOriginalStart = aChange.originalStart;\n        const bOriginalEnd = bChange.originalStart + bChange.originalLength;\n        const abOriginalLength = bOriginalEnd - aOriginalStart;\n        const aModifiedStart = aChange.modifiedStart;\n        const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;\n        const abModifiedLength = bModifiedEnd - aModifiedStart;\n        // Avoid wasting a lot of time with these searches\n        if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {\n          const t = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);\n          if (t) {\n            const [originalMatchStart, modifiedMatchStart] = t;\n            if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {\n              // switch to another sequence that has a better score\n              aChange.originalLength = originalMatchStart - aChange.originalStart;\n              aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;\n              bChange.originalStart = originalMatchStart + matchedLength;\n              bChange.modifiedStart = modifiedMatchStart + matchedLength;\n              bChange.originalLength = bOriginalEnd - bChange.originalStart;\n              bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;\n            }\n          }\n        }\n      }\n    }\n    return changes;\n  }\n  _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {\n    if (originalLength < desiredLength || modifiedLength < desiredLength) {\n      return null;\n    }\n    const originalMax = originalStart + originalLength - desiredLength + 1;\n    const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;\n    let bestScore = 0;\n    let bestOriginalStart = 0;\n    let bestModifiedStart = 0;\n    for (let i = originalStart; i < originalMax; i++) {\n      for (let j = modifiedStart; j < modifiedMax; j++) {\n        const score = this._contiguousSequenceScore(i, j, desiredLength);\n        if (score > 0 && score > bestScore) {\n          bestScore = score;\n          bestOriginalStart = i;\n          bestModifiedStart = j;\n        }\n      }\n    }\n    if (bestScore > 0) {\n      return [bestOriginalStart, bestModifiedStart];\n    }\n    return null;\n  }\n  _contiguousSequenceScore(originalStart, modifiedStart, length) {\n    let score = 0;\n    for (let l = 0; l < length; l++) {\n      if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {\n        return 0;\n      }\n      score += this._originalStringElements[originalStart + l].length;\n    }\n    return score;\n  }\n  _OriginalIsBoundary(index) {\n    if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {\n      return true;\n    }\n    return this._hasStrings && /^\\s*$/.test(this._originalStringElements[index]);\n  }\n  _OriginalRegionIsBoundary(originalStart, originalLength) {\n    if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {\n      return true;\n    }\n    if (originalLength > 0) {\n      const originalEnd = originalStart + originalLength;\n      if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _ModifiedIsBoundary(index) {\n    if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {\n      return true;\n    }\n    return this._hasStrings && /^\\s*$/.test(this._modifiedStringElements[index]);\n  }\n  _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {\n    if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {\n      return true;\n    }\n    if (modifiedLength > 0) {\n      const modifiedEnd = modifiedStart + modifiedLength;\n      if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {\n    const originalScore = this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0;\n    const modifiedScore = this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0;\n    return originalScore + modifiedScore;\n  }\n  /**\n   * Concatenates the two input DiffChange lists and returns the resulting\n   * list.\n   * @param The left changes\n   * @param The right changes\n   * @returns The concatenated list\n   */\n  ConcatenateChanges(left, right) {\n    const mergedChangeArr = [];\n    if (left.length === 0 || right.length === 0) {\n      return right.length > 0 ? right : left;\n    } else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {\n      // Since we break the problem down recursively, it is possible that we\n      // might recurse in the middle of a change thereby splitting it into\n      // two changes. Here in the combining stage, we detect and fuse those\n      // changes back together\n      const result = new Array(left.length + right.length - 1);\n      MyArray.Copy(left, 0, result, 0, left.length - 1);\n      result[left.length - 1] = mergedChangeArr[0];\n      MyArray.Copy(right, 1, result, left.length, right.length - 1);\n      return result;\n    } else {\n      const result = new Array(left.length + right.length);\n      MyArray.Copy(left, 0, result, 0, left.length);\n      MyArray.Copy(right, 0, result, left.length, right.length);\n      return result;\n    }\n  }\n  /**\n   * Returns true if the two changes overlap and can be merged into a single\n   * change\n   * @param left The left change\n   * @param right The right change\n   * @param mergedChange The merged change if the two overlap, null otherwise\n   * @returns True if the two changes overlap\n   */\n  ChangesOverlap(left, right, mergedChangeArr) {\n    Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');\n    Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');\n    if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n      const originalStart = left.originalStart;\n      let originalLength = left.originalLength;\n      const modifiedStart = left.modifiedStart;\n      let modifiedLength = left.modifiedLength;\n      if (left.originalStart + left.originalLength >= right.originalStart) {\n        originalLength = right.originalStart + right.originalLength - left.originalStart;\n      }\n      if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n        modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;\n      }\n      mergedChangeArr[0] = new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);\n      return true;\n    } else {\n      mergedChangeArr[0] = null;\n      return false;\n    }\n  }\n  /**\n   * Helper method used to clip a diagonal index to the range of valid\n   * diagonals. This also decides whether or not the diagonal index,\n   * if it exceeds the boundary, should be clipped to the boundary or clipped\n   * one inside the boundary depending on the Even/Odd status of the boundary\n   * and numDifferences.\n   * @param diagonal The index of the diagonal to clip.\n   * @param numDifferences The current number of differences being iterated upon.\n   * @param diagonalBaseIndex The base reference diagonal.\n   * @param numDiagonals The total number of diagonals.\n   * @returns The clipped diagonal index.\n   */\n  ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {\n    if (diagonal >= 0 && diagonal < numDiagonals) {\n      // Nothing to clip, its in range\n      return diagonal;\n    }\n    // diagonalsBelow: The number of diagonals below the reference diagonal\n    // diagonalsAbove: The number of diagonals above the reference diagonal\n    const diagonalsBelow = diagonalBaseIndex;\n    const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;\n    const diffEven = numDifferences % 2 === 0;\n    if (diagonal < 0) {\n      const lowerBoundEven = diagonalsBelow % 2 === 0;\n      return diffEven === lowerBoundEven ? 0 : 1;\n    } else {\n      const upperBoundEven = diagonalsAbove % 2 === 0;\n      return diffEven === upperBoundEven ? numDiagonals - 1 : numDiagonals - 2;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiffChange\": function() { return /* binding */ DiffChange; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Represents information about a specific difference between two sequences.\n */\nclass DiffChange {\n  /**\n   * Constructs a new DiffChange with the given sequence information\n   * and content.\n   */\n  constructor(originalStart, originalLength, modifiedStart, modifiedLength) {\n    //Debug.Assert(originalLength > 0 || modifiedLength > 0, \"originalLength and modifiedLength cannot both be <= 0\");\n    this.originalStart = originalStart;\n    this.originalLength = originalLength;\n    this.modifiedStart = modifiedStart;\n    this.modifiedLength = modifiedLength;\n  }\n  /**\n   * The end point (exclusive) of the change in the original sequence.\n   */\n  getOriginalEnd() {\n    return this.originalStart + this.originalLength;\n  }\n  /**\n   * The end point (exclusive) of the change in the modified sequence.\n   */\n  getModifiedEnd() {\n    return this.modifiedStart + this.modifiedLength;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZGlmZi9kaWZmQ2hhbmdlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLFVBQVUsQ0FBQztFQUNwQjtBQUNKO0FBQ0E7QUFDQTtFQUNJQyxXQUFXQSxDQUFDQyxhQUFhLEVBQUVDLGNBQWMsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLEVBQUU7SUFDdEU7SUFDQSxJQUFJLENBQUNILGFBQWEsR0FBR0EsYUFBYTtJQUNsQyxJQUFJLENBQUNDLGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNDLGFBQWEsR0FBR0EsYUFBYTtJQUNsQyxJQUFJLENBQUNDLGNBQWMsR0FBR0EsY0FBYztFQUN4QztFQUNBO0FBQ0o7QUFDQTtFQUNJQyxjQUFjQSxDQUFBLEVBQUc7SUFDYixPQUFPLElBQUksQ0FBQ0osYUFBYSxHQUFHLElBQUksQ0FBQ0MsY0FBYztFQUNuRDtFQUNBO0FBQ0o7QUFDQTtFQUNJSSxjQUFjQSxDQUFBLEVBQUc7SUFDYixPQUFPLElBQUksQ0FBQ0gsYUFBYSxHQUFHLElBQUksQ0FBQ0MsY0FBYztFQUNuRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9kaWZmL2RpZmZDaGFuZ2UuanM/NmU2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUmVwcmVzZW50cyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc2VxdWVuY2VzLlxuICovXG5leHBvcnQgY2xhc3MgRGlmZkNoYW5nZSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBEaWZmQ2hhbmdlIHdpdGggdGhlIGdpdmVuIHNlcXVlbmNlIGluZm9ybWF0aW9uXG4gICAgICogYW5kIGNvbnRlbnQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoKSB7XG4gICAgICAgIC8vRGVidWcuQXNzZXJ0KG9yaWdpbmFsTGVuZ3RoID4gMCB8fCBtb2RpZmllZExlbmd0aCA+IDAsIFwib3JpZ2luYWxMZW5ndGggYW5kIG1vZGlmaWVkTGVuZ3RoIGNhbm5vdCBib3RoIGJlIDw9IDBcIik7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGFydCA9IG9yaWdpbmFsU3RhcnQ7XG4gICAgICAgIHRoaXMub3JpZ2luYWxMZW5ndGggPSBvcmlnaW5hbExlbmd0aDtcbiAgICAgICAgdGhpcy5tb2RpZmllZFN0YXJ0ID0gbW9kaWZpZWRTdGFydDtcbiAgICAgICAgdGhpcy5tb2RpZmllZExlbmd0aCA9IG1vZGlmaWVkTGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZW5kIHBvaW50IChleGNsdXNpdmUpIG9mIHRoZSBjaGFuZ2UgaW4gdGhlIG9yaWdpbmFsIHNlcXVlbmNlLlxuICAgICAqL1xuICAgIGdldE9yaWdpbmFsRW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbFN0YXJ0ICsgdGhpcy5vcmlnaW5hbExlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGVuZCBwb2ludCAoZXhjbHVzaXZlKSBvZiB0aGUgY2hhbmdlIGluIHRoZSBtb2RpZmllZCBzZXF1ZW5jZS5cbiAgICAgKi9cbiAgICBnZXRNb2RpZmllZEVuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kaWZpZWRTdGFydCArIHRoaXMubW9kaWZpZWRMZW5ndGg7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkRpZmZDaGFuZ2UiLCJjb25zdHJ1Y3RvciIsIm9yaWdpbmFsU3RhcnQiLCJvcmlnaW5hbExlbmd0aCIsIm1vZGlmaWVkU3RhcnQiLCJtb2RpZmllZExlbmd0aCIsImdldE9yaWdpbmFsRW5kIiwiZ2V0TW9kaWZpZWRFbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/errors.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BugIndicatingError\": function() { return /* binding */ BugIndicatingError; },\n/* harmony export */   \"CancellationError\": function() { return /* binding */ CancellationError; },\n/* harmony export */   \"ErrorHandler\": function() { return /* binding */ ErrorHandler; },\n/* harmony export */   \"ErrorNoTelemetry\": function() { return /* binding */ ErrorNoTelemetry; },\n/* harmony export */   \"NotSupportedError\": function() { return /* binding */ NotSupportedError; },\n/* harmony export */   \"canceled\": function() { return /* binding */ canceled; },\n/* harmony export */   \"errorHandler\": function() { return /* binding */ errorHandler; },\n/* harmony export */   \"illegalArgument\": function() { return /* binding */ illegalArgument; },\n/* harmony export */   \"illegalState\": function() { return /* binding */ illegalState; },\n/* harmony export */   \"isCancellationError\": function() { return /* binding */ isCancellationError; },\n/* harmony export */   \"onUnexpectedError\": function() { return /* binding */ onUnexpectedError; },\n/* harmony export */   \"onUnexpectedExternalError\": function() { return /* binding */ onUnexpectedExternalError; },\n/* harmony export */   \"transformErrorForSerialization\": function() { return /* binding */ transformErrorForSerialization; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nclass ErrorHandler {\n  constructor() {\n    this.listeners = [];\n    this.unexpectedErrorHandler = function (e) {\n      setTimeout(() => {\n        if (e.stack) {\n          if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\n            throw new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\n          }\n          throw new Error(e.message + '\\n\\n' + e.stack);\n        }\n        throw e;\n      }, 0);\n    };\n  }\n  emit(e) {\n    this.listeners.forEach(listener => {\n      listener(e);\n    });\n  }\n  onUnexpectedError(e) {\n    this.unexpectedErrorHandler(e);\n    this.emit(e);\n  }\n  // For external errors, we don't want the listeners to be called\n  onUnexpectedExternalError(e) {\n    this.unexpectedErrorHandler(e);\n  }\n}\nconst errorHandler = new ErrorHandler();\nfunction onUnexpectedError(e) {\n  // ignore errors from cancelled promises\n  if (!isCancellationError(e)) {\n    errorHandler.onUnexpectedError(e);\n  }\n  return undefined;\n}\nfunction onUnexpectedExternalError(e) {\n  // ignore errors from cancelled promises\n  if (!isCancellationError(e)) {\n    errorHandler.onUnexpectedExternalError(e);\n  }\n  return undefined;\n}\nfunction transformErrorForSerialization(error) {\n  if (error instanceof Error) {\n    const {\n      name,\n      message\n    } = error;\n    const stack = error.stacktrace || error.stack;\n    return {\n      $isError: true,\n      name,\n      message,\n      stack,\n      noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\n    };\n  }\n  // return as is\n  return error;\n}\nconst canceledName = 'Canceled';\n/**\n * Checks if the given error is a promise in canceled state\n */\nfunction isCancellationError(error) {\n  if (error instanceof CancellationError) {\n    return true;\n  }\n  return error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n// !!!IMPORTANT!!!\n// Do NOT change this class because it is also used as an API-type.\nclass CancellationError extends Error {\n  constructor() {\n    super(canceledName);\n    this.name = this.message;\n  }\n}\n/**\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\n */\nfunction canceled() {\n  const error = new Error(canceledName);\n  error.name = error.message;\n  return error;\n}\nfunction illegalArgument(name) {\n  if (name) {\n    return new Error(`Illegal argument: ${name}`);\n  } else {\n    return new Error('Illegal argument');\n  }\n}\nfunction illegalState(name) {\n  if (name) {\n    return new Error(`Illegal state: ${name}`);\n  } else {\n    return new Error('Illegal state');\n  }\n}\nclass NotSupportedError extends Error {\n  constructor(message) {\n    super('NotSupported');\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n/**\n * Error that when thrown won't be logged in telemetry as an unhandled error.\n */\nclass ErrorNoTelemetry extends Error {\n  constructor(msg) {\n    super(msg);\n    this.name = 'CodeExpectedError';\n  }\n  static fromError(err) {\n    if (err instanceof ErrorNoTelemetry) {\n      return err;\n    }\n    const result = new ErrorNoTelemetry();\n    result.message = err.message;\n    result.stack = err.stack;\n    return result;\n  }\n  static isErrorNoTelemetry(err) {\n    return err.name === 'CodeExpectedError';\n  }\n}\n/**\n * This error indicates a bug.\n * Do not throw this for invalid user input.\n * Only catch this error to recover gracefully from bugs.\n */\nclass BugIndicatingError extends Error {\n  constructor(message) {\n    super(message || 'An unexpected bug occurred.');\n    Object.setPrototypeOf(this, BugIndicatingError.prototype);\n    // Because we know for sure only buggy code throws this,\n    // we definitely want to break here and fix the bug.\n    // eslint-disable-next-line no-debugger\n    // debugger;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/errors.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/event.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DebounceEmitter\": function() { return /* binding */ DebounceEmitter; },\n/* harmony export */   \"Emitter\": function() { return /* binding */ Emitter; },\n/* harmony export */   \"Event\": function() { return /* binding */ Event; },\n/* harmony export */   \"EventBufferer\": function() { return /* binding */ EventBufferer; },\n/* harmony export */   \"EventMultiplexer\": function() { return /* binding */ EventMultiplexer; },\n/* harmony export */   \"EventProfiling\": function() { return /* binding */ EventProfiling; },\n/* harmony export */   \"MicrotaskEmitter\": function() { return /* binding */ MicrotaskEmitter; },\n/* harmony export */   \"PauseableEmitter\": function() { return /* binding */ PauseableEmitter; },\n/* harmony export */   \"Relay\": function() { return /* binding */ Relay; },\n/* harmony export */   \"createEventDeliveryQueue\": function() { return /* binding */ createEventDeliveryQueue; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional.js */ \"./node_modules/monaco-editor/esm/vs/base/common/functional.js\");\n/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/* harmony import */ var _linkedList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./linkedList.js */ \"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\");\n/* harmony import */ var _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stopwatch.js */ \"./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\");\n\n\n\n\n\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableListenerGCedWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nvar Event;\n(function (Event) {\n  Event.None = () => _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n  function _addLeakageTraceLogic(options) {\n    if (_enableSnapshotPotentialLeakWarning) {\n      const {\n        onDidAddListener: origListenerDidAdd\n      } = options;\n      const stack = Stacktrace.create();\n      let count = 0;\n      options.onDidAddListener = () => {\n        if (++count === 2) {\n          console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n          stack.print();\n        }\n        origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\n      };\n    }\n  }\n  /**\n   * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n   * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n   * result of merging events and to try prevent race conditions that could arise when using related deferred and\n   * non-deferred events.\n   *\n   * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n   * (eg. latency of keypress to text rendered).\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function defer(event, disposable) {\n    return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n  }\n  Event.defer = defer;\n  /**\n   * Given an event, returns another event which only fires once.\n   *\n   * @param event The event source for the new event.\n   */\n  function once(event) {\n    return (listener, thisArgs = null, disposables) => {\n      // we need this, in case the event fires during the listener call\n      let didFire = false;\n      let result = undefined;\n      result = event(e => {\n        if (didFire) {\n          return;\n        } else if (result) {\n          result.dispose();\n        } else {\n          didFire = true;\n        }\n        return listener.call(thisArgs, e);\n      }, null, disposables);\n      if (didFire) {\n        result.dispose();\n      }\n      return result;\n    };\n  }\n  Event.once = once;\n  /**\n   * Maps an event of one type into an event of another type using a mapping function, similar to how\n   * `Array.prototype.map` works.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param map The mapping function.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function map(event, map, disposable) {\n    return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\n  }\n  Event.map = map;\n  /**\n   * Wraps an event in another event that performs some function on the event object before firing.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param each The function to perform on the event object.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function forEach(event, each, disposable) {\n    return snapshot((listener, thisArgs = null, disposables) => event(i => {\n      each(i);\n      listener.call(thisArgs, i);\n    }, null, disposables), disposable);\n  }\n  Event.forEach = forEach;\n  function filter(event, filter, disposable) {\n    return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\n  }\n  Event.filter = filter;\n  /**\n   * Given an event, returns the same event but typed as `Event<void>`.\n   */\n  function signal(event) {\n    return event;\n  }\n  Event.signal = signal;\n  function any(...events) {\n    return (listener, thisArgs = null, disposables) => {\n      const disposable = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.combinedDisposable)(...events.map(event => event(e => listener.call(thisArgs, e))));\n      return addAndReturnDisposable(disposable, disposables);\n    };\n  }\n  Event.any = any;\n  /**\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function reduce(event, merge, initial, disposable) {\n    let output = initial;\n    return map(event, e => {\n      output = merge(output, e);\n      return output;\n    }, disposable);\n  }\n  Event.reduce = reduce;\n  function snapshot(event, disposable) {\n    let listener;\n    const options = {\n      onWillAddFirstListener() {\n        listener = event(emitter.fire, emitter);\n      },\n      onDidRemoveLastListener() {\n        listener === null || listener === void 0 ? void 0 : listener.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n    return emitter.event;\n  }\n  /**\n   * Adds the IDisposable to the store if it's set, and returns it. Useful to\n   * Event function implementation.\n   */\n  function addAndReturnDisposable(d, store) {\n    if (store instanceof Array) {\n      store.push(d);\n    } else if (store) {\n      store.add(d);\n    }\n    return d;\n  }\n  function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {\n    let subscription;\n    let output = undefined;\n    let handle = undefined;\n    let numDebouncedCalls = 0;\n    let doFire;\n    const options = {\n      leakWarningThreshold,\n      onWillAddFirstListener() {\n        subscription = event(cur => {\n          numDebouncedCalls++;\n          output = merge(output, cur);\n          if (leading && !handle) {\n            emitter.fire(output);\n            output = undefined;\n          }\n          doFire = () => {\n            const _output = output;\n            output = undefined;\n            handle = undefined;\n            if (!leading || numDebouncedCalls > 1) {\n              emitter.fire(_output);\n            }\n            numDebouncedCalls = 0;\n          };\n          if (typeof delay === 'number') {\n            clearTimeout(handle);\n            handle = setTimeout(doFire, delay);\n          } else {\n            if (handle === undefined) {\n              handle = 0;\n              queueMicrotask(doFire);\n            }\n          }\n        });\n      },\n      onWillRemoveListener() {\n        if (flushOnListenerRemove && numDebouncedCalls > 0) {\n          doFire === null || doFire === void 0 ? void 0 : doFire();\n        }\n      },\n      onDidRemoveLastListener() {\n        doFire = undefined;\n        subscription.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n    return emitter.event;\n  }\n  Event.debounce = debounce;\n  /**\n   * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function accumulate(event, delay = 0, disposable) {\n    return Event.debounce(event, (last, e) => {\n      if (!last) {\n        return [e];\n      }\n      last.push(e);\n      return last;\n    }, delay, undefined, true, undefined, disposable);\n  }\n  Event.accumulate = accumulate;\n  /**\n   * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate\n   * event objects from different sources do not fire the same event object.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param equals The equality condition.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   *\n   * @example\n   * ```\n   * // Fire only one time when a single window is opened or focused\n   * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))\n   * ```\n   */\n  function latch(event, equals = (a, b) => a === b, disposable) {\n    let firstCall = true;\n    let cache;\n    return filter(event, value => {\n      const shouldEmit = firstCall || !equals(value, cache);\n      firstCall = false;\n      cache = value;\n      return shouldEmit;\n    }, disposable);\n  }\n  Event.latch = latch;\n  /**\n   * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @example\n   * ```\n   * const event = new EventEmitter<number | undefined>().event;\n   * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n   * ```\n   *\n   * @param event The event source for the new event.\n   * @param isT A function that determines what event is of the first type.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function split(event, isT, disposable) {\n    return [Event.filter(event, isT, disposable), Event.filter(event, e => !isT(e), disposable)];\n  }\n  Event.split = split;\n  /**\n   * Buffers an event until it has a listener attached.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a\n   * `setTimeout` when the first event listener is added.\n   * @param _buffer Internal: A source event array used for tests.\n   *\n   * @example\n   * ```\n   * // Start accumulating events, when the first listener is attached, flush\n   * // the event after a timeout such that multiple listeners attached before\n   * // the timeout would receive the event\n   * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);\n   * ```\n   */\n  function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {\n    let buffer = _buffer.slice();\n    let listener = event(e => {\n      if (buffer) {\n        buffer.push(e);\n      } else {\n        emitter.fire(e);\n      }\n    });\n    if (disposable) {\n      disposable.add(listener);\n    }\n    const flush = () => {\n      buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\n      buffer = null;\n    };\n    const emitter = new Emitter({\n      onWillAddFirstListener() {\n        if (!listener) {\n          listener = event(e => emitter.fire(e));\n          if (disposable) {\n            disposable.add(listener);\n          }\n        }\n      },\n      onDidAddFirstListener() {\n        if (buffer) {\n          if (flushAfterTimeout) {\n            setTimeout(flush);\n          } else {\n            flush();\n          }\n        }\n      },\n      onDidRemoveLastListener() {\n        if (listener) {\n          listener.dispose();\n        }\n        listener = null;\n      }\n    });\n    if (disposable) {\n      disposable.add(emitter);\n    }\n    return emitter.event;\n  }\n  Event.buffer = buffer;\n  /**\n   * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.\n   *\n   * @example\n   * ```\n   * // Normal\n   * const onEnterPressNormal = Event.filter(\n   *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),\n   *   e.keyCode === KeyCode.Enter\n   * ).event;\n   *\n   * // Using chain\n   * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $\n   *   .map(e => new StandardKeyboardEvent(e))\n   *   .filter(e => e.keyCode === KeyCode.Enter)\n   * );\n   * ```\n   */\n  function chain(event, sythensize) {\n    const fn = (listener, thisArgs, disposables) => {\n      const cs = sythensize(new ChainableSynthesis());\n      return event(function (value) {\n        const result = cs.evaluate(value);\n        if (result !== HaltChainable) {\n          listener.call(thisArgs, result);\n        }\n      }, undefined, disposables);\n    };\n    return fn;\n  }\n  Event.chain = chain;\n  const HaltChainable = Symbol('HaltChainable');\n  class ChainableSynthesis {\n    constructor() {\n      this.steps = [];\n    }\n    map(fn) {\n      this.steps.push(fn);\n      return this;\n    }\n    forEach(fn) {\n      this.steps.push(v => {\n        fn(v);\n        return v;\n      });\n      return this;\n    }\n    filter(fn) {\n      this.steps.push(v => fn(v) ? v : HaltChainable);\n      return this;\n    }\n    reduce(merge, initial) {\n      let last = initial;\n      this.steps.push(v => {\n        last = merge(last, v);\n        return last;\n      });\n      return this;\n    }\n    latch(equals = (a, b) => a === b) {\n      let firstCall = true;\n      let cache;\n      this.steps.push(value => {\n        const shouldEmit = firstCall || !equals(value, cache);\n        firstCall = false;\n        cache = value;\n        return shouldEmit ? value : HaltChainable;\n      });\n      return this;\n    }\n    evaluate(value) {\n      for (const step of this.steps) {\n        value = step(value);\n        if (value === HaltChainable) {\n          break;\n        }\n      }\n      return value;\n    }\n  }\n  /**\n   * Creates an {@link Event} from a node event emitter.\n   */\n  function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n    const fn = (...args) => result.fire(map(...args));\n    const onFirstListenerAdd = () => emitter.on(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromNodeEventEmitter = fromNodeEventEmitter;\n  /**\n   * Creates an {@link Event} from a DOM event emitter.\n   */\n  function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n    const fn = (...args) => result.fire(map(...args));\n    const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromDOMEventEmitter = fromDOMEventEmitter;\n  /**\n   * Creates a promise out of an event, using the {@link Event.once} helper.\n   */\n  function toPromise(event) {\n    return new Promise(resolve => once(event)(resolve));\n  }\n  Event.toPromise = toPromise;\n  /**\n   * Creates an event out of a promise that fires once when the promise is\n   * resolved with the result of the promise or `undefined`.\n   */\n  function fromPromise(promise) {\n    const result = new Emitter();\n    promise.then(res => {\n      result.fire(res);\n    }, () => {\n      result.fire(undefined);\n    }).finally(() => {\n      result.dispose();\n    });\n    return result.event;\n  }\n  Event.fromPromise = fromPromise;\n  function runAndSubscribe(event, handler, initial) {\n    handler(initial);\n    return event(e => handler(e));\n  }\n  Event.runAndSubscribe = runAndSubscribe;\n  class EmitterObserver {\n    constructor(_observable, store) {\n      this._observable = _observable;\n      this._counter = 0;\n      this._hasChanged = false;\n      const options = {\n        onWillAddFirstListener: () => {\n          _observable.addObserver(this);\n        },\n        onDidRemoveLastListener: () => {\n          _observable.removeObserver(this);\n        }\n      };\n      if (!store) {\n        _addLeakageTraceLogic(options);\n      }\n      this.emitter = new Emitter(options);\n      if (store) {\n        store.add(this.emitter);\n      }\n    }\n    beginUpdate(_observable) {\n      // assert(_observable === this.obs);\n      this._counter++;\n    }\n    handlePossibleChange(_observable) {\n      // assert(_observable === this.obs);\n    }\n    handleChange(_observable, _change) {\n      // assert(_observable === this.obs);\n      this._hasChanged = true;\n    }\n    endUpdate(_observable) {\n      // assert(_observable === this.obs);\n      this._counter--;\n      if (this._counter === 0) {\n        this._observable.reportChanges();\n        if (this._hasChanged) {\n          this._hasChanged = false;\n          this.emitter.fire(this._observable.get());\n        }\n      }\n    }\n  }\n  /**\n   * Creates an event emitter that is fired when the observable changes.\n   * Each listeners subscribes to the emitter.\n   */\n  function fromObservable(obs, store) {\n    const observer = new EmitterObserver(obs, store);\n    return observer.emitter.event;\n  }\n  Event.fromObservable = fromObservable;\n  /**\n   * Each listener is attached to the observable directly.\n   */\n  function fromObservableLight(observable) {\n    return (listener, thisArgs, disposables) => {\n      let count = 0;\n      let didChange = false;\n      const observer = {\n        beginUpdate() {\n          count++;\n        },\n        endUpdate() {\n          count--;\n          if (count === 0) {\n            observable.reportChanges();\n            if (didChange) {\n              didChange = false;\n              listener.call(thisArgs);\n            }\n          }\n        },\n        handlePossibleChange() {\n          // noop\n        },\n        handleChange() {\n          didChange = true;\n        }\n      };\n      observable.addObserver(observer);\n      observable.reportChanges();\n      const disposable = {\n        dispose() {\n          observable.removeObserver(observer);\n        }\n      };\n      if (disposables instanceof _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore) {\n        disposables.add(disposable);\n      } else if (Array.isArray(disposables)) {\n        disposables.push(disposable);\n      }\n      return disposable;\n    };\n  }\n  Event.fromObservableLight = fromObservableLight;\n})(Event || (Event = {}));\nclass EventProfiling {\n  constructor(name) {\n    this.listenerCount = 0;\n    this.invocationCount = 0;\n    this.elapsedOverall = 0;\n    this.durations = [];\n    this.name = `${name}_${EventProfiling._idPool++}`;\n    EventProfiling.all.add(this);\n  }\n  start(listenerCount) {\n    this._stopWatch = new _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__.StopWatch();\n    this.listenerCount = listenerCount;\n  }\n  stop() {\n    if (this._stopWatch) {\n      const elapsed = this._stopWatch.elapsed();\n      this.durations.push(elapsed);\n      this.elapsedOverall += elapsed;\n      this.invocationCount += 1;\n      this._stopWatch = undefined;\n    }\n  }\n}\nEventProfiling.all = new Set();\nEventProfiling._idPool = 0;\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n  constructor(threshold, name = Math.random().toString(18).slice(2, 5)) {\n    this.threshold = threshold;\n    this.name = name;\n    this._warnCountdown = 0;\n  }\n  dispose() {\n    var _a;\n    (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();\n  }\n  check(stack, listenerCount) {\n    const threshold = this.threshold;\n    if (threshold <= 0 || listenerCount < threshold) {\n      return undefined;\n    }\n    if (!this._stacks) {\n      this._stacks = new Map();\n    }\n    const count = this._stacks.get(stack.value) || 0;\n    this._stacks.set(stack.value, count + 1);\n    this._warnCountdown -= 1;\n    if (this._warnCountdown <= 0) {\n      // only warn on first exceed and then every time the limit\n      // is exceeded by 50% again\n      this._warnCountdown = threshold * 0.5;\n      // find most frequent listener and print warning\n      let topStack;\n      let topCount = 0;\n      for (const [stack, count] of this._stacks) {\n        if (!topStack || topCount < count) {\n          topStack = stack;\n          topCount = count;\n        }\n      }\n      console.warn(`[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`);\n      console.warn(topStack);\n    }\n    return () => {\n      const count = this._stacks.get(stack.value) || 0;\n      this._stacks.set(stack.value, count - 1);\n    };\n  }\n}\nclass Stacktrace {\n  static create() {\n    var _a;\n    return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');\n  }\n  constructor(value) {\n    this.value = value;\n  }\n  print() {\n    console.warn(this.value.split('\\n').slice(2).join('\\n'));\n  }\n}\nclass UniqueContainer {\n  constructor(value) {\n    this.value = value;\n  }\n}\nconst compactionThreshold = 2;\nconst forEachListener = (listeners, fn) => {\n  if (listeners instanceof UniqueContainer) {\n    fn(listeners);\n  } else {\n    for (let i = 0; i < listeners.length; i++) {\n      const l = listeners[i];\n      if (l) {\n        fn(l);\n      }\n    }\n  }\n};\nconst _listenerFinalizers = _enableListenerGCedWarning ? new FinalizationRegistry(heldValue => {\n  if (typeof heldValue === 'string') {\n    console.warn('[LEAKING LISTENER] GC\\'ed a listener that was NOT yet disposed. This is where is was created:');\n    console.warn(heldValue);\n  }\n}) : undefined;\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nclass Emitter {\n  constructor(options) {\n    var _a, _b, _c, _d, _e;\n    this._size = 0;\n    this._options = options;\n    this._leakageMon = _globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold) ? new LeakageMonitor((_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.leakWarningThreshold) !== null && _c !== void 0 ? _c : _globalLeakWarningThreshold) : undefined;\n    this._perfMon = ((_d = this._options) === null || _d === void 0 ? void 0 : _d._profName) ? new EventProfiling(this._options._profName) : undefined;\n    this._deliveryQueue = (_e = this._options) === null || _e === void 0 ? void 0 : _e.deliveryQueue;\n  }\n  dispose() {\n    var _a, _b, _c, _d;\n    if (!this._disposed) {\n      this._disposed = true;\n      // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n      // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n      // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n      // the following programming pattern is very popular:\n      //\n      // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n      // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n      // ...later...\n      // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n      if (((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) === this) {\n        this._deliveryQueue.reset();\n      }\n      if (this._listeners) {\n        if (_enableDisposeWithListenerWarning) {\n          const listeners = this._listeners;\n          queueMicrotask(() => {\n            forEachListener(listeners, l => {\n              var _a;\n              return (_a = l.stack) === null || _a === void 0 ? void 0 : _a.print();\n            });\n          });\n        }\n        this._listeners = undefined;\n        this._size = 0;\n      }\n      (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);\n      (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  }\n  /**\n   * For the public to allow to subscribe\n   * to events from this Emitter\n   */\n  get event() {\n    var _a;\n    (_a = this._event) !== null && _a !== void 0 ? _a : this._event = (callback, thisArgs, disposables) => {\n      var _a, _b, _c, _d, _e;\n      if (this._leakageMon && this._size > this._leakageMon.threshold * 3) {\n        console.warn(`[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far`);\n        return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n      }\n      if (this._disposed) {\n        // todo: should we warn if a listener is added to a disposed emitter? This happens often\n        return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n      }\n      if (thisArgs) {\n        callback = callback.bind(thisArgs);\n      }\n      const contained = new UniqueContainer(callback);\n      let removeMonitor;\n      let stack;\n      if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n        // check and record this emitter for potential leakage\n        contained.stack = Stacktrace.create();\n        removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);\n      }\n      if (_enableDisposeWithListenerWarning) {\n        contained.stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\n      }\n      if (!this._listeners) {\n        (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillAddFirstListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n        this._listeners = contained;\n        (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidAddFirstListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n      } else if (this._listeners instanceof UniqueContainer) {\n        (_e = this._deliveryQueue) !== null && _e !== void 0 ? _e : this._deliveryQueue = new EventDeliveryQueuePrivate();\n        this._listeners = [this._listeners, contained];\n      } else {\n        this._listeners.push(contained);\n      }\n      this._size++;\n      const result = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {\n        _listenerFinalizers === null || _listenerFinalizers === void 0 ? void 0 : _listenerFinalizers.unregister(result);\n        removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\n        this._removeListener(contained);\n      });\n      if (disposables instanceof _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore) {\n        disposables.add(result);\n      } else if (Array.isArray(disposables)) {\n        disposables.push(result);\n      }\n      if (_listenerFinalizers) {\n        const stack = new Error().stack.split('\\n').slice(2).join('\\n').trim();\n        _listenerFinalizers.register(result, stack, result);\n      }\n      return result;\n    };\n    return this._event;\n  }\n  _removeListener(listener) {\n    var _a, _b, _c, _d;\n    (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n    if (!this._listeners) {\n      return; // expected if a listener gets disposed\n    }\n    if (this._size === 1) {\n      this._listeners = undefined;\n      (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidRemoveLastListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n      this._size = 0;\n      return;\n    }\n    // size > 1 which requires that listeners be a list:\n    const listeners = this._listeners;\n    const index = listeners.indexOf(listener);\n    if (index === -1) {\n      console.log('disposed?', this._disposed);\n      console.log('size?', this._size);\n      console.log('arr?', JSON.stringify(this._listeners));\n      throw new Error('Attempted to dispose unknown listener');\n    }\n    this._size--;\n    listeners[index] = undefined;\n    const adjustDeliveryQueue = this._deliveryQueue.current === this;\n    if (this._size * compactionThreshold <= listeners.length) {\n      let n = 0;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listeners[i]) {\n          listeners[n++] = listeners[i];\n        } else if (adjustDeliveryQueue) {\n          this._deliveryQueue.end--;\n          if (n < this._deliveryQueue.i) {\n            this._deliveryQueue.i--;\n          }\n        }\n      }\n      listeners.length = n;\n    }\n  }\n  _deliver(listener, value) {\n    var _a;\n    if (!listener) {\n      return;\n    }\n    const errorHandler = ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onListenerError) || _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError;\n    if (!errorHandler) {\n      listener.value(value);\n      return;\n    }\n    try {\n      listener.value(value);\n    } catch (e) {\n      errorHandler(e);\n    }\n  }\n  /** Delivers items in the queue. Assumes the queue is ready to go. */\n  _deliverQueue(dq) {\n    const listeners = dq.current._listeners;\n    while (dq.i < dq.end) {\n      // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()\n      this._deliver(listeners[dq.i++], dq.value);\n    }\n    dq.reset();\n  }\n  /**\n   * To be kept private to fire an event to\n   * subscribers\n   */\n  fire(event) {\n    var _a, _b, _c, _d;\n    if ((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) {\n      this._deliverQueue(this._deliveryQueue);\n      (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch\n    }\n    (_c = this._perfMon) === null || _c === void 0 ? void 0 : _c.start(this._size);\n    if (!this._listeners) {\n      // no-op\n    } else if (this._listeners instanceof UniqueContainer) {\n      this._deliver(this._listeners, event);\n    } else {\n      const dq = this._deliveryQueue;\n      dq.enqueue(this, event, this._listeners.length);\n      this._deliverQueue(dq);\n    }\n    (_d = this._perfMon) === null || _d === void 0 ? void 0 : _d.stop();\n  }\n  hasListeners() {\n    return this._size > 0;\n  }\n}\nconst createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();\nclass EventDeliveryQueuePrivate {\n  constructor() {\n    /**\n     * Index in current's listener list.\n     */\n    this.i = -1;\n    /**\n     * The last index in the listener's list to deliver.\n     */\n    this.end = 0;\n  }\n  enqueue(emitter, value, end) {\n    this.i = 0;\n    this.end = end;\n    this.current = emitter;\n    this.value = value;\n  }\n  reset() {\n    this.i = this.end; // force any current emission loop to stop, mainly for during dispose\n    this.current = undefined;\n    this.value = undefined;\n  }\n}\nclass PauseableEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._isPaused = 0;\n    this._eventQueue = new _linkedList_js__WEBPACK_IMPORTED_MODULE_3__.LinkedList();\n    this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n  }\n  pause() {\n    this._isPaused++;\n  }\n  resume() {\n    if (this._isPaused !== 0 && --this._isPaused === 0) {\n      if (this._mergeFn) {\n        // use the merge function to create a single composite\n        // event. make a copy in case firing pauses this emitter\n        if (this._eventQueue.size > 0) {\n          const events = Array.from(this._eventQueue);\n          this._eventQueue.clear();\n          super.fire(this._mergeFn(events));\n        }\n      } else {\n        // no merging, fire each event individually and test\n        // that this emitter isn't paused halfway through\n        while (!this._isPaused && this._eventQueue.size !== 0) {\n          super.fire(this._eventQueue.shift());\n        }\n      }\n    }\n  }\n  fire(event) {\n    if (this._size) {\n      if (this._isPaused !== 0) {\n        this._eventQueue.push(event);\n      } else {\n        super.fire(event);\n      }\n    }\n  }\n}\nclass DebounceEmitter extends PauseableEmitter {\n  constructor(options) {\n    var _a;\n    super(options);\n    this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\n  }\n  fire(event) {\n    if (!this._handle) {\n      this.pause();\n      this._handle = setTimeout(() => {\n        this._handle = undefined;\n        this.resume();\n      }, this._delay);\n    }\n    super.fire(event);\n  }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nclass MicrotaskEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._queuedEvents = [];\n    this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n  }\n  fire(event) {\n    if (!this.hasListeners()) {\n      return;\n    }\n    this._queuedEvents.push(event);\n    if (this._queuedEvents.length === 1) {\n      queueMicrotask(() => {\n        if (this._mergeFn) {\n          super.fire(this._mergeFn(this._queuedEvents));\n        } else {\n          this._queuedEvents.forEach(e => super.fire(e));\n        }\n        this._queuedEvents = [];\n      });\n    }\n  }\n}\n/**\n * An event emitter that multiplexes many events into a single event.\n *\n * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s\n * to the multiplexer as needed.\n *\n * ```typescript\n * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();\n *\n * const thingListeners = DisposableMap<Thing, IDisposable>();\n *\n * thingService.onDidAddThing(thing => {\n *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);\n * });\n * thingService.onDidRemoveThing(thing => {\n *   thingListeners.deleteAndDispose(thing);\n * });\n *\n * anythingDataMultiplexer.event(e => {\n *   console.log('Something fired data ' + e.data)\n * });\n * ```\n */\nclass EventMultiplexer {\n  constructor() {\n    this.hasListeners = false;\n    this.events = [];\n    this.emitter = new Emitter({\n      onWillAddFirstListener: () => this.onFirstListenerAdd(),\n      onDidRemoveLastListener: () => this.onLastListenerRemove()\n    });\n  }\n  get event() {\n    return this.emitter.event;\n  }\n  add(event) {\n    const e = {\n      event: event,\n      listener: null\n    };\n    this.events.push(e);\n    if (this.hasListeners) {\n      this.hook(e);\n    }\n    const dispose = () => {\n      if (this.hasListeners) {\n        this.unhook(e);\n      }\n      const idx = this.events.indexOf(e);\n      this.events.splice(idx, 1);\n    };\n    return (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)((0,_functional_js__WEBPACK_IMPORTED_MODULE_1__.createSingleCallFunction)(dispose));\n  }\n  onFirstListenerAdd() {\n    this.hasListeners = true;\n    this.events.forEach(e => this.hook(e));\n  }\n  onLastListenerRemove() {\n    this.hasListeners = false;\n    this.events.forEach(e => this.unhook(e));\n  }\n  hook(e) {\n    e.listener = e.event(r => this.emitter.fire(r));\n  }\n  unhook(e) {\n    var _a;\n    (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n    e.listener = null;\n  }\n  dispose() {\n    var _a;\n    this.emitter.dispose();\n    for (const e of this.events) {\n      (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    this.events = [];\n  }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nclass EventBufferer {\n  constructor() {\n    this.buffers = [];\n  }\n  wrapEvent(event) {\n    return (listener, thisArgs, disposables) => {\n      return event(i => {\n        const buffer = this.buffers[this.buffers.length - 1];\n        if (buffer) {\n          buffer.push(() => listener.call(thisArgs, i));\n        } else {\n          listener.call(thisArgs, i);\n        }\n      }, undefined, disposables);\n    };\n  }\n  bufferEvents(fn) {\n    const buffer = [];\n    this.buffers.push(buffer);\n    const r = fn();\n    this.buffers.pop();\n    buffer.forEach(flush => flush());\n    return r;\n  }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nclass Relay {\n  constructor() {\n    this.listening = false;\n    this.inputEvent = Event.None;\n    this.inputEventListener = _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n    this.emitter = new Emitter({\n      onDidAddFirstListener: () => {\n        this.listening = true;\n        this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n      },\n      onDidRemoveLastListener: () => {\n        this.listening = false;\n        this.inputEventListener.dispose();\n      }\n    });\n    this.event = this.emitter.event;\n  }\n  set input(event) {\n    this.inputEvent = event;\n    if (this.listening) {\n      this.inputEventListener.dispose();\n      this.inputEventListener = event(this.emitter.fire, this.emitter);\n    }\n  }\n  dispose() {\n    this.inputEventListener.dispose();\n    this.emitter.dispose();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZXZlbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ1c7QUFDb0M7QUFDbEQ7QUFDRjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxNQUFNUSwwQkFBMEIsR0FBRyxLQUFLO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGlDQUFpQyxHQUFHLEtBQUs7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxtQ0FBbUMsR0FBRyxLQUFLO0FBQzFDLElBQUlDLEtBQUs7QUFDaEIsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7RUFDZEEsS0FBSyxDQUFDQyxJQUFJLEdBQUcsTUFBTVQsMERBQWU7RUFDbEMsU0FBU1UscUJBQXFCQSxDQUFDQyxPQUFPLEVBQUU7SUFDcEMsSUFBSUosbUNBQW1DLEVBQUU7TUFDckMsTUFBTTtRQUFFSyxnQkFBZ0IsRUFBRUM7TUFBbUIsQ0FBQyxHQUFHRixPQUFPO01BQ3hELE1BQU1HLEtBQUssR0FBR0MsVUFBVSxDQUFDQyxNQUFNLENBQUMsQ0FBQztNQUNqQyxJQUFJQyxLQUFLLEdBQUcsQ0FBQztNQUNiTixPQUFPLENBQUNDLGdCQUFnQixHQUFHLE1BQU07UUFDN0IsSUFBSSxFQUFFSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1VBQ2ZDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLDRHQUE0RyxDQUFDO1VBQzFITCxLQUFLLENBQUNNLEtBQUssQ0FBQyxDQUFDO1FBQ2pCO1FBQ0FQLGtCQUFrQixLQUFLLElBQUksSUFBSUEsa0JBQWtCLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLGtCQUFrQixDQUFDLENBQUM7TUFDaEcsQ0FBQztJQUNMO0VBQ0o7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJLFNBQVNRLEtB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Q0o7RUFDQWpCLE9BQU9BLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQzROLGtCQUFrQixDQUFDNU4sT0FBTyxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDaUIsT0FBTyxDQUFDakIsT0FBTyxDQUFDLENBQUM7RUFDMUI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZXZlbnQuanM/MmNiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvblVuZXhwZWN0ZWRFcnJvciB9IGZyb20gJy4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGNyZWF0ZVNpbmdsZUNhbGxGdW5jdGlvbiB9IGZyb20gJy4vZnVuY3Rpb25hbC5qcyc7XG5pbXBvcnQgeyBjb21iaW5lZERpc3Bvc2FibGUsIERpc3Bvc2FibGUsIERpc3Bvc2FibGVTdG9yZSwgdG9EaXNwb3NhYmxlIH0gZnJvbSAnLi9saWZlY3ljbGUuanMnO1xuaW1wb3J0IHsgTGlua2VkTGlzdCB9IGZyb20gJy4vbGlua2VkTGlzdC5qcyc7XG5pbXBvcnQgeyBTdG9wV2F0Y2ggfSBmcm9tICcuL3N0b3B3YXRjaC5qcyc7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVW5jb21tZW50IHRoZSBuZXh0IGxpbmUgdG8gcHJpbnQgd2FybmluZ3Mgd2hlbmV2ZXIgYSBsaXN0ZW5lciBpcyBHQydlZCB3aXRob3V0IGhhdmluZyBiZWVuIGRpc3Bvc2VkLiBUaGlzIGlzIGEgTEVBSy5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCBfZW5hYmxlTGlzdGVuZXJHQ2VkV2FybmluZyA9IGZhbHNlO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFVuY29tbWVudCB0aGUgbmV4dCBsaW5lIHRvIHByaW50IHdhcm5pbmdzIHdoZW5ldmVyIGFuIGVtaXR0ZXIgd2l0aCBsaXN0ZW5lcnMgaXMgZGlzcG9zZWQuIFRoYXQgaXMgYSBzaWduIG9mIGNvZGUgc21lbGwuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY29uc3QgX2VuYWJsZURpc3Bvc2VXaXRoTGlzdGVuZXJXYXJuaW5nID0gZmFsc2U7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVW5jb21tZW50IHRoZSBuZXh0IGxpbmUgdG8gcHJpbnQgd2FybmluZ3Mgd2hlbmV2ZXIgYSBzbmFwc2hvdHRlZCBldmVudCBpcyB1c2VkIHJlcGVhdGVkbHkgd2l0aG91dCBjbGVhbnVwLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdnNjb2RlL2lzc3Vlcy8xNDI4NTFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCBfZW5hYmxlU25hcHNob3RQb3RlbnRpYWxMZWFrV2FybmluZyA9IGZhbHNlO1xuZXhwb3J0IHZhciBFdmVudDtcbihmdW5jdGlvbiAoRXZlbnQpIHtcbiAgICBFdmVudC5Ob25lID0gKCkgPT4gRGlzcG9zYWJsZS5Ob25lO1xuICAgIGZ1bmN0aW9uIF9hZGRMZWFrYWdlVHJhY2VMb2dpYyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChfZW5hYmxlU25hcHNob3RQb3RlbnRpYWxMZWFrV2FybmluZykge1xuICAgICAgICAgICAgY29uc3QgeyBvbkRpZEFkZExpc3RlbmVyOiBvcmlnTGlzdGVuZXJEaWRBZGQgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IFN0YWNrdHJhY2UuY3JlYXRlKCk7XG4gICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgb3B0aW9ucy5vbkRpZEFkZExpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgrK2NvdW50ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc25hcHNob3R0ZWQgZW1pdHRlciBMSUtFTFkgdXNlZCBwdWJsaWMgYW5kIFNIT1VMRCBIQVZFIEJFRU4gY3JlYXRlZCB3aXRoIERpc3Bvc2FibGVTdG9yZS4gc25hcHNob3R0ZWQgaGVyZScpO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wcmludCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcmlnTGlzdGVuZXJEaWRBZGQgPT09IG51bGwgfHwgb3JpZ0xpc3RlbmVyRGlkQWRkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnTGlzdGVuZXJEaWRBZGQoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gZXZlbnQsIHJldHVybnMgYW5vdGhlciBldmVudCB3aGljaCBkZWJvdW5jZXMgY2FsbHMgYW5kIGRlZmVycyB0aGUgbGlzdGVuZXJzIHRvIGEgbGF0ZXIgdGFzayB2aWEgYSBzaGFyZWRcbiAgICAgKiBgc2V0VGltZW91dGAuIFRoZSBldmVudCBpcyBjb252ZXJ0ZWQgaW50byBhIHNpZ25hbCAoYEV2ZW50PHZvaWQ+YCkgdG8gYXZvaWQgYWRkaXRpb25hbCBvYmplY3QgY3JlYXRpb24gYXMgYVxuICAgICAqIHJlc3VsdCBvZiBtZXJnaW5nIGV2ZW50cyBhbmQgdG8gdHJ5IHByZXZlbnQgcmFjZSBjb25kaXRpb25zIHRoYXQgY291bGQgYXJpc2Ugd2hlbiB1c2luZyByZWxhdGVkIGRlZmVycmVkIGFuZFxuICAgICAqIG5vbi1kZWZlcnJlZCBldmVudHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3IgZGVmZXJyaW5nIG5vbi1jcml0aWNhbCB3b3JrIChlZy4gZ2VuZXJhbCBVSSB1cGRhdGVzKSB0byBlbnN1cmUgaXQgZG9lcyBub3QgYmxvY2sgY3JpdGljYWwgd29ya1xuICAgICAqIChlZy4gbGF0ZW5jeSBvZiBrZXlwcmVzcyB0byB0ZXh0IHJlbmRlcmVkKS5cbiAgICAgKlxuICAgICAqICpOT1RFKiB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBgRXZlbnRgIGFuZCBpdCBNVVNUIGJlIGNhbGxlZCB3aXRoIGEgYERpc3Bvc2FibGVTdG9yZWAgd2hlbmV2ZXIgdGhlIHJldHVybmVkXG4gICAgICogZXZlbnQgaXMgYWNjZXNzaWJsZSB0byBcInRoaXJkIHBhcnRpZXNcIiwgZS5nIHRoZSBldmVudCBpcyBhIHB1YmxpYyBwcm9wZXJ0eS4gT3RoZXJ3aXNlIGEgbGVha2VkIGxpc3RlbmVyIG9uIHRoZVxuICAgICAqIHJldHVybmVkIGV2ZW50IGNhdXNlcyB0aGlzIHV0aWxpdHkgdG8gbGVhayBhIGxpc3RlbmVyIG9uIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgc291cmNlIGZvciB0aGUgbmV3IGV2ZW50LlxuICAgICAqIEBwYXJhbSBkaXNwb3NhYmxlIEEgZGlzcG9zYWJsZSBzdG9yZSB0byBhZGQgdGhlIG5ldyBFdmVudEVtaXR0ZXIgdG8uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmZXIoZXZlbnQsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgcmV0dXJuIGRlYm91bmNlKGV2ZW50LCAoKSA9PiB2b2lkIDAsIDAsIHVuZGVmaW5lZCwgdHJ1ZSwgdW5kZWZpbmVkLCBkaXNwb3NhYmxlKTtcbiAgICB9XG4gICAgRXZlbnQuZGVmZXIgPSBkZWZlcjtcbiAgICAvKipcbiAgICAgKiBHaXZlbiBhbiBldmVudCwgcmV0dXJucyBhbm90aGVyIGV2ZW50IHdoaWNoIG9ubHkgZmlyZXMgb25jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgc291cmNlIGZvciB0aGUgbmV3IGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIChsaXN0ZW5lciwgdGhpc0FyZ3MgPSBudWxsLCBkaXNwb3NhYmxlcykgPT4ge1xuICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzLCBpbiBjYXNlIHRoZSBldmVudCBmaXJlcyBkdXJpbmcgdGhlIGxpc3RlbmVyIGNhbGxcbiAgICAgICAgICAgIGxldCBkaWRGaXJlID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdWx0ID0gZXZlbnQoZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRpZEZpcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZEZpcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIuY2FsbCh0aGlzQXJncywgZSk7XG4gICAgICAgICAgICB9LCBudWxsLCBkaXNwb3NhYmxlcyk7XG4gICAgICAgICAgICBpZiAoZGlkRmlyZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBFdmVudC5vbmNlID0gb25jZTtcbiAgICAvKipcbiAgICAgKiBNYXBzIGFuIGV2ZW50IG9mIG9uZSB0eXBlIGludG8gYW4gZXZlbnQgb2YgYW5vdGhlciB0eXBlIHVzaW5nIGEgbWFwcGluZyBmdW5jdGlvbiwgc2ltaWxhciB0byBob3dcbiAgICAgKiBgQXJyYXkucHJvdG90eXBlLm1hcGAgd29ya3MuXG4gICAgICpcbiAgICAgKiAqTk9URSogdGhhdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gYEV2ZW50YCBhbmQgaXQgTVVTVCBiZSBjYWxsZWQgd2l0aCBhIGBEaXNwb3NhYmxlU3RvcmVgIHdoZW5ldmVyIHRoZSByZXR1cm5lZFxuICAgICAqIGV2ZW50IGlzIGFjY2Vzc2libGUgdG8gXCJ0aGlyZCBwYXJ0aWVzXCIsIGUuZyB0aGUgZXZlbnQgaXMgYSBwdWJsaWMgcHJvcGVydHkuIE90aGVyd2lzZSBhIGxlYWtlZCBsaXN0ZW5lciBvbiB0aGVcbiAgICAgKiByZXR1cm5lZCBldmVudCBjYXVzZXMgdGhpcyB1dGlsaXR5IHRvIGxlYWsgYSBsaXN0ZW5lciBvbiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBmb3IgdGhlIG5ldyBldmVudC5cbiAgICAgKiBAcGFyYW0gbWFwIFRoZSBtYXBwaW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBkaXNwb3NhYmxlIEEgZGlzcG9zYWJsZSBzdG9yZSB0byBhZGQgdGhlIG5ldyBFdmVudEVtaXR0ZXIgdG8uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGV2ZW50LCBtYXAsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgcmV0dXJuIHNuYXBzaG90KChsaXN0ZW5lciwgdGhpc0FyZ3MgPSBudWxsLCBkaXNwb3NhYmxlcykgPT4gZXZlbnQoaSA9PiBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBtYXAoaSkpLCBudWxsLCBkaXNwb3NhYmxlcyksIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBFdmVudC5tYXAgPSBtYXA7XG4gICAgLyoqXG4gICAgICogV3JhcHMgYW4gZXZlbnQgaW4gYW5vdGhlciBldmVudCB0aGF0IHBlcmZvcm1zIHNvbWUgZnVuY3Rpb24gb24gdGhlIGV2ZW50IG9iamVjdCBiZWZvcmUgZmlyaW5nLlxuICAgICAqXG4gICAgICogKk5PVEUqIHRoYXQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGBFdmVudGAgYW5kIGl0IE1VU1QgYmUgY2FsbGVkIHdpdGggYSBgRGlzcG9zYWJsZVN0b3JlYCB3aGVuZXZlciB0aGUgcmV0dXJuZWRcbiAgICAgKiBldmVudCBpcyBhY2Nlc3NpYmxlIHRvIFwidGhpcmQgcGFydGllc1wiLCBlLmcgdGhlIGV2ZW50IGlzIGEgcHVibGljIHByb3BlcnR5LiBPdGhlcndpc2UgYSBsZWFrZWQgbGlzdGVuZXIgb24gdGhlXG4gICAgICogcmV0dXJuZWQgZXZlbnQgY2F1c2VzIHRoaXMgdXRpbGl0eSB0byBsZWFrIGEgbGlzdGVuZXIgb24gdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBzb3VyY2UgZm9yIHRoZSBuZXcgZXZlbnQuXG4gICAgICogQHBhcmFtIGVhY2ggVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gb24gdGhlIGV2ZW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0gZGlzcG9zYWJsZSBBIGRpc3Bvc2FibGUgc3RvcmUgdG8gYWRkIHRoZSBuZXcgRXZlbnRFbWl0dGVyIHRvLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goZXZlbnQsIGVhY2gsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgcmV0dXJuIHNuYXBzaG90KChsaXN0ZW5lciwgdGhpc0FyZ3MgPSBudWxsLCBkaXNwb3NhYmxlcykgPT4gZXZlbnQoaSA9PiB7IGVhY2goaSk7IGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIGkpOyB9LCBudWxsLCBkaXNwb3NhYmxlcyksIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBFdmVudC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBmdW5jdGlvbiBmaWx0ZXIoZXZlbnQsIGZpbHRlciwgZGlzcG9zYWJsZSkge1xuICAgICAgICByZXR1cm4gc25hcHNob3QoKGxpc3RlbmVyLCB0aGlzQXJncyA9IG51bGwsIGRpc3Bvc2FibGVzKSA9PiBldmVudChlID0+IGZpbHRlcihlKSAmJiBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBlKSwgbnVsbCwgZGlzcG9zYWJsZXMpLCBkaXNwb3NhYmxlKTtcbiAgICB9XG4gICAgRXZlbnQuZmlsdGVyID0gZmlsdGVyO1xuICAgIC8qKlxuICAgICAqIEdpdmVuIGFuIGV2ZW50LCByZXR1cm5zIHRoZSBzYW1lIGV2ZW50IGJ1dCB0eXBlZCBhcyBgRXZlbnQ8dm9pZD5gLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpZ25hbChldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIEV2ZW50LnNpZ25hbCA9IHNpZ25hbDtcbiAgICBmdW5jdGlvbiBhbnkoLi4uZXZlbnRzKSB7XG4gICAgICAgIHJldHVybiAobGlzdGVuZXIsIHRoaXNBcmdzID0gbnVsbCwgZGlzcG9zYWJsZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2FibGUgPSBjb21iaW5lZERpc3Bvc2FibGUoLi4uZXZlbnRzLm1hcChldmVudCA9PiBldmVudChlID0+IGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIGUpKSkpO1xuICAgICAgICAgICAgcmV0dXJuIGFkZEFuZFJldHVybkRpc3Bvc2FibGUoZGlzcG9zYWJsZSwgZGlzcG9zYWJsZXMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBFdmVudC5hbnkgPSBhbnk7XG4gICAgLyoqXG4gICAgICogKk5PVEUqIHRoYXQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGBFdmVudGAgYW5kIGl0IE1VU1QgYmUgY2FsbGVkIHdpdGggYSBgRGlzcG9zYWJsZVN0b3JlYCB3aGVuZXZlciB0aGUgcmV0dXJuZWRcbiAgICAgKiBldmVudCBpcyBhY2Nlc3NpYmxlIHRvIFwidGhpcmQgcGFydGllc1wiLCBlLmcgdGhlIGV2ZW50IGlzIGEgcHVibGljIHByb3BlcnR5LiBPdGhlcndpc2UgYSBsZWFrZWQgbGlzdGVuZXIgb24gdGhlXG4gICAgICogcmV0dXJuZWQgZXZlbnQgY2F1c2VzIHRoaXMgdXRpbGl0eSB0byBsZWFrIGEgbGlzdGVuZXIgb24gdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShldmVudCwgbWVyZ2UsIGluaXRpYWwsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgbGV0IG91dHB1dCA9IGluaXRpYWw7XG4gICAgICAgIHJldHVybiBtYXAoZXZlbnQsIGUgPT4ge1xuICAgICAgICAgICAgb3V0cHV0ID0gbWVyZ2Uob3V0cHV0LCBlKTtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH0sIGRpc3Bvc2FibGUpO1xuICAgIH1cbiAgICBFdmVudC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgZnVuY3Rpb24gc25hcHNob3QoZXZlbnQsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgbGV0IGxpc3RlbmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgb25XaWxsQWRkRmlyc3RMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGV2ZW50KGVtaXR0ZXIuZmlyZSwgZW1pdHRlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EaWRSZW1vdmVMYXN0TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIgPT09IG51bGwgfHwgbGlzdGVuZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICBfYWRkTGVha2FnZVRyYWNlTG9naWMob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW1pdHRlciA9IG5ldyBFbWl0dGVyKG9wdGlvbnMpO1xuICAgICAgICBkaXNwb3NhYmxlID09PSBudWxsIHx8IGRpc3Bvc2FibGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRpc3Bvc2FibGUuYWRkKGVtaXR0ZXIpO1xuICAgICAgICByZXR1cm4gZW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgSURpc3Bvc2FibGUgdG8gdGhlIHN0b3JlIGlmIGl0J3Mgc2V0LCBhbmQgcmV0dXJucyBpdC4gVXNlZnVsIHRvXG4gICAgICogRXZlbnQgZnVuY3Rpb24gaW1wbGVtZW50YXRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkQW5kUmV0dXJuRGlzcG9zYWJsZShkLCBzdG9yZSkge1xuICAgICAgICBpZiAoc3RvcmUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgc3RvcmUucHVzaChkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdG9yZSkge1xuICAgICAgICAgICAgc3RvcmUuYWRkKGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShldmVudCwgbWVyZ2UsIGRlbGF5ID0gMTAwLCBsZWFkaW5nID0gZmFsc2UsIGZsdXNoT25MaXN0ZW5lclJlbW92ZSA9IGZhbHNlLCBsZWFrV2FybmluZ1RocmVzaG9sZCwgZGlzcG9zYWJsZSkge1xuICAgICAgICBsZXQgc3Vic2NyaXB0aW9uO1xuICAgICAgICBsZXQgb3V0cHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgaGFuZGxlID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgbnVtRGVib3VuY2VkQ2FsbHMgPSAwO1xuICAgICAgICBsZXQgZG9GaXJlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbGVha1dhcm5pbmdUaHJlc2hvbGQsXG4gICAgICAgICAgICBvbldpbGxBZGRGaXJzdExpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IGV2ZW50KGN1ciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG51bURlYm91bmNlZENhbGxzKys7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG1lcmdlKG91dHB1dCwgY3VyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlYWRpbmcgJiYgIWhhbmRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlci5maXJlKG91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZG9GaXJlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgX291dHB1dCA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGVhZGluZyB8fCBudW1EZWJvdW5jZWRDYWxscyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmZpcmUoX291dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1EZWJvdW5jZWRDYWxscyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IHNldFRpbWVvdXQoZG9GaXJlLCBkZWxheSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKGRvRmlyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbldpbGxSZW1vdmVMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmx1c2hPbkxpc3RlbmVyUmVtb3ZlICYmIG51bURlYm91bmNlZENhbGxzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkb0ZpcmUgPT09IG51bGwgfHwgZG9GaXJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkb0ZpcmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25EaWRSZW1vdmVMYXN0TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICAgICAgZG9GaXJlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICghZGlzcG9zYWJsZSkge1xuICAgICAgICAgICAgX2FkZExlYWthZ2VUcmFjZUxvZ2ljKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBuZXcgRW1pdHRlcihvcHRpb25zKTtcbiAgICAgICAgZGlzcG9zYWJsZSA9PT0gbnVsbCB8fCBkaXNwb3NhYmxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXNwb3NhYmxlLmFkZChlbWl0dGVyKTtcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIEV2ZW50LmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgLyoqXG4gICAgICogRGVib3VuY2VzIGFuIGV2ZW50LCBmaXJpbmcgYWZ0ZXIgc29tZSBkZWxheSAoZGVmYXVsdD0wKSB3aXRoIGFuIGFycmF5IG9mIGFsbCBldmVudCBvcmlnaW5hbCBvYmplY3RzLlxuICAgICAqXG4gICAgICogKk5PVEUqIHRoYXQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGBFdmVudGAgYW5kIGl0IE1VU1QgYmUgY2FsbGVkIHdpdGggYSBgRGlzcG9zYWJsZVN0b3JlYCB3aGVuZXZlciB0aGUgcmV0dXJuZWRcbiAgICAgKiBldmVudCBpcyBhY2Nlc3NpYmxlIHRvIFwidGhpcmQgcGFydGllc1wiLCBlLmcgdGhlIGV2ZW50IGlzIGEgcHVibGljIHByb3BlcnR5LiBPdGhlcndpc2UgYSBsZWFrZWQgbGlzdGVuZXIgb24gdGhlXG4gICAgICogcmV0dXJuZWQgZXZlbnQgY2F1c2VzIHRoaXMgdXRpbGl0eSB0byBsZWFrIGEgbGlzdGVuZXIgb24gdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGUoZXZlbnQsIGRlbGF5ID0gMCwgZGlzcG9zYWJsZSkge1xuICAgICAgICByZXR1cm4gRXZlbnQuZGVib3VuY2UoZXZlbnQsIChsYXN0LCBlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdC5wdXNoKGUpO1xuICAgICAgICAgICAgcmV0dXJuIGxhc3Q7XG4gICAgICAgIH0sIGRlbGF5LCB1bmRlZmluZWQsIHRydWUsIHVuZGVmaW5lZCwgZGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIEV2ZW50LmFjY3VtdWxhdGUgPSBhY2N1bXVsYXRlO1xuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgYW4gZXZlbnQgc3VjaCB0aGF0IHNvbWUgY29uZGl0aW9uIGlzIF9ub3RfIG1ldCBtb3JlIHRoYW4gb25jZSBpbiBhIHJvdywgZWZmZWN0aXZlbHkgZW5zdXJpbmcgZHVwbGljYXRlXG4gICAgICogZXZlbnQgb2JqZWN0cyBmcm9tIGRpZmZlcmVudCBzb3VyY2VzIGRvIG5vdCBmaXJlIHRoZSBzYW1lIGV2ZW50IG9iamVjdC5cbiAgICAgKlxuICAgICAqICpOT1RFKiB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBgRXZlbnRgIGFuZCBpdCBNVVNUIGJlIGNhbGxlZCB3aXRoIGEgYERpc3Bvc2FibGVTdG9yZWAgd2hlbmV2ZXIgdGhlIHJldHVybmVkXG4gICAgICogZXZlbnQgaXMgYWNjZXNzaWJsZSB0byBcInRoaXJkIHBhcnRpZXNcIiwgZS5nIHRoZSBldmVudCBpcyBhIHB1YmxpYyBwcm9wZXJ0eS4gT3RoZXJ3aXNlIGEgbGVha2VkIGxpc3RlbmVyIG9uIHRoZVxuICAgICAqIHJldHVybmVkIGV2ZW50IGNhdXNlcyB0aGlzIHV0aWxpdHkgdG8gbGVhayBhIGxpc3RlbmVyIG9uIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgc291cmNlIGZvciB0aGUgbmV3IGV2ZW50LlxuICAgICAqIEBwYXJhbSBlcXVhbHMgVGhlIGVxdWFsaXR5IGNvbmRpdGlvbi5cbiAgICAgKiBAcGFyYW0gZGlzcG9zYWJsZSBBIGRpc3Bvc2FibGUgc3RvcmUgdG8gYWRkIHRoZSBuZXcgRXZlbnRFbWl0dGVyIHRvLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiAvLyBGaXJlIG9ubHkgb25lIHRpbWUgd2hlbiBhIHNpbmdsZSB3aW5kb3cgaXMgb3BlbmVkIG9yIGZvY3VzZWRcbiAgICAgKiBFdmVudC5sYXRjaChFdmVudC5hbnkob25EaWRPcGVuV2luZG93LCBvbkRpZEZvY3VzV2luZG93KSlcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXRjaChldmVudCwgZXF1YWxzID0gKGEsIGIpID0+IGEgPT09IGIsIGRpc3Bvc2FibGUpIHtcbiAgICAgICAgbGV0IGZpcnN0Q2FsbCA9IHRydWU7XG4gICAgICAgIGxldCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcihldmVudCwgdmFsdWUgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkRW1pdCA9IGZpcnN0Q2FsbCB8fCAhZXF1YWxzKHZhbHVlLCBjYWNoZSk7XG4gICAgICAgICAgICBmaXJzdENhbGwgPSBmYWxzZTtcbiAgICAgICAgICAgIGNhY2hlID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkRW1pdDtcbiAgICAgICAgfSwgZGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIEV2ZW50LmxhdGNoID0gbGF0Y2g7XG4gICAgLyoqXG4gICAgICogU3BsaXRzIGFuIGV2ZW50IHdob3NlIHBhcmFtZXRlciBpcyBhIHVuaW9uIHR5cGUgaW50byAyIHNlcGFyYXRlIGV2ZW50cyBmb3IgZWFjaCB0eXBlIGluIHRoZSB1bmlvbi5cbiAgICAgKlxuICAgICAqICpOT1RFKiB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBgRXZlbnRgIGFuZCBpdCBNVVNUIGJlIGNhbGxlZCB3aXRoIGEgYERpc3Bvc2FibGVTdG9yZWAgd2hlbmV2ZXIgdGhlIHJldHVybmVkXG4gICAgICogZXZlbnQgaXMgYWNjZXNzaWJsZSB0byBcInRoaXJkIHBhcnRpZXNcIiwgZS5nIHRoZSBldmVudCBpcyBhIHB1YmxpYyBwcm9wZXJ0eS4gT3RoZXJ3aXNlIGEgbGVha2VkIGxpc3RlbmVyIG9uIHRoZVxuICAgICAqIHJldHVybmVkIGV2ZW50IGNhdXNlcyB0aGlzIHV0aWxpdHkgdG8gbGVhayBhIGxpc3RlbmVyIG9uIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogY29uc3QgZXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlciB8IHVuZGVmaW5lZD4oKS5ldmVudDtcbiAgICAgKiBjb25zdCBbbnVtYmVyRXZlbnQsIHVuZGVmaW5lZEV2ZW50XSA9IEV2ZW50LnNwbGl0KGV2ZW50LCBpc1VuZGVmaW5lZCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBmb3IgdGhlIG5ldyBldmVudC5cbiAgICAgKiBAcGFyYW0gaXNUIEEgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIHdoYXQgZXZlbnQgaXMgb2YgdGhlIGZpcnN0IHR5cGUuXG4gICAgICogQHBhcmFtIGRpc3Bvc2FibGUgQSBkaXNwb3NhYmxlIHN0b3JlIHRvIGFkZCB0aGUgbmV3IEV2ZW50RW1pdHRlciB0by5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChldmVudCwgaXNULCBkaXNwb3NhYmxlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBFdmVudC5maWx0ZXIoZXZlbnQsIGlzVCwgZGlzcG9zYWJsZSksXG4gICAgICAgICAgICBFdmVudC5maWx0ZXIoZXZlbnQsIGUgPT4gIWlzVChlKSwgZGlzcG9zYWJsZSksXG4gICAgICAgIF07XG4gICAgfVxuICAgIEV2ZW50LnNwbGl0ID0gc3BsaXQ7XG4gICAgLyoqXG4gICAgICogQnVmZmVycyBhbiBldmVudCB1bnRpbCBpdCBoYXMgYSBsaXN0ZW5lciBhdHRhY2hlZC5cbiAgICAgKlxuICAgICAqICpOT1RFKiB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBgRXZlbnRgIGFuZCBpdCBNVVNUIGJlIGNhbGxlZCB3aXRoIGEgYERpc3Bvc2FibGVTdG9yZWAgd2hlbmV2ZXIgdGhlIHJldHVybmVkXG4gICAgICogZXZlbnQgaXMgYWNjZXNzaWJsZSB0byBcInRoaXJkIHBhcnRpZXNcIiwgZS5nIHRoZSBldmVudCBpcyBhIHB1YmxpYyBwcm9wZXJ0eS4gT3RoZXJ3aXNlIGEgbGVha2VkIGxpc3RlbmVyIG9uIHRoZVxuICAgICAqIHJldHVybmVkIGV2ZW50IGNhdXNlcyB0aGlzIHV0aWxpdHkgdG8gbGVhayBhIGxpc3RlbmVyIG9uIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgc291cmNlIGZvciB0aGUgbmV3IGV2ZW50LlxuICAgICAqIEBwYXJhbSBmbHVzaEFmdGVyVGltZW91dCBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZmx1c2ggdGhlIGJ1ZmZlciBhZnRlciBhIHRpbWVvdXQgaW1tZWRpYXRlbHkgb3IgYWZ0ZXIgYVxuICAgICAqIGBzZXRUaW1lb3V0YCB3aGVuIHRoZSBmaXJzdCBldmVudCBsaXN0ZW5lciBpcyBhZGRlZC5cbiAgICAgKiBAcGFyYW0gX2J1ZmZlciBJbnRlcm5hbDogQSBzb3VyY2UgZXZlbnQgYXJyYXkgdXNlZCBmb3IgdGVzdHMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIC8vIFN0YXJ0IGFjY3VtdWxhdGluZyBldmVudHMsIHdoZW4gdGhlIGZpcnN0IGxpc3RlbmVyIGlzIGF0dGFjaGVkLCBmbHVzaFxuICAgICAqIC8vIHRoZSBldmVudCBhZnRlciBhIHRpbWVvdXQgc3VjaCB0aGF0IG11bHRpcGxlIGxpc3RlbmVycyBhdHRhY2hlZCBiZWZvcmVcbiAgICAgKiAvLyB0aGUgdGltZW91dCB3b3VsZCByZWNlaXZlIHRoZSBldmVudFxuICAgICAqIHRoaXMub25JbnN0YWxsRXh0ZW5zaW9uID0gRXZlbnQuYnVmZmVyKHNlcnZpY2Uub25JbnN0YWxsRXh0ZW5zaW9uLCB0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBidWZmZXIoZXZlbnQsIGZsdXNoQWZ0ZXJUaW1lb3V0ID0gZmFsc2UsIF9idWZmZXIgPSBbXSwgZGlzcG9zYWJsZSkge1xuICAgICAgICBsZXQgYnVmZmVyID0gX2J1ZmZlci5zbGljZSgpO1xuICAgICAgICBsZXQgbGlzdGVuZXIgPSBldmVudChlID0+IHtcbiAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZmlyZShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmFkZChsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgICAgICAgICBidWZmZXIgPT09IG51bGwgfHwgYnVmZmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidWZmZXIuZm9yRWFjaChlID0+IGVtaXR0ZXIuZmlyZShlKSk7XG4gICAgICAgICAgICBidWZmZXIgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlbWl0dGVyID0gbmV3IEVtaXR0ZXIoe1xuICAgICAgICAgICAgb25XaWxsQWRkRmlyc3RMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gZXZlbnQoZSA9PiBlbWl0dGVyLmZpcmUoZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcG9zYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZS5hZGQobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRGlkQWRkRmlyc3RMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbHVzaEFmdGVyVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmbHVzaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRGlkUmVtb3ZlTGFzdExpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICBkaXNwb3NhYmxlLmFkZChlbWl0dGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgRXZlbnQuYnVmZmVyID0gYnVmZmVyO1xuICAgIC8qKlxuICAgICAqIFdyYXBzIHRoZSBldmVudCBpbiBhbiB7QGxpbmsgSUNoYWluYWJsZUV2ZW50fSwgYWxsb3dpbmcgYSBtb3JlIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgc3R5bGUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIC8vIE5vcm1hbFxuICAgICAqIGNvbnN0IG9uRW50ZXJQcmVzc05vcm1hbCA9IEV2ZW50LmZpbHRlcihcbiAgICAgKiAgIEV2ZW50Lm1hcChvbktleVByZXNzLmV2ZW50LCBlID0+IG5ldyBTdGFuZGFyZEtleWJvYXJkRXZlbnQoZSkpLFxuICAgICAqICAgZS5rZXlDb2RlID09PSBLZXlDb2RlLkVudGVyXG4gICAgICogKS5ldmVudDtcbiAgICAgKlxuICAgICAqIC8vIFVzaW5nIGNoYWluXG4gICAgICogY29uc3Qgb25FbnRlclByZXNzQ2hhaW4gPSBFdmVudC5jaGFpbihvbktleVByZXNzLmV2ZW50LCAkID0+ICRcbiAgICAgKiAgIC5tYXAoZSA9PiBuZXcgU3RhbmRhcmRLZXlib2FyZEV2ZW50KGUpKVxuICAgICAqICAgLmZpbHRlcihlID0+IGUua2V5Q29kZSA9PT0gS2V5Q29kZS5FbnRlcilcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKGV2ZW50LCBzeXRoZW5zaXplKSB7XG4gICAgICAgIGNvbnN0IGZuID0gKGxpc3RlbmVyLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gc3l0aGVuc2l6ZShuZXcgQ2hhaW5hYmxlU3ludGhlc2lzKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50KGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNzLmV2YWx1YXRlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBIYWx0Q2hhaW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCBkaXNwb3NhYmxlcyk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgRXZlbnQuY2hhaW4gPSBjaGFpbjtcbiAgICBjb25zdCBIYWx0Q2hhaW5hYmxlID0gU3ltYm9sKCdIYWx0Q2hhaW5hYmxlJyk7XG4gICAgY2xhc3MgQ2hhaW5hYmxlU3ludGhlc2lzIHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbWFwKGZuKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzLnB1c2goZm4pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZm9yRWFjaChmbikge1xuICAgICAgICAgICAgdGhpcy5zdGVwcy5wdXNoKHYgPT4ge1xuICAgICAgICAgICAgICAgIGZuKHYpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBmaWx0ZXIoZm4pIHtcbiAgICAgICAgICAgIHRoaXMuc3RlcHMucHVzaCh2ID0+IGZuKHYpID8gdiA6IEhhbHRDaGFpbmFibGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmVkdWNlKG1lcmdlLCBpbml0aWFsKSB7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IGluaXRpYWw7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzLnB1c2godiA9PiB7XG4gICAgICAgICAgICAgICAgbGFzdCA9IG1lcmdlKGxhc3QsIHYpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBsYXRjaChlcXVhbHMgPSAoYSwgYikgPT4gYSA9PT0gYikge1xuICAgICAgICAgICAgbGV0IGZpcnN0Q2FsbCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgY2FjaGU7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzLnB1c2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZEVtaXQgPSBmaXJzdENhbGwgfHwgIWVxdWFscyh2YWx1ZSwgY2FjaGUpO1xuICAgICAgICAgICAgICAgIGZpcnN0Q2FsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNhY2hlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNob3VsZEVtaXQgPyB2YWx1ZSA6IEhhbHRDaGFpbmFibGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGV2YWx1YXRlKHZhbHVlKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0ZXAgb2YgdGhpcy5zdGVwcykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gc3RlcCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBIYWx0Q2hhaW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIHtAbGluayBFdmVudH0gZnJvbSBhIG5vZGUgZXZlbnQgZW1pdHRlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tTm9kZUV2ZW50RW1pdHRlcihlbWl0dGVyLCBldmVudE5hbWUsIG1hcCA9IGlkID0+IGlkKSB7XG4gICAgICAgIGNvbnN0IGZuID0gKC4uLmFyZ3MpID0+IHJlc3VsdC5maXJlKG1hcCguLi5hcmdzKSk7XG4gICAgICAgIGNvbnN0IG9uRmlyc3RMaXN0ZW5lckFkZCA9ICgpID0+IGVtaXR0ZXIub24oZXZlbnROYW1lLCBmbik7XG4gICAgICAgIGNvbnN0IG9uTGFzdExpc3RlbmVyUmVtb3ZlID0gKCkgPT4gZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGZuKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEVtaXR0ZXIoeyBvbldpbGxBZGRGaXJzdExpc3RlbmVyOiBvbkZpcnN0TGlzdGVuZXJBZGQsIG9uRGlkUmVtb3ZlTGFzdExpc3RlbmVyOiBvbkxhc3RMaXN0ZW5lclJlbW92ZSB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5ldmVudDtcbiAgICB9XG4gICAgRXZlbnQuZnJvbU5vZGVFdmVudEVtaXR0ZXIgPSBmcm9tTm9kZUV2ZW50RW1pdHRlcjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIHtAbGluayBFdmVudH0gZnJvbSBhIERPTSBldmVudCBlbWl0dGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21ET01FdmVudEVtaXR0ZXIoZW1pdHRlciwgZXZlbnROYW1lLCBtYXAgPSBpZCA9PiBpZCkge1xuICAgICAgICBjb25zdCBmbiA9ICguLi5hcmdzKSA9PiByZXN1bHQuZmlyZShtYXAoLi4uYXJncykpO1xuICAgICAgICBjb25zdCBvbkZpcnN0TGlzdGVuZXJBZGQgPSAoKSA9PiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbik7XG4gICAgICAgIGNvbnN0IG9uTGFzdExpc3RlbmVyUmVtb3ZlID0gKCkgPT4gZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm4pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRW1pdHRlcih7IG9uV2lsbEFkZEZpcnN0TGlzdGVuZXI6IG9uRmlyc3RMaXN0ZW5lckFkZCwgb25EaWRSZW1vdmVMYXN0TGlzdGVuZXI6IG9uTGFzdExpc3RlbmVyUmVtb3ZlIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmV2ZW50O1xuICAgIH1cbiAgICBFdmVudC5mcm9tRE9NRXZlbnRFbWl0dGVyID0gZnJvbURPTUV2ZW50RW1pdHRlcjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcHJvbWlzZSBvdXQgb2YgYW4gZXZlbnQsIHVzaW5nIHRoZSB7QGxpbmsgRXZlbnQub25jZX0gaGVscGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUHJvbWlzZShldmVudCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBvbmNlKGV2ZW50KShyZXNvbHZlKSk7XG4gICAgfVxuICAgIEV2ZW50LnRvUHJvbWlzZSA9IHRvUHJvbWlzZTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGV2ZW50IG91dCBvZiBhIHByb21pc2UgdGhhdCBmaXJlcyBvbmNlIHdoZW4gdGhlIHByb21pc2UgaXNcbiAgICAgKiByZXNvbHZlZCB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHByb21pc2Ugb3IgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICBwcm9taXNlLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC5maXJlKHJlcyk7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgcmVzdWx0LmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQuZXZlbnQ7XG4gICAgfVxuICAgIEV2ZW50LmZyb21Qcm9taXNlID0gZnJvbVByb21pc2U7XG4gICAgZnVuY3Rpb24gcnVuQW5kU3Vic2NyaWJlKGV2ZW50LCBoYW5kbGVyLCBpbml0aWFsKSB7XG4gICAgICAgIGhhbmRsZXIoaW5pdGlhbCk7XG4gICAgICAgIHJldHVybiBldmVudChlID0+IGhhbmRsZXIoZSkpO1xuICAgIH1cbiAgICBFdmVudC5ydW5BbmRTdWJzY3JpYmUgPSBydW5BbmRTdWJzY3JpYmU7XG4gICAgY2xhc3MgRW1pdHRlck9ic2VydmVyIHtcbiAgICAgICAgY29uc3RydWN0b3IoX29ic2VydmFibGUsIHN0b3JlKSB7XG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZhYmxlID0gX29ic2VydmFibGU7XG4gICAgICAgICAgICB0aGlzLl9jb3VudGVyID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2hhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgb25XaWxsQWRkRmlyc3RMaXN0ZW5lcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBfb2JzZXJ2YWJsZS5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRGlkUmVtb3ZlTGFzdExpc3RlbmVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIF9vYnNlcnZhYmxlLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgX2FkZExlYWthZ2VUcmFjZUxvZ2ljKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIob3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoc3RvcmUpIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5hZGQodGhpcy5lbWl0dGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBiZWdpblVwZGF0ZShfb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgLy8gYXNzZXJ0KF9vYnNlcnZhYmxlID09PSB0aGlzLm9icyk7XG4gICAgICAgICAgICB0aGlzLl9jb3VudGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlUG9zc2libGVDaGFuZ2UoX29ic2VydmFibGUpIHtcbiAgICAgICAgICAgIC8vIGFzc2VydChfb2JzZXJ2YWJsZSA9PT0gdGhpcy5vYnMpO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZUNoYW5nZShfb2JzZXJ2YWJsZSwgX2NoYW5nZSkge1xuICAgICAgICAgICAgLy8gYXNzZXJ0KF9vYnNlcnZhYmxlID09PSB0aGlzLm9icyk7XG4gICAgICAgICAgICB0aGlzLl9oYXNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbmRVcGRhdGUoX29ic2VydmFibGUpIHtcbiAgICAgICAgICAgIC8vIGFzc2VydChfb2JzZXJ2YWJsZSA9PT0gdGhpcy5vYnMpO1xuICAgICAgICAgICAgdGhpcy5fY291bnRlci0tO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvdW50ZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLnJlcG9ydENoYW5nZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5maXJlKHRoaXMuX29ic2VydmFibGUuZ2V0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGV2ZW50IGVtaXR0ZXIgdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBvYnNlcnZhYmxlIGNoYW5nZXMuXG4gICAgICogRWFjaCBsaXN0ZW5lcnMgc3Vic2NyaWJlcyB0byB0aGUgZW1pdHRlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tT2JzZXJ2YWJsZShvYnMsIHN0b3JlKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEVtaXR0ZXJPYnNlcnZlcihvYnMsIHN0b3JlKTtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIEV2ZW50LmZyb21PYnNlcnZhYmxlID0gZnJvbU9ic2VydmFibGU7XG4gICAgLyoqXG4gICAgICogRWFjaCBsaXN0ZW5lciBpcyBhdHRhY2hlZCB0byB0aGUgb2JzZXJ2YWJsZSBkaXJlY3RseS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tT2JzZXJ2YWJsZUxpZ2h0KG9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIChsaXN0ZW5lciwgdGhpc0FyZ3MsIGRpc3Bvc2FibGVzKSA9PiB7XG4gICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgbGV0IGRpZENoYW5nZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgYmVnaW5VcGRhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmRVcGRhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50LS07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5yZXBvcnRDaGFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlkQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlkQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhbmRsZVBvc3NpYmxlQ2hhbmdlKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZENoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9ic2VydmFibGUuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5yZXBvcnRDaGFuZ2VzKCk7XG4gICAgICAgICAgICBjb25zdCBkaXNwb3NhYmxlID0ge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUucmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZGlzcG9zYWJsZXMgaW5zdGFuY2VvZiBEaXNwb3NhYmxlU3RvcmUpIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlcy5hZGQoZGlzcG9zYWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRpc3Bvc2FibGVzKSkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLnB1c2goZGlzcG9zYWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlzcG9zYWJsZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgRXZlbnQuZnJvbU9ic2VydmFibGVMaWdodCA9IGZyb21PYnNlcnZhYmxlTGlnaHQ7XG59KShFdmVudCB8fCAoRXZlbnQgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIEV2ZW50UHJvZmlsaW5nIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuaW52b2NhdGlvbkNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5lbGFwc2VkT3ZlcmFsbCA9IDA7XG4gICAgICAgIHRoaXMuZHVyYXRpb25zID0gW107XG4gICAgICAgIHRoaXMubmFtZSA9IGAke25hbWV9XyR7RXZlbnRQcm9maWxpbmcuX2lkUG9vbCsrfWA7XG4gICAgICAgIEV2ZW50UHJvZmlsaW5nLmFsbC5hZGQodGhpcyk7XG4gICAgfVxuICAgIHN0YXJ0KGxpc3RlbmVyQ291bnQpIHtcbiAgICAgICAgdGhpcy5fc3RvcFdhdGNoID0gbmV3IFN0b3BXYXRjaCgpO1xuICAgICAgICB0aGlzLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RvcFdhdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gdGhpcy5fc3RvcFdhdGNoLmVsYXBzZWQoKTtcbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb25zLnB1c2goZWxhcHNlZCk7XG4gICAgICAgICAgICB0aGlzLmVsYXBzZWRPdmVyYWxsICs9IGVsYXBzZWQ7XG4gICAgICAgICAgICB0aGlzLmludm9jYXRpb25Db3VudCArPSAxO1xuICAgICAgICAgICAgdGhpcy5fc3RvcFdhdGNoID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuRXZlbnRQcm9maWxpbmcuYWxsID0gbmV3IFNldCgpO1xuRXZlbnRQcm9maWxpbmcuX2lkUG9vbCA9IDA7XG5sZXQgX2dsb2JhbExlYWtXYXJuaW5nVGhyZXNob2xkID0gLTE7XG5jbGFzcyBMZWFrYWdlTW9uaXRvciB7XG4gICAgY29uc3RydWN0b3IodGhyZXNob2xkLCBuYW1lID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygxOCkuc2xpY2UoMiwgNSkpIHtcbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX3dhcm5Db3VudGRvd24gPSAwO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX3N0YWNrcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsZWFyKCk7XG4gICAgfVxuICAgIGNoZWNrKHN0YWNrLCBsaXN0ZW5lckNvdW50KSB7XG4gICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IHRoaXMudGhyZXNob2xkO1xuICAgICAgICBpZiAodGhyZXNob2xkIDw9IDAgfHwgbGlzdGVuZXJDb3VudCA8IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3N0YWNrcykge1xuICAgICAgICAgICAgdGhpcy5fc3RhY2tzID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvdW50ID0gKHRoaXMuX3N0YWNrcy5nZXQoc3RhY2sudmFsdWUpIHx8IDApO1xuICAgICAgICB0aGlzLl9zdGFja3Muc2V0KHN0YWNrLnZhbHVlLCBjb3VudCArIDEpO1xuICAgICAgICB0aGlzLl93YXJuQ291bnRkb3duIC09IDE7XG4gICAgICAgIGlmICh0aGlzLl93YXJuQ291bnRkb3duIDw9IDApIHtcbiAgICAgICAgICAgIC8vIG9ubHkgd2FybiBvbiBmaXJzdCBleGNlZWQgYW5kIHRoZW4gZXZlcnkgdGltZSB0aGUgbGltaXRcbiAgICAgICAgICAgIC8vIGlzIGV4Y2VlZGVkIGJ5IDUwJSBhZ2FpblxuICAgICAgICAgICAgdGhpcy5fd2FybkNvdW50ZG93biA9IHRocmVzaG9sZCAqIDAuNTtcbiAgICAgICAgICAgIC8vIGZpbmQgbW9zdCBmcmVxdWVudCBsaXN0ZW5lciBhbmQgcHJpbnQgd2FybmluZ1xuICAgICAgICAgICAgbGV0IHRvcFN0YWNrO1xuICAgICAgICAgICAgbGV0IHRvcENvdW50ID0gMDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3N0YWNrLCBjb3VudF0gb2YgdGhpcy5fc3RhY2tzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0b3BTdGFjayB8fCB0b3BDb3VudCA8IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcFN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAgICAgICAgIHRvcENvdW50ID0gY291bnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbJHt0aGlzLm5hbWV9XSBwb3RlbnRpYWwgbGlzdGVuZXIgTEVBSyBkZXRlY3RlZCwgaGF2aW5nICR7bGlzdGVuZXJDb3VudH0gbGlzdGVuZXJzIGFscmVhZHkuIE1PU1QgZnJlcXVlbnQgbGlzdGVuZXIgKCR7dG9wQ291bnR9KTpgKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybih0b3BTdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gKHRoaXMuX3N0YWNrcy5nZXQoc3RhY2sudmFsdWUpIHx8IDApO1xuICAgICAgICAgICAgdGhpcy5fc3RhY2tzLnNldChzdGFjay52YWx1ZSwgY291bnQgLSAxKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5jbGFzcyBTdGFja3RyYWNlIHtcbiAgICBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBuZXcgU3RhY2t0cmFjZSgoX2EgPSBuZXcgRXJyb3IoKS5zdGFjaykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHByaW50KCkge1xuICAgICAgICBjb25zb2xlLndhcm4odGhpcy52YWx1ZS5zcGxpdCgnXFxuJykuc2xpY2UoMikuam9pbignXFxuJykpO1xuICAgIH1cbn1cbmNsYXNzIFVuaXF1ZUNvbnRhaW5lciB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbn1cbmNvbnN0IGNvbXBhY3Rpb25UaHJlc2hvbGQgPSAyO1xuY29uc3QgZm9yRWFjaExpc3RlbmVyID0gKGxpc3RlbmVycywgZm4pID0+IHtcbiAgICBpZiAobGlzdGVuZXJzIGluc3RhbmNlb2YgVW5pcXVlQ29udGFpbmVyKSB7XG4gICAgICAgIGZuKGxpc3RlbmVycyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbCA9IGxpc3RlbmVyc1tpXTtcbiAgICAgICAgICAgIGlmIChsKSB7XG4gICAgICAgICAgICAgICAgZm4obCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgX2xpc3RlbmVyRmluYWxpemVycyA9IF9lbmFibGVMaXN0ZW5lckdDZWRXYXJuaW5nXG4gICAgPyBuZXcgRmluYWxpemF0aW9uUmVnaXN0cnkoaGVsZFZhbHVlID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBoZWxkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tMRUFLSU5HIExJU1RFTkVSXSBHQ1xcJ2VkIGEgbGlzdGVuZXIgdGhhdCB3YXMgTk9UIHlldCBkaXNwb3NlZC4gVGhpcyBpcyB3aGVyZSBpcyB3YXMgY3JlYXRlZDonKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihoZWxkVmFsdWUpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICA6IHVuZGVmaW5lZDtcbi8qKlxuICogVGhlIEVtaXR0ZXIgY2FuIGJlIHVzZWQgdG8gZXhwb3NlIGFuIEV2ZW50IHRvIHRoZSBwdWJsaWNcbiAqIHRvIGZpcmUgaXQgZnJvbSB0aGUgaW5zaWRlcy5cbiAqIFNhbXBsZTpcbiAgICBjbGFzcyBEb2N1bWVudCB7XG5cbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcjwodmFsdWU6c3RyaW5nKT0+YW55PigpO1xuXG4gICAgICAgIHB1YmxpYyBvbkRpZENoYW5nZSA9IHRoaXMuX29uRGlkQ2hhbmdlLmV2ZW50O1xuXG4gICAgICAgIC8vIGdldHRlci1zdHlsZVxuICAgICAgICAvLyBnZXQgb25EaWRDaGFuZ2UoKTogRXZlbnQ8KHZhbHVlOnN0cmluZyk9PmFueT4ge1xuICAgICAgICAvLyBcdHJldHVybiB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHByaXZhdGUgX2RvSXQoKSB7XG4gICAgICAgICAgICAvLy4uLlxuICAgICAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gKi9cbmV4cG9ydCBjbGFzcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fbGVha2FnZU1vbiA9IF9nbG9iYWxMZWFrV2FybmluZ1RocmVzaG9sZCA+IDAgfHwgKChfYSA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZWFrV2FybmluZ1RocmVzaG9sZCkgPyBuZXcgTGVha2FnZU1vbml0b3IoKF9jID0gKF9iID0gdGhpcy5fb3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxlYWtXYXJuaW5nVGhyZXNob2xkKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBfZ2xvYmFsTGVha1dhcm5pbmdUaHJlc2hvbGQpIDogdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wZXJmTW9uID0gKChfZCA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5fcHJvZk5hbWUpID8gbmV3IEV2ZW50UHJvZmlsaW5nKHRoaXMuX29wdGlvbnMuX3Byb2ZOYW1lKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGVsaXZlcnlRdWV1ZSA9IChfZSA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5kZWxpdmVyeVF1ZXVlO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGlmICghdGhpcy5fZGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIEl0IGlzIGJhZCB0byBoYXZlIGxpc3RlbmVycyBhdCB0aGUgdGltZSBvZiBkaXNwb3NpbmcgYW4gZW1pdHRlciwgaXQgaXMgd29yc3QgdG8gaGF2ZSBsaXN0ZW5lcnMga2VlcCB0aGUgZW1pdHRlclxuICAgICAgICAgICAgLy8gYWxpdmUgdmlhIHRoZSByZWZlcmVuY2UgdGhhdCdzIGVtYmVkZGVkIGluIHRoZWlyIGRpc3Bvc2FibGVzLiBUaGVyZWZvcmUgd2UgbG9vcCBvdmVyIGFsbCByZW1haW5pbmcgbGlzdGVuZXJzIGFuZFxuICAgICAgICAgICAgLy8gdW5zZXQgdGhlaXIgc3Vic2NyaXB0aW9ucy9kaXNwb3NhYmxlcy4gTG9vcGluZyBhbmQgYmxhbWluZyByZW1haW5pbmcgbGlzdGVuZXJzIGlzIGRvbmUgb24gbmV4dCB0aWNrIGJlY2F1c2UgdGhlXG4gICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHByb2dyYW1taW5nIHBhdHRlcm4gaXMgdmVyeSBwb3B1bGFyOlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGNvbnN0IHNvbWVNb2RlbCA9IHRoaXMuX2Rpc3Bvc2FibGVzLmFkZChuZXcgTW9kZWxPYmplY3QoKSk7IC8vICgxKSBjcmVhdGUgYW5kIHJlZ2lzdGVyIG1vZGVsXG4gICAgICAgICAgICAvLyB0aGlzLl9kaXNwb3NhYmxlcy5hZGQoc29tZU1vZGVsLm9uRGlkQ2hhbmdlKCgpID0+IHsgLi4uIH0pOyAvLyAoMikgc3Vic2NyaWJlIGFuZCByZWdpc3RlciBtb2RlbC1ldmVudCBsaXN0ZW5lclxuICAgICAgICAgICAgLy8gLi4ubGF0ZXIuLi5cbiAgICAgICAgICAgIC8vIHRoaXMuX2Rpc3Bvc2FibGVzLmRpc3Bvc2UoKTsgZGlzcG9zZXMgKDEpIHRoZW4gKDIpOiBkb24ndCB3YXJuIGFmdGVyICgxKSBidXQgYWZ0ZXIgdGhlIFwib3ZlcmFsbCBkaXNwb3NlXCIgaXMgZG9uZVxuICAgICAgICAgICAgaWYgKCgoX2EgPSB0aGlzLl9kZWxpdmVyeVF1ZXVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3VycmVudCkgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWxpdmVyeVF1ZXVlLnJlc2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9lbmFibGVEaXNwb3NlV2l0aExpc3RlbmVyV2FybmluZykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2hMaXN0ZW5lcihsaXN0ZW5lcnMsIGwgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBsLnN0YWNrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJpbnQoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoX2MgPSAoX2IgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub25EaWRSZW1vdmVMYXN0TGlzdGVuZXIpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKF9iKTtcbiAgICAgICAgICAgIChfZCA9IHRoaXMuX2xlYWthZ2VNb24pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIHRoZSBwdWJsaWMgdG8gYWxsb3cgdG8gc3Vic2NyaWJlXG4gICAgICogdG8gZXZlbnRzIGZyb20gdGhpcyBFbWl0dGVyXG4gICAgICovXG4gICAgZ2V0IGV2ZW50KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX2V2ZW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAodGhpcy5fZXZlbnQgPSAoY2FsbGJhY2ssIHRoaXNBcmdzLCBkaXNwb3NhYmxlcykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWFrYWdlTW9uICYmIHRoaXMuX3NpemUgPiB0aGlzLl9sZWFrYWdlTW9uLnRocmVzaG9sZCAqIDMpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFske3RoaXMuX2xlYWthZ2VNb24ubmFtZX1dIFJFRlVTRVMgdG8gYWNjZXB0IG5ldyBsaXN0ZW5lcnMgYmVjYXVzZSBpdCBleGNlZWRlZCBpdHMgdGhyZXNob2xkIGJ5IGZhcmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBEaXNwb3NhYmxlLk5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAvLyB0b2RvOiBzaG91bGQgd2Ugd2FybiBpZiBhIGxpc3RlbmVyIGlzIGFkZGVkIHRvIGEgZGlzcG9zZWQgZW1pdHRlcj8gVGhpcyBoYXBwZW5zIG9mdGVuXG4gICAgICAgICAgICAgICAgcmV0dXJuIERpc3Bvc2FibGUuTm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzQXJncykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2suYmluZCh0aGlzQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250YWluZWQgPSBuZXcgVW5pcXVlQ29udGFpbmVyKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGxldCByZW1vdmVNb25pdG9yO1xuICAgICAgICAgICAgbGV0IHN0YWNrO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xlYWthZ2VNb24gJiYgdGhpcy5fc2l6ZSA+PSBNYXRoLmNlaWwodGhpcy5fbGVha2FnZU1vbi50aHJlc2hvbGQgKiAwLjIpKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgYW5kIHJlY29yZCB0aGlzIGVtaXR0ZXIgZm9yIHBvdGVudGlhbCBsZWFrYWdlXG4gICAgICAgICAgICAgICAgY29udGFpbmVkLnN0YWNrID0gU3RhY2t0cmFjZS5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICByZW1vdmVNb25pdG9yID0gdGhpcy5fbGVha2FnZU1vbi5jaGVjayhjb250YWluZWQuc3RhY2ssIHRoaXMuX3NpemUgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfZW5hYmxlRGlzcG9zZVdpdGhMaXN0ZW5lcldhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZWQuc3RhY2sgPSBzdGFjayAhPT0gbnVsbCAmJiBzdGFjayAhPT0gdm9pZCAwID8gc3RhY2sgOiBTdGFja3RyYWNlLmNyZWF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub25XaWxsQWRkRmlyc3RMaXN0ZW5lcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IGNvbnRhaW5lZDtcbiAgICAgICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Mub25EaWRBZGRGaXJzdExpc3RlbmVyKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9saXN0ZW5lcnMgaW5zdGFuY2VvZiBVbmlxdWVDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAoX2UgPSB0aGlzLl9kZWxpdmVyeVF1ZXVlKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAodGhpcy5fZGVsaXZlcnlRdWV1ZSA9IG5ldyBFdmVudERlbGl2ZXJ5UXVldWVQcml2YXRlKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFt0aGlzLl9saXN0ZW5lcnMsIGNvbnRhaW5lZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChjb250YWluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2l6ZSsrO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdG9EaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBfbGlzdGVuZXJGaW5hbGl6ZXJzID09PSBudWxsIHx8IF9saXN0ZW5lckZpbmFsaXplcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9saXN0ZW5lckZpbmFsaXplcnMudW5yZWdpc3RlcihyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJlbW92ZU1vbml0b3IgPT09IG51bGwgfHwgcmVtb3ZlTW9uaXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVtb3ZlTW9uaXRvcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVyKGNvbnRhaW5lZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChkaXNwb3NhYmxlcyBpbnN0YW5jZW9mIERpc3Bvc2FibGVTdG9yZSkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLmFkZChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkaXNwb3NhYmxlcykpIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NhYmxlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2xpc3RlbmVyRmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2suc3BsaXQoJ1xcbicpLnNsaWNlKDIpLmpvaW4oJ1xcbicpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBfbGlzdGVuZXJGaW5hbGl6ZXJzLnJlZ2lzdGVyKHJlc3VsdCwgc3RhY2ssIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50O1xuICAgIH1cbiAgICBfcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub25XaWxsUmVtb3ZlTGlzdGVuZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0aGlzKTtcbiAgICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gZXhwZWN0ZWQgaWYgYSBsaXN0ZW5lciBnZXRzIGRpc3Bvc2VkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3NpemUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIChfZCA9IChfYyA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5vbkRpZFJlbW92ZUxhc3RMaXN0ZW5lcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2l6ZSA+IDEgd2hpY2ggcmVxdWlyZXMgdGhhdCBsaXN0ZW5lcnMgYmUgYSBsaXN0OlxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZGlzcG9zZWQ/JywgdGhpcy5fZGlzcG9zZWQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NpemU/JywgdGhpcy5fc2l6ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYXJyPycsIEpTT04uc3RyaW5naWZ5KHRoaXMuX2xpc3RlbmVycykpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gZGlzcG9zZSB1bmtub3duIGxpc3RlbmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2l6ZS0tO1xuICAgICAgICBsaXN0ZW5lcnNbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBhZGp1c3REZWxpdmVyeVF1ZXVlID0gdGhpcy5fZGVsaXZlcnlRdWV1ZS5jdXJyZW50ID09PSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fc2l6ZSAqIGNvbXBhY3Rpb25UaHJlc2hvbGQgPD0gbGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IG4gPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tuKytdID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhZGp1c3REZWxpdmVyeVF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXJ5UXVldWUuZW5kLS07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuIDwgdGhpcy5fZGVsaXZlcnlRdWV1ZS5pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxpdmVyeVF1ZXVlLmktLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpc3RlbmVycy5sZW5ndGggPSBuO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9kZWxpdmVyKGxpc3RlbmVyLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcnJvckhhbmRsZXIgPSAoKF9hID0gdGhpcy5fb3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9uTGlzdGVuZXJFcnJvcikgfHwgb25VbmV4cGVjdGVkRXJyb3I7XG4gICAgICAgIGlmICghZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci52YWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpc3RlbmVyLnZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JIYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBEZWxpdmVycyBpdGVtcyBpbiB0aGUgcXVldWUuIEFzc3VtZXMgdGhlIHF1ZXVlIGlzIHJlYWR5IHRvIGdvLiAqL1xuICAgIF9kZWxpdmVyUXVldWUoZHEpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gZHEuY3VycmVudC5fbGlzdGVuZXJzO1xuICAgICAgICB3aGlsZSAoZHEuaSA8IGRxLmVuZCkge1xuICAgICAgICAgICAgLy8gaW1wb3J0YW50OiBkcS5pIGlzIGluY3JlbWVudGVkIGJlZm9yZSBjYWxsaW5nIGRlbGl2ZXIoKSBiZWNhdXNlIGl0IG1pZ2h0IHJlZW50ZXIgZGVsaXZlclF1ZXVlKClcbiAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXIobGlzdGVuZXJzW2RxLmkrK10sIGRxLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBkcS5yZXNldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUbyBiZSBrZXB0IHByaXZhdGUgdG8gZmlyZSBhbiBldmVudCB0b1xuICAgICAqIHN1YnNjcmliZXJzXG4gICAgICovXG4gICAgZmlyZShldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGlmICgoX2EgPSB0aGlzLl9kZWxpdmVyeVF1ZXVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZGVsaXZlclF1ZXVlKHRoaXMuX2RlbGl2ZXJ5UXVldWUpO1xuICAgICAgICAgICAgKF9iID0gdGhpcy5fcGVyZk1vbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN0b3AoKTsgLy8gbGFzdCBmaXJlKCkgd2lsbCBoYXZlIHN0YXJ0aW5nIHBlcmZtb24sIHN0b3AgaXQgYmVmb3JlIHN0YXJ0aW5nIHRoZSBuZXh0IGRpc3BhdGNoXG4gICAgICAgIH1cbiAgICAgICAgKF9jID0gdGhpcy5fcGVyZk1vbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnN0YXJ0KHRoaXMuX3NpemUpO1xuICAgICAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgICAgICAgLy8gbm8tb3BcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9saXN0ZW5lcnMgaW5zdGFuY2VvZiBVbmlxdWVDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXIodGhpcy5fbGlzdGVuZXJzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkcSA9IHRoaXMuX2RlbGl2ZXJ5UXVldWU7XG4gICAgICAgICAgICBkcS5lbnF1ZXVlKHRoaXMsIGV2ZW50LCB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXJRdWV1ZShkcSk7XG4gICAgICAgIH1cbiAgICAgICAgKF9kID0gdGhpcy5fcGVyZk1vbikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnN0b3AoKTtcbiAgICB9XG4gICAgaGFzTGlzdGVuZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZSA+IDA7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGNyZWF0ZUV2ZW50RGVsaXZlcnlRdWV1ZSA9ICgpID0+IG5ldyBFdmVudERlbGl2ZXJ5UXVldWVQcml2YXRlKCk7XG5jbGFzcyBFdmVudERlbGl2ZXJ5UXVldWVQcml2YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGV4IGluIGN1cnJlbnQncyBsaXN0ZW5lciBsaXN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pID0gLTE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGFzdCBpbmRleCBpbiB0aGUgbGlzdGVuZXIncyBsaXN0IHRvIGRlbGl2ZXIuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVuZCA9IDA7XG4gICAgfVxuICAgIGVucXVldWUoZW1pdHRlciwgdmFsdWUsIGVuZCkge1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gZW1pdHRlcjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5pID0gdGhpcy5lbmQ7IC8vIGZvcmNlIGFueSBjdXJyZW50IGVtaXNzaW9uIGxvb3AgdG8gc3RvcCwgbWFpbmx5IGZvciBkdXJpbmcgZGlzcG9zZVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBhdXNlYWJsZUVtaXR0ZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IDA7XG4gICAgICAgIHRoaXMuX2V2ZW50UXVldWUgPSBuZXcgTGlua2VkTGlzdCgpO1xuICAgICAgICB0aGlzLl9tZXJnZUZuID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1lcmdlO1xuICAgIH1cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQrKztcbiAgICB9XG4gICAgcmVzdW1lKCkge1xuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQgIT09IDAgJiYgLS10aGlzLl9pc1BhdXNlZCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21lcmdlRm4pIHtcbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIG1lcmdlIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHNpbmdsZSBjb21wb3NpdGVcbiAgICAgICAgICAgICAgICAvLyBldmVudC4gbWFrZSBhIGNvcHkgaW4gY2FzZSBmaXJpbmcgcGF1c2VzIHRoaXMgZW1pdHRlclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ldmVudFF1ZXVlLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50cyA9IEFycmF5LmZyb20odGhpcy5fZXZlbnRRdWV1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UXVldWUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZmlyZSh0aGlzLl9tZXJnZUZuKGV2ZW50cykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIG1lcmdpbmcsIGZpcmUgZWFjaCBldmVudCBpbmRpdmlkdWFsbHkgYW5kIHRlc3RcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHRoaXMgZW1pdHRlciBpc24ndCBwYXVzZWQgaGFsZndheSB0aHJvdWdoXG4gICAgICAgICAgICAgICAgd2hpbGUgKCF0aGlzLl9pc1BhdXNlZCAmJiB0aGlzLl9ldmVudFF1ZXVlLnNpemUgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZmlyZSh0aGlzLl9ldmVudFF1ZXVlLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXJlKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9zaXplKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQgIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudFF1ZXVlLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VwZXIuZmlyZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRGVib3VuY2VFbWl0dGVyIGV4dGVuZHMgUGF1c2VhYmxlRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9kZWxheSA9IChfYSA9IG9wdGlvbnMuZGVsYXkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEwMDtcbiAgICB9XG4gICAgZmlyZShldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hhbmRsZSkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdW1lKCk7XG4gICAgICAgICAgICB9LCB0aGlzLl9kZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZmlyZShldmVudCk7XG4gICAgfVxufVxuLyoqXG4gKiBBbiBlbWl0dGVyIHdoaWNoIHF1ZXVlIGFsbCBldmVudHMgYW5kIHRoZW4gcHJvY2VzcyB0aGVtIGF0IHRoZVxuICogZW5kIG9mIHRoZSBldmVudCBsb29wLlxuICovXG5leHBvcnQgY2xhc3MgTWljcm90YXNrRW1pdHRlciBleHRlbmRzIEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3F1ZXVlZEV2ZW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9tZXJnZUZuID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1lcmdlO1xuICAgIH1cbiAgICBmaXJlKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3F1ZXVlZEV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXVlZEV2ZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWVyZ2VGbikge1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5maXJlKHRoaXMuX21lcmdlRm4odGhpcy5fcXVldWVkRXZlbnRzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRFdmVudHMuZm9yRWFjaChlID0+IHN1cGVyLmZpcmUoZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRFdmVudHMgPSBbXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBbiBldmVudCBlbWl0dGVyIHRoYXQgbXVsdGlwbGV4ZXMgbWFueSBldmVudHMgaW50byBhIHNpbmdsZSBldmVudC5cbiAqXG4gKiBAZXhhbXBsZSBMaXN0ZW4gdG8gdGhlIGBvbkRhdGFgIGV2ZW50IG9mIGFsbCBgVGhpbmdgcywgZHluYW1pY2FsbHkgYWRkaW5nIGFuZCByZW1vdmluZyBgVGhpbmdgc1xuICogdG8gdGhlIG11bHRpcGxleGVyIGFzIG5lZWRlZC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBhbnl0aGluZ0RhdGFNdWx0aXBsZXhlciA9IG5ldyBFdmVudE11bHRpcGxleGVyPHsgZGF0YTogc3RyaW5nIH0+KCk7XG4gKlxuICogY29uc3QgdGhpbmdMaXN0ZW5lcnMgPSBEaXNwb3NhYmxlTWFwPFRoaW5nLCBJRGlzcG9zYWJsZT4oKTtcbiAqXG4gKiB0aGluZ1NlcnZpY2Uub25EaWRBZGRUaGluZyh0aGluZyA9PiB7XG4gKiAgIHRoaW5nTGlzdGVuZXJzLnNldCh0aGluZywgYW55dGhpbmdEYXRhTXVsdGlwbGV4ZXIuYWRkKHRoaW5nLm9uRGF0YSk7XG4gKiB9KTtcbiAqIHRoaW5nU2VydmljZS5vbkRpZFJlbW92ZVRoaW5nKHRoaW5nID0+IHtcbiAqICAgdGhpbmdMaXN0ZW5lcnMuZGVsZXRlQW5kRGlzcG9zZSh0aGluZyk7XG4gKiB9KTtcbiAqXG4gKiBhbnl0aGluZ0RhdGFNdWx0aXBsZXhlci5ldmVudChlID0+IHtcbiAqICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyBmaXJlZCBkYXRhICcgKyBlLmRhdGEpXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNdWx0aXBsZXhlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaGFzTGlzdGVuZXJzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKHtcbiAgICAgICAgICAgIG9uV2lsbEFkZEZpcnN0TGlzdGVuZXI6ICgpID0+IHRoaXMub25GaXJzdExpc3RlbmVyQWRkKCksXG4gICAgICAgICAgICBvbkRpZFJlbW92ZUxhc3RMaXN0ZW5lcjogKCkgPT4gdGhpcy5vbkxhc3RMaXN0ZW5lclJlbW92ZSgpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgZXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGFkZChldmVudCkge1xuICAgICAgICBjb25zdCBlID0geyBldmVudDogZXZlbnQsIGxpc3RlbmVyOiBudWxsIH07XG4gICAgICAgIHRoaXMuZXZlbnRzLnB1c2goZSk7XG4gICAgICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5ob29rKGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3Bvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuaG9vayhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuZXZlbnRzLmluZGV4T2YoZSk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRvRGlzcG9zYWJsZShjcmVhdGVTaW5nbGVDYWxsRnVuY3Rpb24oZGlzcG9zZSkpO1xuICAgIH1cbiAgICBvbkZpcnN0TGlzdGVuZXJBZGQoKSB7XG4gICAgICAgIHRoaXMuaGFzTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ldmVudHMuZm9yRWFjaChlID0+IHRoaXMuaG9vayhlKSk7XG4gICAgfVxuICAgIG9uTGFzdExpc3RlbmVyUmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmhhc0xpc3RlbmVycyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmV2ZW50cy5mb3JFYWNoKGUgPT4gdGhpcy51bmhvb2soZSkpO1xuICAgIH1cbiAgICBob29rKGUpIHtcbiAgICAgICAgZS5saXN0ZW5lciA9IGUuZXZlbnQociA9PiB0aGlzLmVtaXR0ZXIuZmlyZShyKSk7XG4gICAgfVxuICAgIHVuaG9vayhlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gZS5saXN0ZW5lcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UoKTtcbiAgICAgICAgZS5saXN0ZW5lciA9IG51bGw7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZXZlbnRzKSB7XG4gICAgICAgICAgICAoX2EgPSBlLmxpc3RlbmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgRXZlbnRCdWZmZXJlciBpcyB1c2VmdWwgaW4gc2l0dWF0aW9ucyBpbiB3aGljaCB5b3Ugd2FudFxuICogdG8gZGVsYXkgZmlyaW5nIHlvdXIgZXZlbnRzIGR1cmluZyBzb21lIGNvZGUuXG4gKiBZb3UgY2FuIHdyYXAgdGhhdCBjb2RlIGFuZCBiZSBzdXJlIHRoYXQgdGhlIGV2ZW50IHdpbGwgbm90XG4gKiBiZSBmaXJlZCBkdXJpbmcgdGhhdCB3cmFwLlxuICpcbiAqIGBgYFxuICogY29uc3QgZW1pdHRlcjogRW1pdHRlcjtcbiAqIGNvbnN0IGRlbGF5ZXIgPSBuZXcgRXZlbnREZWxheWVyKCk7XG4gKiBjb25zdCBkZWxheWVkRXZlbnQgPSBkZWxheWVyLndyYXBFdmVudChlbWl0dGVyLmV2ZW50KTtcbiAqXG4gKiBkZWxheWVkRXZlbnQoY29uc29sZS5sb2cpO1xuICpcbiAqIGRlbGF5ZXIuYnVmZmVyRXZlbnRzKCgpID0+IHtcbiAqICAgZW1pdHRlci5maXJlKCk7IC8vIGV2ZW50IHdpbGwgbm90IGJlIGZpcmVkIHlldFxuICogfSk7XG4gKlxuICogLy8gZXZlbnQgd2lsbCBvbmx5IGJlIGZpcmVkIGF0IHRoaXMgcG9pbnRcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRCdWZmZXJlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgIH1cbiAgICB3cmFwRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIChsaXN0ZW5lciwgdGhpc0FyZ3MsIGRpc3Bvc2FibGVzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQoaSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXJzW3RoaXMuYnVmZmVycy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKCgpID0+IGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIGkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgZGlzcG9zYWJsZXMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBidWZmZXJFdmVudHMoZm4pIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IHIgPSBmbigpO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucG9wKCk7XG4gICAgICAgIGJ1ZmZlci5mb3JFYWNoKGZsdXNoID0+IGZsdXNoKCkpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG59XG4vKipcbiAqIEEgUmVsYXkgaXMgYW4gZXZlbnQgZm9yd2FyZGVyIHdoaWNoIGZ1bmN0aW9ucyBhcyBhIHJlcGx1Z2FiYmxlIGV2ZW50IHBpcGUuXG4gKiBPbmNlIGNyZWF0ZWQsIHlvdSBjYW4gY29ubmVjdCBhbiBpbnB1dCBldmVudCB0byBpdCBhbmQgaXQgd2lsbCBzaW1wbHkgZm9yd2FyZFxuICogZXZlbnRzIGZyb20gdGhhdCBpbnB1dCBldmVudCB0aHJvdWdoIGl0cyBvd24gYGV2ZW50YCBwcm9wZXJ0eS4gVGhlIGBpbnB1dGBcbiAqIGNhbiBiZSBjaGFuZ2VkIGF0IGFueSBwb2ludCBpbiB0aW1lLlxuICovXG5leHBvcnQgY2xhc3MgUmVsYXkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlucHV0RXZlbnQgPSBFdmVudC5Ob25lO1xuICAgICAgICB0aGlzLmlucHV0RXZlbnRMaXN0ZW5lciA9IERpc3Bvc2FibGUuTm9uZTtcbiAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoe1xuICAgICAgICAgICAgb25EaWRBZGRGaXJzdExpc3RlbmVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFdmVudExpc3RlbmVyID0gdGhpcy5pbnB1dEV2ZW50KHRoaXMuZW1pdHRlci5maXJlLCB0aGlzLmVtaXR0ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRGlkUmVtb3ZlTGFzdExpc3RlbmVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0RXZlbnRMaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV2ZW50ID0gdGhpcy5lbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBzZXQgaW5wdXQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5pbnB1dEV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmluZykge1xuICAgICAgICAgICAgdGhpcy5pbnB1dEV2ZW50TGlzdGVuZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dEV2ZW50TGlzdGVuZXIgPSBldmVudCh0aGlzLmVtaXR0ZXIuZmlyZSwgdGhpcy5lbWl0dGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmlucHV0RXZlbnRMaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuZW1pdHRlci5kaXNwb3NlKCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIm9uVW5leHBlY3RlZEVycm9yIiwiY3JlYXRlU2luZ2xlQ2FsbEZ1bmN0aW9uIiwiY29tYmluZWREaXNwb3NhYmxlIiwiRGlzcG9zYWJsZSIsIkRpc3Bvc2FibGVTdG9yZSIsInRvRGlzcG9zYWJsZSIsIkxpbmtlZExpc3QiLCJTdG9wV2F0Y2giLCJfZW5hYmxlTGlzdGVuZXJHQ2VkV2FybmluZyIsIl9lbmFibGVEaXNwb3NlV2l0aExpc3RlbmVyV2FybmluZyIsIl9lbmFibGVTbmFwc2hvdFBvdGVudGlhbExlYWtXYXJuaW5nIiwiRXZlbnQiLCJOb25lIiwiX2FkZExlYWthZ2VUcmFjZUxvZ2ljIiwib3B0aW9ucyIsIm9uRGlkQWRkTGlzdGVuZXIiLCJvcmlnTGlzdGVuZXJEaWRBZGQiLCJzdGFjayIsIlN0YWNrdHJhY2UiLCJjcmVhdGUiLCJjb3VudCIsImNvbnNvbGUiLCJ3YXJuIiwicHJpbnQiLCJkZWZlciIsImV2ZW50IiwiZGlzcG9zYWJsZSIsImRlYm91bmNlIiwidW5kZWZpbmVkIiwib25jZSIsImxpc3RlbmVyIiwidGhpc0FyZ3MiLCJkaXNwb3NhYmxlcyIsImRpZEZpcmUiLCJyZXN1bHQiLCJlIiwiZGlzcG9zZSIsImNhbGwiLCJtYXAiLCJzbmFwc2hvdCIsImkiLCJmb3JFYWNoIiwiZWFjaCIsImZpbHRlciIsInNpZ25hbCIsImFueSIsImV2ZW50cyIsImFkZEFuZFJldHVybkRpc3Bvc2FibGUiLCJyZWR1Y2UiLCJtZXJnZSIsImluaXRpYWwiLCJvdXRwdXQiLCJvbldpbGxBZGRGaXJzdExpc3RlbmVyIiwiZW1pdHRlciIsImZpcmUiLCJvbkRpZFJlbW92ZUxhc3RMaXN0ZW5lciIsIkVtaXR0ZXIiLCJhZGQiLCJkIiwic3RvcmUiLCJBcnJheSIsInB1c2giLCJkZWxheSIsImxlYWRpbmciLCJmbHVzaE9uTGlzdGVuZXJSZW1vdmUiLCJsZWFrV2FybmluZ1RocmVzaG9sZCIsInN1YnNjcmlwdGlvbiIsImhhbmRsZSIsIm51bURlYm91bmNlZENhbGxzIiwiZG9GaXJlIiwiY3VyIiwiX291dHB1dCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJxdWV1ZU1pY3JvdGFzayIsIm9uV2lsbFJlbW92ZUxpc3RlbmVyIiwiYWNjdW11bGF0ZSIsImxhc3QiLCJsYXRjaCIsImVxdWFscyIsImEiLCJiIiwiZmlyc3RDYWxsIiwiY2FjaGUiLCJ2YWx1ZSIsInNob3VsZEVtaXQiLCJzcGxpdCIsImlzVCIsImJ1ZmZlciIsImZsdXNoQWZ0ZXJUaW1lb3V0IiwiX2J1ZmZlciIsInNsaWNlIiwiZmx1c2giLCJvbkRpZEFkZEZpcnN0TGlzdGVuZXIiLCJjaGFpbiIsInN5dGhlbnNpemUiLCJmbiIsImNzIiwiQ2hhaW5hYmxlU3ludGhlc2lzIiwiZXZhbHVhdGUiLCJIYWx0Q2hhaW5hYmxlIiwiU3ltYm9sIiwiY29uc3RydWN0b3IiLCJzdGVwcyIsInYiLCJzdGVwIiwiZnJvbU5vZGVFdmVudEVtaXR0ZXIiLCJldmVudE5hbWUiLCJpZCIsImFyZ3MiLCJvbkZpcnN0TGlzdGVuZXJBZGQiLCJvbiIsIm9uTGFzdExpc3RlbmVyUmVtb3ZlIiwicmVtb3ZlTGlzdGVuZXIiLCJmcm9tRE9NRXZlbnRFbWl0dGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b1Byb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZyb21Qcm9taXNlIiwicHJvbWlzZSIsInRoZW4iLCJyZXMiLCJmaW5hbGx5IiwicnVuQW5kU3Vic2NyaWJlIiwiaGFuZGxlciIsIkVtaXR0ZXJPYnNlcnZlciIsIl9vYnNlcnZhYmxlIiwiX2NvdW50ZXIiLCJfaGFzQ2hhbmdlZCIsImFkZE9ic2VydmVyIiwicmVtb3ZlT2JzZXJ2ZXIiLCJiZWdpblVwZGF0ZSIsImhhbmRsZVBvc3NpYmxlQ2hhbmdlIiwiaGFuZGxlQ2hhbmdlIiwiX2NoYW5nZSIsImVuZFVwZGF0ZSIsInJlcG9ydENoYW5nZXMiLCJnZXQiLCJmcm9tT2JzZXJ2YWJsZSIsIm9icyIsIm9ic2VydmVyIiwiZnJvbU9ic2VydmFibGVMaWdodCIsIm9ic2VydmFibGUiLCJkaWRDaGFuZ2UiLCJpc0FycmF5IiwiRXZlbnRQcm9maWxpbmciLCJuYW1lIiwibGlzdGVuZXJDb3VudCIsImludm9jYXRpb25Db3VudCIsImVsYXBzZWRPdmVyYWxsIiwiZHVyYXRpb25zIiwiX2lkUG9vbCIsImFsbCIsInN0YXJ0IiwiX3N0b3BXYXRjaCIsInN0b3AiLCJlbGFwc2VkIiwiU2V0IiwiX2dsb2JhbExlYWtXYXJuaW5nVGhyZXNob2xkIiwiTGVha2FnZU1vbml0b3IiLCJ0aHJlc2hvbGQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJfd2FybkNvdW50ZG93biIsIl9hIiwiX3N0YWNrcyIsImNsZWFyIiwiY2hlY2siLCJNYXAiLCJzZXQiLCJ0b3BTdGFjayIsInRvcENvdW50IiwiRXJyb3IiLCJqb2luIiwiVW5pcXVlQ29udGFpbmVyIiwiY29tcGFjdGlvblRocmVzaG9sZCIsImZvckVhY2hMaXN0ZW5lciIsImxpc3RlbmVycyIsImxlbmd0aCIsImwiLCJfbGlzdGVuZXJGaW5hbGl6ZXJzIiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJoZWxkVmFsdWUiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9zaXplIiwiX29wdGlvbnMiLCJfbGVha2FnZU1vbiIsIl9wZXJmTW9uIiwiX3Byb2ZOYW1lIiwiX2RlbGl2ZXJ5UXVldWUiLCJkZWxpdmVyeVF1ZXVlIiwiX2Rpc3Bvc2VkIiwiY3VycmVudCIsInJlc2V0IiwiX2xpc3RlbmVycyIsIl9ldmVudCIsImNhbGxiYWNrIiwiYmluZCIsImNvbnRhaW5lZCIsInJlbW92ZU1vbml0b3IiLCJjZWlsIiwiRXZlbnREZWxpdmVyeVF1ZXVlUHJpdmF0ZSIsInVucmVnaXN0ZXIiLCJfcmVtb3ZlTGlzdGVuZXIiLCJ0cmltIiwicmVnaXN0ZXIiLCJpbmRleCIsImluZGV4T2YiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiYWRqdXN0RGVsaXZlcnlRdWV1ZSIsIm4iLCJlbmQiLCJfZGVsaXZlciIsImVycm9ySGFuZGxlciIsIm9uTGlzdGVuZXJFcnJvciIsIl9kZWxpdmVyUXVldWUiLCJkcSIsImVucXVldWUiLCJoYXNMaXN0ZW5lcnMiLCJjcmVhdGVFdmVudERlbGl2ZXJ5UXVldWUiLCJQYXVzZWFibGVFbWl0dGVyIiwiX2lzUGF1c2VkIiwiX2V2ZW50UXVldWUiLCJfbWVyZ2VGbiIsInBhdXNlIiwicmVzdW1lIiwic2l6ZSIsImZyb20iLCJzaGlmdCIsIkRlYm91bmNlRW1pdHRlciIsIl9kZWxheSIsIl9oYW5kbGUiLCJNaWNyb3Rhc2tFbWl0dGVyIiwiX3F1ZXVlZEV2ZW50cyIsIkV2ZW50TXVsdGlwbGV4ZXIiLCJob29rIiwidW5ob29rIiwiaWR4Iiwic3BsaWNlIiwiciIsIkV2ZW50QnVmZmVyZXIiLCJidWZmZXJzIiwid3JhcEV2ZW50IiwiYnVmZmVyRXZlbnRzIiwicG9wIiwiUmVsYXkiLCJsaXN0ZW5pbmciLCJpbnB1dEV2ZW50IiwiaW5wdXRFdmVudExpc3RlbmVyIiwiaW5wdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/event.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/functional.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/functional.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createSingleCallFunction\": function() { return /* binding */ createSingleCallFunction; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Given a function, returns a function that is only calling that function once.\n */\nfunction createSingleCallFunction(fn, fnDidRunCallback) {\n  const _this = this;\n  let didCall = false;\n  let result;\n  return function () {\n    if (didCall) {\n      return result;\n    }\n    didCall = true;\n    if (fnDidRunCallback) {\n      try {\n        result = fn.apply(_this, arguments);\n      } finally {\n        fnDidRunCallback();\n      }\n    } else {\n      result = fn.apply(_this, arguments);\n    }\n    return result;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZnVuY3Rpb25hbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSx3QkFBd0JBLENBQUNDLEVBQUUsRUFBRUMsZ0JBQWdCLEVBQUU7RUFDM0QsTUFBTUMsS0FBSyxHQUFHLElBQUk7RUFDbEIsSUFBSUMsT0FBTyxHQUFHLEtBQUs7RUFDbkIsSUFBSUMsTUFBTTtFQUNWLE9BQU8sWUFBWTtJQUNmLElBQUlELE9BQU8sRUFBRTtNQUNULE9BQU9DLE1BQU07SUFDakI7SUFDQUQsT0FBTyxHQUFHLElBQUk7SUFDZCxJQUFJRixnQkFBZ0IsRUFBRTtNQUNsQixJQUFJO1FBQ0FHLE1BQU0sR0FBR0osRUFBRSxDQUFDSyxLQUFLLENBQUNILEtBQUssRUFBRUksU0FBUyxDQUFDO01BQ3ZDLENBQUMsU0FDTztRQUNKTCxnQkFBZ0IsQ0FBQyxDQUFDO01BQ3RCO0lBQ0osQ0FBQyxNQUNJO01BQ0RHLE1BQU0sR0FBR0osRUFBRSxDQUFDSyxLQUFLLENBQUNILEtBQUssRUFBRUksU0FBUyxDQUFDO0lBQ3ZDO0lBQ0EsT0FBT0YsTUFBTTtFQUNqQixDQUFDO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2Z1bmN0aW9uYWwuanM/ZmJlZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogR2l2ZW4gYSBmdW5jdGlvbiwgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgb25seSBjYWxsaW5nIHRoYXQgZnVuY3Rpb24gb25jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNpbmdsZUNhbGxGdW5jdGlvbihmbiwgZm5EaWRSdW5DYWxsYmFjaykge1xuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICBsZXQgZGlkQ2FsbCA9IGZhbHNlO1xuICAgIGxldCByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZENhbGwpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZGlkQ2FsbCA9IHRydWU7XG4gICAgICAgIGlmIChmbkRpZFJ1bkNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KF90aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgZm5EaWRSdW5DYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gZm4uYXBwbHkoX3RoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbImNyZWF0ZVNpbmdsZUNhbGxGdW5jdGlvbiIsImZuIiwiZm5EaWRSdW5DYWxsYmFjayIsIl90aGlzIiwiZGlkQ2FsbCIsInJlc3VsdCIsImFwcGx5IiwiYXJndW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/functional.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/hash.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/hash.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StringSHA1\": function() { return /* binding */ StringSHA1; },\n/* harmony export */   \"doHash\": function() { return /* binding */ doHash; },\n/* harmony export */   \"hash\": function() { return /* binding */ hash; },\n/* harmony export */   \"numberHash\": function() { return /* binding */ numberHash; },\n/* harmony export */   \"stringHash\": function() { return /* binding */ stringHash; },\n/* harmony export */   \"toHexString\": function() { return /* binding */ toHexString; }\n/* harmony export */ });\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Return a hash value for an object.\n */\nfunction hash(obj) {\n  return doHash(obj, 0);\n}\nfunction doHash(obj, hashVal) {\n  switch (typeof obj) {\n    case 'object':\n      if (obj === null) {\n        return numberHash(349, hashVal);\n      } else if (Array.isArray(obj)) {\n        return arrayHash(obj, hashVal);\n      }\n      return objectHash(obj, hashVal);\n    case 'string':\n      return stringHash(obj, hashVal);\n    case 'boolean':\n      return booleanHash(obj, hashVal);\n    case 'number':\n      return numberHash(obj, hashVal);\n    case 'undefined':\n      return numberHash(937, hashVal);\n    default:\n      return numberHash(617, hashVal);\n  }\n}\nfunction numberHash(val, initialHashVal) {\n  return (initialHashVal << 5) - initialHashVal + val | 0; // hashVal * 31 + ch, keep as int32\n}\nfunction booleanHash(b, initialHashVal) {\n  return numberHash(b ? 433 : 863, initialHashVal);\n}\nfunction stringHash(s, hashVal) {\n  hashVal = numberHash(149417, hashVal);\n  for (let i = 0, length = s.length; i < length; i++) {\n    hashVal = numberHash(s.charCodeAt(i), hashVal);\n  }\n  return hashVal;\n}\nfunction arrayHash(arr, initialHashVal) {\n  initialHashVal = numberHash(104579, initialHashVal);\n  return arr.reduce((hashVal, item) => doHash(item, hashVal), initialHashVal);\n}\nfunction objectHash(obj, initialHashVal) {\n  initialHashVal = numberHash(181387, initialHashVal);\n  return Object.keys(obj).sort().reduce((hashVal, key) => {\n    hashVal = stringHash(key, hashVal);\n    return doHash(obj[key], hashVal);\n  }, initialHashVal);\n}\nfunction leftRotate(value, bits, totalBits = 32) {\n  // delta + bits = totalBits\n  const delta = totalBits - bits;\n  // All ones, expect `delta` zeros aligned to the right\n  const mask = ~((1 << delta) - 1);\n  // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)\n  return (value << bits | (mask & value) >>> delta) >>> 0;\n}\nfunction fill(dest, index = 0, count = dest.byteLength, value = 0) {\n  for (let i = 0; i < count; i++) {\n    dest[index + i] = value;\n  }\n}\nfunction leftPad(value, length, char = '0') {\n  while (value.length < length) {\n    value = char + value;\n  }\n  return value;\n}\nfunction toHexString(bufferOrValue, bitsize = 32) {\n  if (bufferOrValue instanceof ArrayBuffer) {\n    return Array.from(new Uint8Array(bufferOrValue)).map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n  return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);\n}\n/**\n * A SHA1 implementation that works with strings and does not allocate.\n */\nclass StringSHA1 {\n  constructor() {\n    this._h0 = 0x67452301;\n    this._h1 = 0xEFCDAB89;\n    this._h2 = 0x98BADCFE;\n    this._h3 = 0x10325476;\n    this._h4 = 0xC3D2E1F0;\n    this._buff = new Uint8Array(64 /* SHA1Constant.BLOCK_SIZE */ + 3 /* to fit any utf-8 */);\n    this._buffDV = new DataView(this._buff.buffer);\n    this._buffLen = 0;\n    this._totalLen = 0;\n    this._leftoverHighSurrogate = 0;\n    this._finished = false;\n  }\n  update(str) {\n    const strLen = str.length;\n    if (strLen === 0) {\n      return;\n    }\n    const buff = this._buff;\n    let buffLen = this._buffLen;\n    let leftoverHighSurrogate = this._leftoverHighSurrogate;\n    let charCode;\n    let offset;\n    if (leftoverHighSurrogate !== 0) {\n      charCode = leftoverHighSurrogate;\n      offset = -1;\n      leftoverHighSurrogate = 0;\n    } else {\n      charCode = str.charCodeAt(0);\n      offset = 0;\n    }\n    while (true) {\n      let codePoint = charCode;\n      if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isHighSurrogate(charCode)) {\n        if (offset + 1 < strLen) {\n          const nextCharCode = str.charCodeAt(offset + 1);\n          if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(nextCharCode)) {\n            offset++;\n            codePoint = _strings_js__WEBPACK_IMPORTED_MODULE_0__.computeCodePoint(charCode, nextCharCode);\n          } else {\n            // illegal => unicode replacement character\n            codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;\n          }\n        } else {\n          // last character is a surrogate pair\n          leftoverHighSurrogate = charCode;\n          break;\n        }\n      } else if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(charCode)) {\n        // illegal => unicode replacement character\n        codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;\n      }\n      buffLen = this._push(buff, buffLen, codePoint);\n      offset++;\n      if (offset < strLen) {\n        charCode = str.charCodeAt(offset);\n      } else {\n        break;\n      }\n    }\n    this._buffLen = buffLen;\n    this._leftoverHighSurrogate = leftoverHighSurrogate;\n  }\n  _push(buff, buffLen, codePoint) {\n    if (codePoint < 0x0080) {\n      buff[buffLen++] = codePoint;\n    } else if (codePoint < 0x0800) {\n      buff[buffLen++] = 0b11000000 | (codePoint & 0b00000000000000000000011111000000) >>> 6;\n      buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000000000111111) >>> 0;\n    } else if (codePoint < 0x10000) {\n      buff[buffLen++] = 0b11100000 | (codePoint & 0b00000000000000001111000000000000) >>> 12;\n      buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000111111000000) >>> 6;\n      buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000000000111111) >>> 0;\n    } else {\n      buff[buffLen++] = 0b11110000 | (codePoint & 0b00000000000111000000000000000000) >>> 18;\n      buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000111111000000000000) >>> 12;\n      buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000111111000000) >>> 6;\n      buff[buffLen++] = 0b10000000 | (codePoint & 0b00000000000000000000000000111111) >>> 0;\n    }\n    if (buffLen >= 64 /* SHA1Constant.BLOCK_SIZE */) {\n      this._step();\n      buffLen -= 64 /* SHA1Constant.BLOCK_SIZE */;\n      this._totalLen += 64 /* SHA1Constant.BLOCK_SIZE */;\n      // take last 3 in case of UTF8 overflow\n      buff[0] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 0];\n      buff[1] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 1];\n      buff[2] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 2];\n    }\n    return buffLen;\n  }\n  digest() {\n    if (!this._finished) {\n      this._finished = true;\n      if (this._leftoverHighSurrogate) {\n        // illegal => unicode replacement character\n        this._leftoverHighSurrogate = 0;\n        this._buffLen = this._push(this._buff, this._buffLen, 65533 /* SHA1Constant.UNICODE_REPLACEMENT */);\n      }\n      this._totalLen += this._buffLen;\n      this._wrapUp();\n    }\n    return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);\n  }\n  _wrapUp() {\n    this._buff[this._buffLen++] = 0x80;\n    fill(this._buff, this._buffLen);\n    if (this._buffLen > 56) {\n      this._step();\n      fill(this._buff);\n    }\n    // this will fit because the mantissa can cover up to 52 bits\n    const ml = 8 * this._totalLen;\n    this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);\n    this._buffDV.setUint32(60, ml % 4294967296, false);\n    this._step();\n  }\n  _step() {\n    const bigBlock32 = StringSHA1._bigBlock32;\n    const data = this._buffDV;\n    for (let j = 0; j < 64 /* 16*4 */; j += 4) {\n      bigBlock32.setUint32(j, data.getUint32(j, false), false);\n    }\n    for (let j = 64; j < 320 /* 80*4 */; j += 4) {\n      bigBlock32.setUint32(j, leftRotate(bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false), 1), false);\n    }\n    let a = this._h0;\n    let b = this._h1;\n    let c = this._h2;\n    let d = this._h3;\n    let e = this._h4;\n    let f, k;\n    let temp;\n    for (let j = 0; j < 80; j++) {\n      if (j < 20) {\n        f = b & c | ~b & d;\n        k = 0x5A827999;\n      } else if (j < 40) {\n        f = b ^ c ^ d;\n        k = 0x6ED9EBA1;\n      } else if (j < 60) {\n        f = b & c | b & d | c & d;\n        k = 0x8F1BBCDC;\n      } else {\n        f = b ^ c ^ d;\n        k = 0xCA62C1D6;\n      }\n      temp = leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(j * 4, false) & 0xffffffff;\n      e = d;\n      d = c;\n      c = leftRotate(b, 30);\n      b = a;\n      a = temp;\n    }\n    this._h0 = this._h0 + a & 0xffffffff;\n    this._h1 = this._h1 + b & 0xffffffff;\n    this._h2 = this._h2 + c & 0xffffffff;\n    this._h3 = this._h3 + d & 0xffffffff;\n    this._h4 = this._h4 + e & 0xffffffff;\n  }\n}\nStringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320)); // 80 * 4 = 320//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/hash.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/iterator.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Iterable\": function() { return /* binding */ Iterable; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar Iterable;\n(function (Iterable) {\n  function is(thing) {\n    return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n  }\n  Iterable.is = is;\n  const _empty = Object.freeze([]);\n  function empty() {\n    return _empty;\n  }\n  Iterable.empty = empty;\n  function* single(element) {\n    yield element;\n  }\n  Iterable.single = single;\n  function wrap(iterableOrElement) {\n    if (is(iterableOrElement)) {\n      return iterableOrElement;\n    } else {\n      return single(iterableOrElement);\n    }\n  }\n  Iterable.wrap = wrap;\n  function from(iterable) {\n    return iterable || _empty;\n  }\n  Iterable.from = from;\n  function* reverse(array) {\n    for (let i = array.length - 1; i >= 0; i--) {\n      yield array[i];\n    }\n  }\n  Iterable.reverse = reverse;\n  function isEmpty(iterable) {\n    return !iterable || iterable[Symbol.iterator]().next().done === true;\n  }\n  Iterable.isEmpty = isEmpty;\n  function first(iterable) {\n    return iterable[Symbol.iterator]().next().value;\n  }\n  Iterable.first = first;\n  function some(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  Iterable.some = some;\n  function find(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        return element;\n      }\n    }\n    return undefined;\n  }\n  Iterable.find = find;\n  function* filter(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        yield element;\n      }\n    }\n  }\n  Iterable.filter = filter;\n  function* map(iterable, fn) {\n    let index = 0;\n    for (const element of iterable) {\n      yield fn(element, index++);\n    }\n  }\n  Iterable.map = map;\n  function* concat(...iterables) {\n    for (const iterable of iterables) {\n      yield* iterable;\n    }\n  }\n  Iterable.concat = concat;\n  function reduce(iterable, reducer, initialValue) {\n    let value = initialValue;\n    for (const element of iterable) {\n      value = reducer(value, element);\n    }\n    return value;\n  }\n  Iterable.reduce = reduce;\n  /**\n   * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n   */\n  function* slice(arr, from, to = arr.length) {\n    if (from < 0) {\n      from += arr.length;\n    }\n    if (to < 0) {\n      to += arr.length;\n    } else if (to > arr.length) {\n      to = arr.length;\n    }\n    for (; from < to; from++) {\n      yield arr[from];\n    }\n  }\n  Iterable.slice = slice;\n  /**\n   * Consumes `atMost` elements from iterable and returns the consumed elements,\n   * and an iterable for the rest of the elements.\n   */\n  function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\n    const consumed = [];\n    if (atMost === 0) {\n      return [consumed, iterable];\n    }\n    const iterator = iterable[Symbol.iterator]();\n    for (let i = 0; i < atMost; i++) {\n      const next = iterator.next();\n      if (next.done) {\n        return [consumed, Iterable.empty()];\n      }\n      consumed.push(next.value);\n    }\n    return [consumed, {\n      [Symbol.iterator]() {\n        return iterator;\n      }\n    }];\n  }\n  Iterable.consume = consume;\n  async function asyncToArray(iterable) {\n    const result = [];\n    for await (const item of iterable) {\n      result.push(item);\n    }\n    return Promise.resolve(result);\n  }\n  Iterable.asyncToArray = asyncToArray;\n})(Iterable || (Iterable = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/iterator.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EVENT_KEY_CODE_MAP\": function() { return /* binding */ EVENT_KEY_CODE_MAP; },\n/* harmony export */   \"IMMUTABLE_CODE_TO_KEY_CODE\": function() { return /* binding */ IMMUTABLE_CODE_TO_KEY_CODE; },\n/* harmony export */   \"IMMUTABLE_KEY_CODE_TO_CODE\": function() { return /* binding */ IMMUTABLE_KEY_CODE_TO_CODE; },\n/* harmony export */   \"KeyChord\": function() { return /* binding */ KeyChord; },\n/* harmony export */   \"KeyCodeUtils\": function() { return /* binding */ KeyCodeUtils; },\n/* harmony export */   \"NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE\": function() { return /* binding */ NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass KeyCodeStrMap {\n  constructor() {\n    this._keyCodeToStr = [];\n    this._strToKeyCode = Object.create(null);\n  }\n  define(keyCode, str) {\n    this._keyCodeToStr[keyCode] = str;\n    this._strToKeyCode[str.toLowerCase()] = keyCode;\n  }\n  keyCodeToStr(keyCode) {\n    return this._keyCodeToStr[keyCode];\n  }\n  strToKeyCode(str) {\n    return this._strToKeyCode[str.toLowerCase()] || 0 /* KeyCode.Unknown */;\n  }\n}\nconst uiMap = new KeyCodeStrMap();\nconst userSettingsUSMap = new KeyCodeStrMap();\nconst userSettingsGeneralMap = new KeyCodeStrMap();\nconst EVENT_KEY_CODE_MAP = new Array(230);\nconst NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE = {};\nconst scanCodeIntToStr = [];\nconst scanCodeStrToInt = Object.create(null);\nconst scanCodeLowerCaseStrToInt = Object.create(null);\n/**\n * -1 if a ScanCode => KeyCode mapping depends on kb layout.\n */\nconst IMMUTABLE_CODE_TO_KEY_CODE = [];\n/**\n * -1 if a KeyCode => ScanCode mapping depends on kb layout.\n */\nconst IMMUTABLE_KEY_CODE_TO_CODE = [];\nfor (let i = 0; i <= 193 /* ScanCode.MAX_VALUE */; i++) {\n  IMMUTABLE_CODE_TO_KEY_CODE[i] = -1 /* KeyCode.DependsOnKbLayout */;\n}\nfor (let i = 0; i <= 132 /* KeyCode.MAX_VALUE */; i++) {\n  IMMUTABLE_KEY_CODE_TO_CODE[i] = -1 /* ScanCode.DependsOnKbLayout */;\n}\n(function () {\n  // See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n  // See https://github.com/microsoft/node-native-keymap/blob/88c0b0e5/deps/chromium/keyboard_codes_win.h\n  const empty = '';\n  const mappings = [\n  // immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel\n  [1, 0 /* ScanCode.None */, 'None', 0 /* KeyCode.Unknown */, 'unknown', 0, 'VK_UNKNOWN', empty, empty], [1, 1 /* ScanCode.Hyper */, 'Hyper', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 2 /* ScanCode.Super */, 'Super', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 3 /* ScanCode.Fn */, 'Fn', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 4 /* ScanCode.FnLock */, 'FnLock', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 5 /* ScanCode.Suspend */, 'Suspend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 6 /* ScanCode.Resume */, 'Resume', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 7 /* ScanCode.Turbo */, 'Turbo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 8 /* ScanCode.Sleep */, 'Sleep', 0 /* KeyCode.Unknown */, empty, 0, 'VK_SLEEP', empty, empty], [1, 9 /* ScanCode.WakeUp */, 'WakeUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [0, 10 /* ScanCode.KeyA */, 'KeyA', 31 /* KeyCode.KeyA */, 'A', 65, 'VK_A', empty, empty], [0, 11 /* ScanCode.KeyB */, 'KeyB', 32 /* KeyCode.KeyB */, 'B', 66, 'VK_B', empty, empty], [0, 12 /* ScanCode.KeyC */, 'KeyC', 33 /* KeyCode.KeyC */, 'C', 67, 'VK_C', empty, empty], [0, 13 /* ScanCode.KeyD */, 'KeyD', 34 /* KeyCode.KeyD */, 'D', 68, 'VK_D', empty, empty], [0, 14 /* ScanCode.KeyE */, 'KeyE', 35 /* KeyCode.KeyE */, 'E', 69, 'VK_E', empty, empty], [0, 15 /* ScanCode.KeyF */, 'KeyF', 36 /* KeyCode.KeyF */, 'F', 70, 'VK_F', empty, empty], [0, 16 /* ScanCode.KeyG */, 'KeyG', 37 /* KeyCode.KeyG */, 'G', 71, 'VK_G', empty, empty], [0, 17 /* ScanCode.KeyH */, 'KeyH', 38 /* KeyCode.KeyH */, 'H', 72, 'VK_H', empty, empty], [0, 18 /* ScanCode.KeyI */, 'KeyI', 39 /* KeyCode.KeyI */, 'I', 73, 'VK_I', empty, empty], [0, 19 /* ScanCode.KeyJ */, 'KeyJ', 40 /* KeyCode.KeyJ */, 'J', 74, 'VK_J', empty, empty], [0, 20 /* ScanCode.KeyK */, 'KeyK', 41 /* KeyCode.KeyK */, 'K', 75, 'VK_K', empty, empty], [0, 21 /* ScanCode.KeyL */, 'KeyL', 42 /* KeyCode.KeyL */, 'L', 76, 'VK_L', empty, empty], [0, 22 /* ScanCode.KeyM */, 'KeyM', 43 /* KeyCode.KeyM */, 'M', 77, 'VK_M', empty, empty], [0, 23 /* ScanCode.KeyN */, 'KeyN', 44 /* KeyCode.KeyN */, 'N', 78, 'VK_N', empty, empty], [0, 24 /* ScanCode.KeyO */, 'KeyO', 45 /* KeyCode.KeyO */, 'O', 79, 'VK_O', empty, empty], [0, 25 /* ScanCode.KeyP */, 'KeyP', 46 /* KeyCode.KeyP */, 'P', 80, 'VK_P', empty, empty], [0, 26 /* ScanCode.KeyQ */, 'KeyQ', 47 /* KeyCode.KeyQ */, 'Q', 81, 'VK_Q', empty, empty], [0, 27 /* ScanCode.KeyR */, 'KeyR', 48 /* KeyCode.KeyR */, 'R', 82, 'VK_R', empty, empty], [0, 28 /* ScanCode.KeyS */, 'KeyS', 49 /* KeyCode.KeyS */, 'S', 83, 'VK_S', empty, empty], [0, 29 /* ScanCode.KeyT */, 'KeyT', 50 /* KeyCode.KeyT */, 'T', 84, 'VK_T', empty, empty], [0, 30 /* ScanCode.KeyU */, 'KeyU', 51 /* KeyCode.KeyU */, 'U', 85, 'VK_U', empty, empty], [0, 31 /* ScanCode.KeyV */, 'KeyV', 52 /* KeyCode.KeyV */, 'V', 86, 'VK_V', empty, empty], [0, 32 /* ScanCode.KeyW */, 'KeyW', 53 /* KeyCode.KeyW */, 'W', 87, 'VK_W', empty, empty], [0, 33 /* ScanCode.KeyX */, 'KeyX', 54 /* KeyCode.KeyX */, 'X', 88, 'VK_X', empty, empty], [0, 34 /* ScanCode.KeyY */, 'KeyY', 55 /* KeyCode.KeyY */, 'Y', 89, 'VK_Y', empty, empty], [0, 35 /* ScanCode.KeyZ */, 'KeyZ', 56 /* KeyCode.KeyZ */, 'Z', 90, 'VK_Z', empty, empty], [0, 36 /* ScanCode.Digit1 */, 'Digit1', 22 /* KeyCode.Digit1 */, '1', 49, 'VK_1', empty, empty], [0, 37 /* ScanCode.Digit2 */, 'Digit2', 23 /* KeyCode.Digit2 */, '2', 50, 'VK_2', empty, empty], [0, 38 /* ScanCode.Digit3 */, 'Digit3', 24 /* KeyCode.Digit3 */, '3', 51, 'VK_3', empty, empty], [0, 39 /* ScanCode.Digit4 */, 'Digit4', 25 /* KeyCode.Digit4 */, '4', 52, 'VK_4', empty, empty], [0, 40 /* ScanCode.Digit5 */, 'Digit5', 26 /* KeyCode.Digit5 */, '5', 53, 'VK_5', empty, empty], [0, 41 /* ScanCode.Digit6 */, 'Digit6', 27 /* KeyCode.Digit6 */, '6', 54, 'VK_6', empty, empty], [0, 42 /* ScanCode.Digit7 */, 'Digit7', 28 /* KeyCode.Digit7 */, '7', 55, 'VK_7', empty, empty], [0, 43 /* ScanCode.Digit8 */, 'Digit8', 29 /* KeyCode.Digit8 */, '8', 56, 'VK_8', empty, empty], [0, 44 /* ScanCode.Digit9 */, 'Digit9', 30 /* KeyCode.Digit9 */, '9', 57, 'VK_9', empty, empty], [0, 45 /* ScanCode.Digit0 */, 'Digit0', 21 /* KeyCode.Digit0 */, '0', 48, 'VK_0', empty, empty], [1, 46 /* ScanCode.Enter */, 'Enter', 3 /* KeyCode.Enter */, 'Enter', 13, 'VK_RETURN', empty, empty], [1, 47 /* ScanCode.Escape */, 'Escape', 9 /* KeyCode.Escape */, 'Escape', 27, 'VK_ESCAPE', empty, empty], [1, 48 /* ScanCode.Backspace */, 'Backspace', 1 /* KeyCode.Backspace */, 'Backspace', 8, 'VK_BACK', empty, empty], [1, 49 /* ScanCode.Tab */, 'Tab', 2 /* KeyCode.Tab */, 'Tab', 9, 'VK_TAB', empty, empty], [1, 50 /* ScanCode.Space */, 'Space', 10 /* KeyCode.Space */, 'Space', 32, 'VK_SPACE', empty, empty], [0, 51 /* ScanCode.Minus */, 'Minus', 88 /* KeyCode.Minus */, '-', 189, 'VK_OEM_MINUS', '-', 'OEM_MINUS'], [0, 52 /* ScanCode.Equal */, 'Equal', 86 /* KeyCode.Equal */, '=', 187, 'VK_OEM_PLUS', '=', 'OEM_PLUS'], [0, 53 /* ScanCode.BracketLeft */, 'BracketLeft', 92 /* KeyCode.BracketLeft */, '[', 219, 'VK_OEM_4', '[', 'OEM_4'], [0, 54 /* ScanCode.BracketRight */, 'BracketRight', 94 /* KeyCode.BracketRight */, ']', 221, 'VK_OEM_6', ']', 'OEM_6'], [0, 55 /* ScanCode.Backslash */, 'Backslash', 93 /* KeyCode.Backslash */, '\\\\', 220, 'VK_OEM_5', '\\\\', 'OEM_5'], [0, 56 /* ScanCode.IntlHash */, 'IntlHash', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n  // has been dropped from the w3c spec\n  [0, 57 /* ScanCode.Semicolon */, 'Semicolon', 85 /* KeyCode.Semicolon */, ';', 186, 'VK_OEM_1', ';', 'OEM_1'], [0, 58 /* ScanCode.Quote */, 'Quote', 95 /* KeyCode.Quote */, '\\'', 222, 'VK_OEM_7', '\\'', 'OEM_7'], [0, 59 /* ScanCode.Backquote */, 'Backquote', 91 /* KeyCode.Backquote */, '`', 192, 'VK_OEM_3', '`', 'OEM_3'], [0, 60 /* ScanCode.Comma */, 'Comma', 87 /* KeyCode.Comma */, ',', 188, 'VK_OEM_COMMA', ',', 'OEM_COMMA'], [0, 61 /* ScanCode.Period */, 'Period', 89 /* KeyCode.Period */, '.', 190, 'VK_OEM_PERIOD', '.', 'OEM_PERIOD'], [0, 62 /* ScanCode.Slash */, 'Slash', 90 /* KeyCode.Slash */, '/', 191, 'VK_OEM_2', '/', 'OEM_2'], [1, 63 /* ScanCode.CapsLock */, 'CapsLock', 8 /* KeyCode.CapsLock */, 'CapsLock', 20, 'VK_CAPITAL', empty, empty], [1, 64 /* ScanCode.F1 */, 'F1', 59 /* KeyCode.F1 */, 'F1', 112, 'VK_F1', empty, empty], [1, 65 /* ScanCode.F2 */, 'F2', 60 /* KeyCode.F2 */, 'F2', 113, 'VK_F2', empty, empty], [1, 66 /* ScanCode.F3 */, 'F3', 61 /* KeyCode.F3 */, 'F3', 114, 'VK_F3', empty, empty], [1, 67 /* ScanCode.F4 */, 'F4', 62 /* KeyCode.F4 */, 'F4', 115, 'VK_F4', empty, empty], [1, 68 /* ScanCode.F5 */, 'F5', 63 /* KeyCode.F5 */, 'F5', 116, 'VK_F5', empty, empty], [1, 69 /* ScanCode.F6 */, 'F6', 64 /* KeyCode.F6 */, 'F6', 117, 'VK_F6', empty, empty], [1, 70 /* ScanCode.F7 */, 'F7', 65 /* KeyCode.F7 */, 'F7', 118, 'VK_F7', empty, empty], [1, 71 /* ScanCode.F8 */, 'F8', 66 /* KeyCode.F8 */, 'F8', 119, 'VK_F8', empty, empty], [1, 72 /* ScanCode.F9 */, 'F9', 67 /* KeyCode.F9 */, 'F9', 120, 'VK_F9', empty, empty], [1, 73 /* ScanCode.F10 */, 'F10', 68 /* KeyCode.F10 */, 'F10', 121, 'VK_F10', empty, empty], [1, 74 /* ScanCode.F11 */, 'F11', 69 /* KeyCode.F11 */, 'F11', 122, 'VK_F11', empty, empty], [1, 75 /* ScanCode.F12 */, 'F12', 70 /* KeyCode.F12 */, 'F12', 123, 'VK_F12', empty, empty], [1, 76 /* ScanCode.PrintScreen */, 'PrintScreen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 77 /* ScanCode.ScrollLock */, 'ScrollLock', 84 /* KeyCode.ScrollLock */, 'ScrollLock', 145, 'VK_SCROLL', empty, empty], [1, 78 /* ScanCode.Pause */, 'Pause', 7 /* KeyCode.PauseBreak */, 'PauseBreak', 19, 'VK_PAUSE', empty, empty], [1, 79 /* ScanCode.Insert */, 'Insert', 19 /* KeyCode.Insert */, 'Insert', 45, 'VK_INSERT', empty, empty], [1, 80 /* ScanCode.Home */, 'Home', 14 /* KeyCode.Home */, 'Home', 36, 'VK_HOME', empty, empty], [1, 81 /* ScanCode.PageUp */, 'PageUp', 11 /* KeyCode.PageUp */, 'PageUp', 33, 'VK_PRIOR', empty, empty], [1, 82 /* ScanCode.Delete */, 'Delete', 20 /* KeyCode.Delete */, 'Delete', 46, 'VK_DELETE', empty, empty], [1, 83 /* ScanCode.End */, 'End', 13 /* KeyCode.End */, 'End', 35, 'VK_END', empty, empty], [1, 84 /* ScanCode.PageDown */, 'PageDown', 12 /* KeyCode.PageDown */, 'PageDown', 34, 'VK_NEXT', empty, empty], [1, 85 /* ScanCode.ArrowRight */, 'ArrowRight', 17 /* KeyCode.RightArrow */, 'RightArrow', 39, 'VK_RIGHT', 'Right', empty], [1, 86 /* ScanCode.ArrowLeft */, 'ArrowLeft', 15 /* KeyCode.LeftArrow */, 'LeftArrow', 37, 'VK_LEFT', 'Left', empty], [1, 87 /* ScanCode.ArrowDown */, 'ArrowDown', 18 /* KeyCode.DownArrow */, 'DownArrow', 40, 'VK_DOWN', 'Down', empty], [1, 88 /* ScanCode.ArrowUp */, 'ArrowUp', 16 /* KeyCode.UpArrow */, 'UpArrow', 38, 'VK_UP', 'Up', empty], [1, 89 /* ScanCode.NumLock */, 'NumLock', 83 /* KeyCode.NumLock */, 'NumLock', 144, 'VK_NUMLOCK', empty, empty], [1, 90 /* ScanCode.NumpadDivide */, 'NumpadDivide', 113 /* KeyCode.NumpadDivide */, 'NumPad_Divide', 111, 'VK_DIVIDE', empty, empty], [1, 91 /* ScanCode.NumpadMultiply */, 'NumpadMultiply', 108 /* KeyCode.NumpadMultiply */, 'NumPad_Multiply', 106, 'VK_MULTIPLY', empty, empty], [1, 92 /* ScanCode.NumpadSubtract */, 'NumpadSubtract', 111 /* KeyCode.NumpadSubtract */, 'NumPad_Subtract', 109, 'VK_SUBTRACT', empty, empty], [1, 93 /* ScanCode.NumpadAdd */, 'NumpadAdd', 109 /* KeyCode.NumpadAdd */, 'NumPad_Add', 107, 'VK_ADD', empty, empty], [1, 94 /* ScanCode.NumpadEnter */, 'NumpadEnter', 3 /* KeyCode.Enter */, empty, 0, empty, empty, empty], [1, 95 /* ScanCode.Numpad1 */, 'Numpad1', 99 /* KeyCode.Numpad1 */, 'NumPad1', 97, 'VK_NUMPAD1', empty, empty], [1, 96 /* ScanCode.Numpad2 */, 'Numpad2', 100 /* KeyCode.Numpad2 */, 'NumPad2', 98, 'VK_NUMPAD2', empty, empty], [1, 97 /* ScanCode.Numpad3 */, 'Numpad3', 101 /* KeyCode.Numpad3 */, 'NumPad3', 99, 'VK_NUMPAD3', empty, empty], [1, 98 /* ScanCode.Numpad4 */, 'Numpad4', 102 /* KeyCode.Numpad4 */, 'NumPad4', 100, 'VK_NUMPAD4', empty, empty], [1, 99 /* ScanCode.Numpad5 */, 'Numpad5', 103 /* KeyCode.Numpad5 */, 'NumPad5', 101, 'VK_NUMPAD5', empty, empty], [1, 100 /* ScanCode.Numpad6 */, 'Numpad6', 104 /* KeyCode.Numpad6 */, 'NumPad6', 102, 'VK_NUMPAD6', empty, empty], [1, 101 /* ScanCode.Numpad7 */, 'Numpad7', 105 /* KeyCode.Numpad7 */, 'NumPad7', 103, 'VK_NUMPAD7', empty, empty], [1, 102 /* ScanCode.Numpad8 */, 'Numpad8', 106 /* KeyCode.Numpad8 */, 'NumPad8', 104, 'VK_NUMPAD8', empty, empty], [1, 103 /* ScanCode.Numpad9 */, 'Numpad9', 107 /* KeyCode.Numpad9 */, 'NumPad9', 105, 'VK_NUMPAD9', empty, empty], [1, 104 /* ScanCode.Numpad0 */, 'Numpad0', 98 /* KeyCode.Numpad0 */, 'NumPad0', 96, 'VK_NUMPAD0', empty, empty], [1, 105 /* ScanCode.NumpadDecimal */, 'NumpadDecimal', 112 /* KeyCode.NumpadDecimal */, 'NumPad_Decimal', 110, 'VK_DECIMAL', empty, empty], [0, 106 /* ScanCode.IntlBackslash */, 'IntlBackslash', 97 /* KeyCode.IntlBackslash */, 'OEM_102', 226, 'VK_OEM_102', empty, empty], [1, 107 /* ScanCode.ContextMenu */, 'ContextMenu', 58 /* KeyCode.ContextMenu */, 'ContextMenu', 93, empty, empty, empty], [1, 108 /* ScanCode.Power */, 'Power', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 109 /* ScanCode.NumpadEqual */, 'NumpadEqual', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 110 /* ScanCode.F13 */, 'F13', 71 /* KeyCode.F13 */, 'F13', 124, 'VK_F13', empty, empty], [1, 111 /* ScanCode.F14 */, 'F14', 72 /* KeyCode.F14 */, 'F14', 125, 'VK_F14', empty, empty], [1, 112 /* ScanCode.F15 */, 'F15', 73 /* KeyCode.F15 */, 'F15', 126, 'VK_F15', empty, empty], [1, 113 /* ScanCode.F16 */, 'F16', 74 /* KeyCode.F16 */, 'F16', 127, 'VK_F16', empty, empty], [1, 114 /* ScanCode.F17 */, 'F17', 75 /* KeyCode.F17 */, 'F17', 128, 'VK_F17', empty, empty], [1, 115 /* ScanCode.F18 */, 'F18', 76 /* KeyCode.F18 */, 'F18', 129, 'VK_F18', empty, empty], [1, 116 /* ScanCode.F19 */, 'F19', 77 /* KeyCode.F19 */, 'F19', 130, 'VK_F19', empty, empty], [1, 117 /* ScanCode.F20 */, 'F20', 78 /* KeyCode.F20 */, 'F20', 131, 'VK_F20', empty, empty], [1, 118 /* ScanCode.F21 */, 'F21', 79 /* KeyCode.F21 */, 'F21', 132, 'VK_F21', empty, empty], [1, 119 /* ScanCode.F22 */, 'F22', 80 /* KeyCode.F22 */, 'F22', 133, 'VK_F22', empty, empty], [1, 120 /* ScanCode.F23 */, 'F23', 81 /* KeyCode.F23 */, 'F23', 134, 'VK_F23', empty, empty], [1, 121 /* ScanCode.F24 */, 'F24', 82 /* KeyCode.F24 */, 'F24', 135, 'VK_F24', empty, empty], [1, 122 /* ScanCode.Open */, 'Open', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 123 /* ScanCode.Help */, 'Help', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 124 /* ScanCode.Select */, 'Select', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 125 /* ScanCode.Again */, 'Again', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 126 /* ScanCode.Undo */, 'Undo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 127 /* ScanCode.Cut */, 'Cut', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 128 /* ScanCode.Copy */, 'Copy', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 129 /* ScanCode.Paste */, 'Paste', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 130 /* ScanCode.Find */, 'Find', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 131 /* ScanCode.AudioVolumeMute */, 'AudioVolumeMute', 117 /* KeyCode.AudioVolumeMute */, 'AudioVolumeMute', 173, 'VK_VOLUME_MUTE', empty, empty], [1, 132 /* ScanCode.AudioVolumeUp */, 'AudioVolumeUp', 118 /* KeyCode.AudioVolumeUp */, 'AudioVolumeUp', 175, 'VK_VOLUME_UP', empty, empty], [1, 133 /* ScanCode.AudioVolumeDown */, 'AudioVolumeDown', 119 /* KeyCode.AudioVolumeDown */, 'AudioVolumeDown', 174, 'VK_VOLUME_DOWN', empty, empty], [1, 134 /* ScanCode.NumpadComma */, 'NumpadComma', 110 /* KeyCode.NUMPAD_SEPARATOR */, 'NumPad_Separator', 108, 'VK_SEPARATOR', empty, empty], [0, 135 /* ScanCode.IntlRo */, 'IntlRo', 115 /* KeyCode.ABNT_C1 */, 'ABNT_C1', 193, 'VK_ABNT_C1', empty, empty], [1, 136 /* ScanCode.KanaMode */, 'KanaMode', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [0, 137 /* ScanCode.IntlYen */, 'IntlYen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 138 /* ScanCode.Convert */, 'Convert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 139 /* ScanCode.NonConvert */, 'NonConvert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 140 /* ScanCode.Lang1 */, 'Lang1', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 141 /* ScanCode.Lang2 */, 'Lang2', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 142 /* ScanCode.Lang3 */, 'Lang3', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 143 /* ScanCode.Lang4 */, 'Lang4', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 144 /* ScanCode.Lang5 */, 'Lang5', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 145 /* ScanCode.Abort */, 'Abort', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 146 /* ScanCode.Props */, 'Props', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 147 /* ScanCode.NumpadParenLeft */, 'NumpadParenLeft', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 148 /* ScanCode.NumpadParenRight */, 'NumpadParenRight', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 149 /* ScanCode.NumpadBackspace */, 'NumpadBackspace', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 150 /* ScanCode.NumpadMemoryStore */, 'NumpadMemoryStore', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 151 /* ScanCode.NumpadMemoryRecall */, 'NumpadMemoryRecall', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 152 /* ScanCode.NumpadMemoryClear */, 'NumpadMemoryClear', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 153 /* ScanCode.NumpadMemoryAdd */, 'NumpadMemoryAdd', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 154 /* ScanCode.NumpadMemorySubtract */, 'NumpadMemorySubtract', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 155 /* ScanCode.NumpadClear */, 'NumpadClear', 131 /* KeyCode.Clear */, 'Clear', 12, 'VK_CLEAR', empty, empty], [1, 156 /* ScanCode.NumpadClearEntry */, 'NumpadClearEntry', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 0 /* ScanCode.None */, empty, 5 /* KeyCode.Ctrl */, 'Ctrl', 17, 'VK_CONTROL', empty, empty], [1, 0 /* ScanCode.None */, empty, 4 /* KeyCode.Shift */, 'Shift', 16, 'VK_SHIFT', empty, empty], [1, 0 /* ScanCode.None */, empty, 6 /* KeyCode.Alt */, 'Alt', 18, 'VK_MENU', empty, empty], [1, 0 /* ScanCode.None */, empty, 57 /* KeyCode.Meta */, 'Meta', 91, 'VK_COMMAND', empty, empty], [1, 157 /* ScanCode.ControlLeft */, 'ControlLeft', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_LCONTROL', empty, empty], [1, 158 /* ScanCode.ShiftLeft */, 'ShiftLeft', 4 /* KeyCode.Shift */, empty, 0, 'VK_LSHIFT', empty, empty], [1, 159 /* ScanCode.AltLeft */, 'AltLeft', 6 /* KeyCode.Alt */, empty, 0, 'VK_LMENU', empty, empty], [1, 160 /* ScanCode.MetaLeft */, 'MetaLeft', 57 /* KeyCode.Meta */, empty, 0, 'VK_LWIN', empty, empty], [1, 161 /* ScanCode.ControlRight */, 'ControlRight', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_RCONTROL', empty, empty], [1, 162 /* ScanCode.ShiftRight */, 'ShiftRight', 4 /* KeyCode.Shift */, empty, 0, 'VK_RSHIFT', empty, empty], [1, 163 /* ScanCode.AltRight */, 'AltRight', 6 /* KeyCode.Alt */, empty, 0, 'VK_RMENU', empty, empty], [1, 164 /* ScanCode.MetaRight */, 'MetaRight', 57 /* KeyCode.Meta */, empty, 0, 'VK_RWIN', empty, empty], [1, 165 /* ScanCode.BrightnessUp */, 'BrightnessUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 166 /* ScanCode.BrightnessDown */, 'BrightnessDown', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 167 /* ScanCode.MediaPlay */, 'MediaPlay', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 168 /* ScanCode.MediaRecord */, 'MediaRecord', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 169 /* ScanCode.MediaFastForward */, 'MediaFastForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 170 /* ScanCode.MediaRewind */, 'MediaRewind', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 171 /* ScanCode.MediaTrackNext */, 'MediaTrackNext', 124 /* KeyCode.MediaTrackNext */, 'MediaTrackNext', 176, 'VK_MEDIA_NEXT_TRACK', empty, empty], [1, 172 /* ScanCode.MediaTrackPrevious */, 'MediaTrackPrevious', 125 /* KeyCode.MediaTrackPrevious */, 'MediaTrackPrevious', 177, 'VK_MEDIA_PREV_TRACK', empty, empty], [1, 173 /* ScanCode.MediaStop */, 'MediaStop', 126 /* KeyCode.MediaStop */, 'MediaStop', 178, 'VK_MEDIA_STOP', empty, empty], [1, 174 /* ScanCode.Eject */, 'Eject', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 175 /* ScanCode.MediaPlayPause */, 'MediaPlayPause', 127 /* KeyCode.MediaPlayPause */, 'MediaPlayPause', 179, 'VK_MEDIA_PLAY_PAUSE', empty, empty], [1, 176 /* ScanCode.MediaSelect */, 'MediaSelect', 128 /* KeyCode.LaunchMediaPlayer */, 'LaunchMediaPlayer', 181, 'VK_MEDIA_LAUNCH_MEDIA_SELECT', empty, empty], [1, 177 /* ScanCode.LaunchMail */, 'LaunchMail', 129 /* KeyCode.LaunchMail */, 'LaunchMail', 180, 'VK_MEDIA_LAUNCH_MAIL', empty, empty], [1, 178 /* ScanCode.LaunchApp2 */, 'LaunchApp2', 130 /* KeyCode.LaunchApp2 */, 'LaunchApp2', 183, 'VK_MEDIA_LAUNCH_APP2', empty, empty], [1, 179 /* ScanCode.LaunchApp1 */, 'LaunchApp1', 0 /* KeyCode.Unknown */, empty, 0, 'VK_MEDIA_LAUNCH_APP1', empty, empty], [1, 180 /* ScanCode.SelectTask */, 'SelectTask', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 181 /* ScanCode.LaunchScreenSaver */, 'LaunchScreenSaver', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 182 /* ScanCode.BrowserSearch */, 'BrowserSearch', 120 /* KeyCode.BrowserSearch */, 'BrowserSearch', 170, 'VK_BROWSER_SEARCH', empty, empty], [1, 183 /* ScanCode.BrowserHome */, 'BrowserHome', 121 /* KeyCode.BrowserHome */, 'BrowserHome', 172, 'VK_BROWSER_HOME', empty, empty], [1, 184 /* ScanCode.BrowserBack */, 'BrowserBack', 122 /* KeyCode.BrowserBack */, 'BrowserBack', 166, 'VK_BROWSER_BACK', empty, empty], [1, 185 /* ScanCode.BrowserForward */, 'BrowserForward', 123 /* KeyCode.BrowserForward */, 'BrowserForward', 167, 'VK_BROWSER_FORWARD', empty, empty], [1, 186 /* ScanCode.BrowserStop */, 'BrowserStop', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_STOP', empty, empty], [1, 187 /* ScanCode.BrowserRefresh */, 'BrowserRefresh', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_REFRESH', empty, empty], [1, 188 /* ScanCode.BrowserFavorites */, 'BrowserFavorites', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_FAVORITES', empty, empty], [1, 189 /* ScanCode.ZoomToggle */, 'ZoomToggle', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 190 /* ScanCode.MailReply */, 'MailReply', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 191 /* ScanCode.MailForward */, 'MailForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], [1, 192 /* ScanCode.MailSend */, 'MailSend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n  // See https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n  // If an Input Method Editor is processing key input and the event is keydown, return 229.\n  [1, 0 /* ScanCode.None */, empty, 114 /* KeyCode.KEY_IN_COMPOSITION */, 'KeyInComposition', 229, empty, empty, empty], [1, 0 /* ScanCode.None */, empty, 116 /* KeyCode.ABNT_C2 */, 'ABNT_C2', 194, 'VK_ABNT_C2', empty, empty], [1, 0 /* ScanCode.None */, empty, 96 /* KeyCode.OEM_8 */, 'OEM_8', 223, 'VK_OEM_8', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANA', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANGUL', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_JUNJA', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_FINAL', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANJA', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANJI', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CONVERT', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONCONVERT', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ACCEPT', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_MODECHANGE', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SELECT', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PRINT', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXECUTE', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SNAPSHOT', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HELP', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_APPS', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PROCESSKEY', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PACKET', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_SBCSCHAR', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_DBCSCHAR', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ATTN', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CRSEL', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXSEL', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EREOF', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PLAY', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ZOOM', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONAME', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PA1', empty, empty], [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_OEM_CLEAR', empty, empty]];\n  const seenKeyCode = [];\n  const seenScanCode = [];\n  for (const mapping of mappings) {\n    const [immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel] = mapping;\n    if (!seenScanCode[scanCode]) {\n      seenScanCode[scanCode] = true;\n      scanCodeIntToStr[scanCode] = scanCodeStr;\n      scanCodeStrToInt[scanCodeStr] = scanCode;\n      scanCodeLowerCaseStrToInt[scanCodeStr.toLowerCase()] = scanCode;\n      if (immutable) {\n        IMMUTABLE_CODE_TO_KEY_CODE[scanCode] = keyCode;\n        if (keyCode !== 0 /* KeyCode.Unknown */ && keyCode !== 3 /* KeyCode.Enter */ && keyCode !== 5 /* KeyCode.Ctrl */ && keyCode !== 4 /* KeyCode.Shift */ && keyCode !== 6 /* KeyCode.Alt */ && keyCode !== 57 /* KeyCode.Meta */) {\n          IMMUTABLE_KEY_CODE_TO_CODE[keyCode] = scanCode;\n        }\n      }\n    }\n    if (!seenKeyCode[keyCode]) {\n      seenKeyCode[keyCode] = true;\n      if (!keyCodeStr) {\n        throw new Error(`String representation missing for key code ${keyCode} around scan code ${scanCodeStr}`);\n      }\n      uiMap.define(keyCode, keyCodeStr);\n      userSettingsUSMap.define(keyCode, usUserSettingsLabel || keyCodeStr);\n      userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel || usUserSettingsLabel || keyCodeStr);\n    }\n    if (eventKeyCode) {\n      EVENT_KEY_CODE_MAP[eventKeyCode] = keyCode;\n    }\n    if (vkey) {\n      NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[vkey] = keyCode;\n    }\n  }\n  // Manually added due to the exclusion above (due to duplication with NumpadEnter)\n  IMMUTABLE_KEY_CODE_TO_CODE[3 /* KeyCode.Enter */] = 46 /* ScanCode.Enter */;\n})();\nvar KeyCodeUtils;\n(function (KeyCodeUtils) {\n  function toString(keyCode) {\n    return uiMap.keyCodeToStr(keyCode);\n  }\n  KeyCodeUtils.toString = toString;\n  function fromString(key) {\n    return uiMap.strToKeyCode(key);\n  }\n  KeyCodeUtils.fromString = fromString;\n  function toUserSettingsUS(keyCode) {\n    return userSettingsUSMap.keyCodeToStr(keyCode);\n  }\n  KeyCodeUtils.toUserSettingsUS = toUserSettingsUS;\n  function toUserSettingsGeneral(keyCode) {\n    return userSettingsGeneralMap.keyCodeToStr(keyCode);\n  }\n  KeyCodeUtils.toUserSettingsGeneral = toUserSettingsGeneral;\n  function fromUserSettings(key) {\n    return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);\n  }\n  KeyCodeUtils.fromUserSettings = fromUserSettings;\n  function toElectronAccelerator(keyCode) {\n    if (keyCode >= 98 /* KeyCode.Numpad0 */ && keyCode <= 113 /* KeyCode.NumpadDivide */) {\n      // [Electron Accelerators] Electron is able to parse numpad keys, but unfortunately it\n      // renders them just as regular keys in menus. For example, num0 is rendered as \"0\",\n      // numdiv is rendered as \"/\", numsub is rendered as \"-\".\n      //\n      // This can lead to incredible confusion, as it makes numpad based keybindings indistinguishable\n      // from keybindings based on regular keys.\n      //\n      // We therefore need to fall back to custom rendering for numpad keys.\n      return null;\n    }\n    switch (keyCode) {\n      case 16 /* KeyCode.UpArrow */:\n        return 'Up';\n      case 18 /* KeyCode.DownArrow */:\n        return 'Down';\n      case 15 /* KeyCode.LeftArrow */:\n        return 'Left';\n      case 17 /* KeyCode.RightArrow */:\n        return 'Right';\n    }\n    return uiMap.keyCodeToStr(keyCode);\n  }\n  KeyCodeUtils.toElectronAccelerator = toElectronAccelerator;\n})(KeyCodeUtils || (KeyCodeUtils = {}));\nfunction KeyChord(firstPart, secondPart) {\n  const chordPart = (secondPart & 0x0000FFFF) << 16 >>> 0;\n  return (firstPart | chordPart) >>> 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24va2V5Q29kZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxhQUFhLENBQUM7RUFDaEJDLFdBQVdBLENBQUEsRUFBRztJQUNWLElBQUksQ0FBQ0MsYUFBYSxHQUFHLEVBQUU7SUFDdkIsSUFBSSxDQUFDQyxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQztFQUM1QztFQUNBQyxNQUFNQSxDQUFDQyxPQUFPLEVBQUVDLEdBQUcsRUFBRTtJQUNqQixJQUFJLENBQUNOLGFBQWEsQ0FBQ0ssT0FBTyxDQUFDLEdBQUdDLEdBQUc7SUFDakMsSUFBSSxDQUFDTCxhQUFhLENBQUNLLEdBQUcsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHRixPQUFPO0VBQ25EO0VBQ0FHLFlBQVlBLENBQUNILE9BQU8sRUFBRTtJQUNsQixPQUFPLElBQUksQ0FBQ0wsYUFBYSxDQUFDSyxPQUFPLENBQUM7RUFDdEM7RUFDQUksWUFBWUEsQ0FBQ0gsR0FBRyxFQUFFO0lBQ2QsT0FBTyxJQUFJLENBQUNMLGFBQWEsQ0FBQ0ssR0FBRyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3REO0FBQ0o7QUFDQSxNQUFNRyxLQUFLLEdBQUcsSUFBSVosYUFBYSxDQUFDLENBQUM7QUFDakMsTUFBTWEsaUJBQWlCLEdBQUcsSUFBSWIsYUFBYSxDQUFDLENBQUM7QUFDN0MsTUFBTWMsc0JBQXNCLEdBQUcsSUFBSWQsYUFBYSxDQUFDLENBQUM7QUFDM0MsTUFBTWUsa0JBQWtCLEdBQUcsSUFBSUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUN6QyxNQUFNQyxtQ0FBbUMsR0FBRyxDQUFDLENBQUM7QUFDckQsTUFBTUMsZ0JBQWdCLEdBQUcsRUFBRTtBQUMzQixNQUFNQyxnQkFBZ0IsR0FBR2YsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzVDLE1BQU1lLHlCQUF5QixHQUFHaEIsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNPLE1BQU1nQiwwQkFBMEIsR0FBRyxFQUFFO0FBQzVDO0FBQ0E7QUFDQTtBQUNPLE1BQU1DLDBCQUEwQixHQUFHLEVBQUU7QUFDNUMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLElBQUksR0FBRyxDQUFDLDBCQUEwQkEsQ0FBQyxFQUFFLEVBQUU7RUFDcERGLDBCQUEwQixDQUFDRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2QztBQUNBLEtBQUssSUFBSUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyx5QkFBeUJBLENBQUMsRUFBRSxFQUFFO0VBQ25ERCwwQkFBMEIsQ0FBQ0MsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdkM7QUFDQSxDQUFDLFlBQVk7RUFDVDtFQUNBO0VBQ0EsTUFBTUMsS0FBSyxHQUFHLEVBQUU7RUFDaEIsTUFBTUMsUUFBUSxHQUFHO0VBQ2I7RUFDQSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCLE1BQU0sRUFBRSxDQUFDLENBQUMsdUJBQXVCLFNBQVMsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFRCxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUNyRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsc0JBQXNCLE9BQU8sRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxzQkFBc0IsT0FBTyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDNUYsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixJQUFJLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUN0RixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsdUJBQXVCLFFBQVEsRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyx3QkFBd0IsU0FBUyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDaEcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QixRQUFRLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUM5RixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsc0JBQXNCLE9BQU8sRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxzQkFBc0IsT0FBTyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUNqRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsdUJBQXVCLFFBQVEsRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzlGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3pGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsT0FBTyxFQUFFLENBQUMsQ0FBQyxxQkFBcUIsT0FBTyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3BHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsUUFBUSxFQUFFLENBQUMsQ0FBQyxzQkFBc0IsUUFBUSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3hHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQywwQkFBMEIsV0FBVyxFQUFFLENBQUMsQ0FBQyx5QkFBeUIsV0FBVyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ2pILENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FB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LEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzNGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzNGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzNGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyw0QkFBNEIsYUFBYSxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDekcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLDJCQUEyQixZQUFZLEVBQUUsRUFBRSxDQUFDLDBCQUEwQixZQUFZLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDMUgsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHNCQUFzQixPQUFPLEVBQUUsQ0FBQyxDQUFDLDBCQUEwQixZQUFZLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDN0csQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHVCQUF1QixRQUFRLEVBQUUsRUFBRSxDQUFDLHNCQUFzQixRQUFRLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDekcsQ0FBQyxDQUFD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QUFDLHVCQUF1QixTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDOUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDL0csQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDL0csQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDaEgsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDaEgsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDakgsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDakgsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDakgsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHdCQUF3QixTQUFTLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixTQUFTLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDakgsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHdCQUF3QixTQUFTLEVBQUUsRUFBRSxDQUFDLHVCQUF1QixTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDL0csQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLDhCQUE4QixlQUFlLEVBQUUsR0FBRyxDQUFDLDZCQUE2QixnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUMxSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsOEJBQThCLGVBQWUsRUFBRSxFQUFFLENBQUMsNkJBQTZCLFNBQVMsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUNsSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsNEJBQTRCLGFBQWEsRUFBRSxFQUFFLENBQUMsMkJBQTJCLGFBQWEsRUFBRSxFQUFFLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDeEgsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHNCQUFzQixPQUFPLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUM5RixDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsNEJBQTRCLGFBQWEsRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzVGLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxxQkFBcUIsTUFBTSxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDNUYsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixNQUFNLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUM1RixDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsdUJBQXVCLFFBQVEsRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQ2hHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxzQkFBc0IsT0FBTyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDOUYsQ0FBQyxD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S0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUMvRixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUJBLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDOUYsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQkEsS0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUM5RixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUJBLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDaEcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQkEsS0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUNuRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUJBLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDbkcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQkEsS0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUMvRixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUJBLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDaEcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQkEsS0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsYUFBYSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUNqRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzdGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUJBLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDN0YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQkEsS0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUNuRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQy9GLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUJBLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLGlCQUFpQixFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUNyRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxpQkFBaUIsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDckcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQkEsS0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FBQyxFQUM3RixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQXFCQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QkEsS0FBSyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUVBLEtBQUssRUFBRUEsS0FBSyxDQUFDLEVBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBcUJBLEtBQUssRUFBRSxDQUFDLENBQUMsdUJBQXVCQSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRUEsS0FBSyxFQUFFQSxLQUFLLENBQUMsRUFDOUYsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQkEsS0FBSyxFQUFFLENBQUMsQ0FBQyx1QkFBdUJBLEtBQUssRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFQSxLQUFLLEVBQUVBLEtBQUssQ0FB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QUFTQyxxQkFBcUJBLENBQUN0QyxPQUFPLEVBQUU7SUFDcEMsSUFBSUEsT0FBTyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUJBLE9BQU8sSUFBSSxHQUFHLENBQUMsNEJBQTRCO01BQ2xGO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQSxPQUFPLElBQUk7SUFDZjtJQUNBLFFBQVFBLE9BQU87TUFDWCxLQUFLLEVBQUUsQ0FBQztRQUNKLE9BQU8sSUFBSTtNQUNmLEtBQUssRUFBRSxDQUFDO1FBQ0osT0FBTyxNQUFNO01BQ2pCLEtBQUssRUFBRSxDQUFDO1FBQ0osT0FBTyxNQUFNO01BQ2pCLEtBQUssRUFBRSxDQUFDO1FBQ0osT0FBTyxPQUFPO0lBQ3RCO0lBQ0EsT0FBT0ssS0FBSyxDQUFDRixZQUFZLENBQUNILE9BQU8sQ0FBQztFQUN0QztFQUNBK0IsWUFBWSxDQUFDTyxxQkFBcUIsR0FBR0EscUJBQXFCO0FBQzlELENBQUMsRUFBRVAsWUFBWSxLQUFLQSxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxTQUFTUSxRQUFRQSxDQUFDQyxTQUFTLEVBQUVDLFVBQVUsRUFBRTtFQUM1QyxNQUFNQyxTQUFTLEdBQUksQ0FBQ0QsVUFBVSxHQUFHLFVBQVUsS0FBSyxFQUFFLEtBQU0sQ0FBQztFQUN6RCxPQUFPLENBQUNELFNBQVMsR0FBR0UsU0FBUyxNQUFNLENBQUM7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2tleUNvZGVzLmpzPzkwMTciXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5jbGFzcyBLZXlDb2RlU3RyTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fa2V5Q29kZVRvU3RyID0gW107XG4gICAgICAgIHRoaXMuX3N0clRvS2V5Q29kZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIGRlZmluZShrZXlDb2RlLCBzdHIpIHtcbiAgICAgICAgdGhpcy5fa2V5Q29kZVRvU3RyW2tleUNvZGVdID0gc3RyO1xuICAgICAgICB0aGlzLl9zdHJUb0tleUNvZGVbc3RyLnRvTG93ZXJDYXNlKCldID0ga2V5Q29kZTtcbiAgICB9XG4gICAga2V5Q29kZVRvU3RyKGtleUNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleUNvZGVUb1N0cltrZXlDb2RlXTtcbiAgICB9XG4gICAgc3RyVG9LZXlDb2RlKHN0cikge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyVG9LZXlDb2RlW3N0ci50b0xvd2VyQ2FzZSgpXSB8fCAwIC8qIEtleUNvZGUuVW5rbm93biAqLztcbiAgICB9XG59XG5jb25zdCB1aU1hcCA9IG5ldyBLZXlDb2RlU3RyTWFwKCk7XG5jb25zdCB1c2VyU2V0dGluZ3NVU01hcCA9IG5ldyBLZXlDb2RlU3RyTWFwKCk7XG5jb25zdCB1c2VyU2V0dGluZ3NHZW5lcmFsTWFwID0gbmV3IEtleUNvZGVTdHJNYXAoKTtcbmV4cG9ydCBjb25zdCBFVkVOVF9LRVlfQ09ERV9NQVAgPSBuZXcgQXJyYXkoMjMwKTtcbmV4cG9ydCBjb25zdCBOQVRJVkVfV0lORE9XU19LRVlfQ09ERV9UT19LRVlfQ09ERSA9IHt9O1xuY29uc3Qgc2NhbkNvZGVJbnRUb1N0ciA9IFtdO1xuY29uc3Qgc2NhbkNvZGVTdHJUb0ludCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBzY2FuQ29kZUxvd2VyQ2FzZVN0clRvSW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKlxuICogLTEgaWYgYSBTY2FuQ29kZSA9PiBLZXlDb2RlIG1hcHBpbmcgZGVwZW5kcyBvbiBrYiBsYXlvdXQuXG4gKi9cbmV4cG9ydCBjb25zdCBJTU1VVEFCTEVfQ09ERV9UT19LRVlfQ09ERSA9IFtdO1xuLyoqXG4gKiAtMSBpZiBhIEtleUNvZGUgPT4gU2NhbkNvZGUgbWFwcGluZyBkZXBlbmRzIG9uIGtiIGxheW91dC5cbiAqL1xuZXhwb3J0IGNvbnN0IElNTVVUQUJMRV9LRVlfQ09ERV9UT19DT0RFID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8PSAxOTMgLyogU2NhbkNvZGUuTUFYX1ZBTFVFICovOyBpKyspIHtcbiAgICBJTU1VVEFCTEVfQ09ERV9UT19LRVlfQ09ERVtpXSA9IC0xIC8qIEtleUNvZGUuRGVwZW5kc09uS2JMYXlvdXQgKi87XG59XG5mb3IgKGxldCBpID0gMDsgaSA8PSAxMzIgLyogS2V5Q29kZS5NQVhfVkFMVUUgKi87IGkrKykge1xuICAgIElNTVVUQUJMRV9LRVlfQ09ERV9UT19DT0RFW2ldID0gLTEgLyogU2NhbkNvZGUuRGVwZW5kc09uS2JMYXlvdXQgKi87XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIC8vIFNlZSBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9kZDM3NTczMSh2PXZzLjg1KS5hc3B4XG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbm9kZS1uYXRpdmUta2V5bWFwL2Jsb2IvODhjMGIwZTUvZGVwcy9jaHJvbWl1bS9rZXlib2FyZF9jb2Rlc193aW4uaFxuICAgIGNvbnN0IGVtcHR5ID0gJyc7XG4gICAgY29uc3QgbWFwcGluZ3MgPSBbXG4gICAgICAgIC8vIGltbXV0YWJsZSwgc2NhbkNvZGUsIHNjYW5Db2RlU3RyLCBrZXlDb2RlLCBrZXlDb2RlU3RyLCBldmVudEtleUNvZGUsIHZrZXksIHVzVXNlclNldHRpbmdzTGFiZWwsIGdlbmVyYWxVc2VyU2V0dGluZ3NMYWJlbFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCAnTm9uZScsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCAndW5rbm93bicsIDAsICdWS19VTktOT1dOJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEgLyogU2NhbkNvZGUuSHlwZXIgKi8sICdIeXBlcicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAyIC8qIFNjYW5Db2RlLlN1cGVyICovLCAnU3VwZXInLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMyAvKiBTY2FuQ29kZS5GbiAqLywgJ0ZuJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDQgLyogU2NhbkNvZGUuRm5Mb2NrICovLCAnRm5Mb2NrJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDUgLyogU2NhbkNvZGUuU3VzcGVuZCAqLywgJ1N1c3BlbmQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNiAvKiBTY2FuQ29kZS5SZXN1bWUgKi8sICdSZXN1bWUnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNyAvKiBTY2FuQ29kZS5UdXJibyAqLywgJ1R1cmJvJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDggLyogU2NhbkNvZGUuU2xlZXAgKi8sICdTbGVlcCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX1NMRUVQJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDkgLyogU2NhbkNvZGUuV2FrZVVwICovLCAnV2FrZVVwJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDEwIC8qIFNjYW5Db2RlLktleUEgKi8sICdLZXlBJywgMzEgLyogS2V5Q29kZS5LZXlBICovLCAnQScsIDY1LCAnVktfQScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxMSAvKiBTY2FuQ29kZS5LZXlCICovLCAnS2V5QicsIDMyIC8qIEtleUNvZGUuS2V5QiAqLywgJ0InLCA2NiwgJ1ZLX0InLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMTIgLyogU2NhbkNvZGUuS2V5QyAqLywgJ0tleUMnLCAzMyAvKiBLZXlDb2RlLktleUMgKi8sICdDJywgNjcsICdWS19DJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDEzIC8qIFNjYW5Db2RlLktleUQgKi8sICdLZXlEJywgMzQgLyogS2V5Q29kZS5LZXlEICovLCAnRCcsIDY4LCAnVktfRCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxNCAvKiBTY2FuQ29kZS5LZXlFICovLCAnS2V5RScsIDM1IC8qIEtleUNvZGUuS2V5RSAqLywgJ0UnLCA2OSwgJ1ZLX0UnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMTUgLyogU2NhbkNvZGUuS2V5RiAqLywgJ0tleUYnLCAzNiAvKiBLZXlDb2RlLktleUYgKi8sICdGJywgNzAsICdWS19GJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDE2IC8qIFNjYW5Db2RlLktleUcgKi8sICdLZXlHJywgMzcgLyogS2V5Q29kZS5LZXlHICovLCAnRycsIDcxLCAnVktfRycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxNyAvKiBTY2FuQ29kZS5LZXlIICovLCAnS2V5SCcsIDM4IC8qIEtleUNvZGUuS2V5SCAqLywgJ0gnLCA3MiwgJ1ZLX0gnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMTggLyogU2NhbkNvZGUuS2V5SSAqLywgJ0tleUknLCAzOSAvKiBLZXlDb2RlLktleUkgKi8sICdJJywgNzMsICdWS19JJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDE5IC8qIFNjYW5Db2RlLktleUogKi8sICdLZXlKJywgNDAgLyogS2V5Q29kZS5LZXlKICovLCAnSicsIDc0LCAnVktfSicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyMCAvKiBTY2FuQ29kZS5LZXlLICovLCAnS2V5SycsIDQxIC8qIEtleUNvZGUuS2V5SyAqLywgJ0snLCA3NSwgJ1ZLX0snLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMjEgLyogU2NhbkNvZGUuS2V5TCAqLywgJ0tleUwnLCA0MiAvKiBLZXlDb2RlLktleUwgKi8sICdMJywgNzYsICdWS19MJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDIyIC8qIFNjYW5Db2RlLktleU0gKi8sICdLZXlNJywgNDMgLyogS2V5Q29kZS5LZXlNICovLCAnTScsIDc3LCAnVktfTScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyMyAvKiBTY2FuQ29kZS5LZXlOICovLCAnS2V5TicsIDQ0IC8qIEtleUNvZGUuS2V5TiAqLywgJ04nLCA3OCwgJ1ZLX04nLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMjQgLyogU2NhbkNvZGUuS2V5TyAqLywgJ0tleU8nLCA0NSAvKiBLZXlDb2RlLktleU8gKi8sICdPJywgNzksICdWS19PJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDI1IC8qIFNjYW5Db2RlLktleVAgKi8sICdLZXlQJywgNDYgLyogS2V5Q29kZS5LZXlQICovLCAnUCcsIDgwLCAnVktfUCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyNiAvKiBTY2FuQ29kZS5LZXlRICovLCAnS2V5UScsIDQ3IC8qIEtleUNvZGUuS2V5USAqLywgJ1EnLCA4MSwgJ1ZLX1EnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMjcgLyogU2NhbkNvZGUuS2V5UiAqLywgJ0tleVInLCA0OCAvKiBLZXlDb2RlLktleVIgKi8sICdSJywgODIsICdWS19SJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDI4IC8qIFNjYW5Db2RlLktleVMgKi8sICdLZXlTJywgNDkgLyogS2V5Q29kZS5LZXlTICovLCAnUycsIDgzLCAnVktfUycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAyOSAvKiBTY2FuQ29kZS5LZXlUICovLCAnS2V5VCcsIDUwIC8qIEtleUNvZGUuS2V5VCAqLywgJ1QnLCA4NCwgJ1ZLX1QnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzAgLyogU2NhbkNvZGUuS2V5VSAqLywgJ0tleVUnLCA1MSAvKiBLZXlDb2RlLktleVUgKi8sICdVJywgODUsICdWS19VJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDMxIC8qIFNjYW5Db2RlLktleVYgKi8sICdLZXlWJywgNTIgLyogS2V5Q29kZS5LZXlWICovLCAnVicsIDg2LCAnVktfVicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAzMiAvKiBTY2FuQ29kZS5LZXlXICovLCAnS2V5VycsIDUzIC8qIEtleUNvZGUuS2V5VyAqLywgJ1cnLCA4NywgJ1ZLX1cnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzMgLyogU2NhbkNvZGUuS2V5WCAqLywgJ0tleVgnLCA1NCAvKiBLZXlDb2RlLktleVggKi8sICdYJywgODgsICdWS19YJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDM0IC8qIFNjYW5Db2RlLktleVkgKi8sICdLZXlZJywgNTUgLyogS2V5Q29kZS5LZXlZICovLCAnWScsIDg5LCAnVktfWScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAzNSAvKiBTY2FuQ29kZS5LZXlaICovLCAnS2V5WicsIDU2IC8qIEtleUNvZGUuS2V5WiAqLywgJ1onLCA5MCwgJ1ZLX1onLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzYgLyogU2NhbkNvZGUuRGlnaXQxICovLCAnRGlnaXQxJywgMjIgLyogS2V5Q29kZS5EaWdpdDEgKi8sICcxJywgNDksICdWS18xJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDM3IC8qIFNjYW5Db2RlLkRpZ2l0MiAqLywgJ0RpZ2l0MicsIDIzIC8qIEtleUNvZGUuRGlnaXQyICovLCAnMicsIDUwLCAnVktfMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAzOCAvKiBTY2FuQ29kZS5EaWdpdDMgKi8sICdEaWdpdDMnLCAyNCAvKiBLZXlDb2RlLkRpZ2l0MyAqLywgJzMnLCA1MSwgJ1ZLXzMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgMzkgLyogU2NhbkNvZGUuRGlnaXQ0ICovLCAnRGlnaXQ0JywgMjUgLyogS2V5Q29kZS5EaWdpdDQgKi8sICc0JywgNTIsICdWS180JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDQwIC8qIFNjYW5Db2RlLkRpZ2l0NSAqLywgJ0RpZ2l0NScsIDI2IC8qIEtleUNvZGUuRGlnaXQ1ICovLCAnNScsIDUzLCAnVktfNScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCA0MSAvKiBTY2FuQ29kZS5EaWdpdDYgKi8sICdEaWdpdDYnLCAyNyAvKiBLZXlDb2RlLkRpZ2l0NiAqLywgJzYnLCA1NCwgJ1ZLXzYnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgNDIgLyogU2NhbkNvZGUuRGlnaXQ3ICovLCAnRGlnaXQ3JywgMjggLyogS2V5Q29kZS5EaWdpdDcgKi8sICc3JywgNTUsICdWS183JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDQzIC8qIFNjYW5Db2RlLkRpZ2l0OCAqLywgJ0RpZ2l0OCcsIDI5IC8qIEtleUNvZGUuRGlnaXQ4ICovLCAnOCcsIDU2LCAnVktfOCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCA0NCAvKiBTY2FuQ29kZS5EaWdpdDkgKi8sICdEaWdpdDknLCAzMCAvKiBLZXlDb2RlLkRpZ2l0OSAqLywgJzknLCA1NywgJ1ZLXzknLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgNDUgLyogU2NhbkNvZGUuRGlnaXQwICovLCAnRGlnaXQwJywgMjEgLyogS2V5Q29kZS5EaWdpdDAgKi8sICcwJywgNDgsICdWS18wJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDQ2IC8qIFNjYW5Db2RlLkVudGVyICovLCAnRW50ZXInLCAzIC8qIEtleUNvZGUuRW50ZXIgKi8sICdFbnRlcicsIDEzLCAnVktfUkVUVVJOJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDQ3IC8qIFNjYW5Db2RlLkVzY2FwZSAqLywgJ0VzY2FwZScsIDkgLyogS2V5Q29kZS5Fc2NhcGUgKi8sICdFc2NhcGUnLCAyNywgJ1ZLX0VTQ0FQRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA0OCAvKiBTY2FuQ29kZS5CYWNrc3BhY2UgKi8sICdCYWNrc3BhY2UnLCAxIC8qIEtleUNvZGUuQmFja3NwYWNlICovLCAnQmFja3NwYWNlJywgOCwgJ1ZLX0JBQ0snLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNDkgLyogU2NhbkNvZGUuVGFiICovLCAnVGFiJywgMiAvKiBLZXlDb2RlLlRhYiAqLywgJ1RhYicsIDksICdWS19UQUInLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNTAgLyogU2NhbkNvZGUuU3BhY2UgKi8sICdTcGFjZScsIDEwIC8qIEtleUNvZGUuU3BhY2UgKi8sICdTcGFjZScsIDMyLCAnVktfU1BBQ0UnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMCwgNTEgLyogU2NhbkNvZGUuTWludXMgKi8sICdNaW51cycsIDg4IC8qIEtleUNvZGUuTWludXMgKi8sICctJywgMTg5LCAnVktfT0VNX01JTlVTJywgJy0nLCAnT0VNX01JTlVTJ10sXG4gICAgICAgIFswLCA1MiAvKiBTY2FuQ29kZS5FcXVhbCAqLywgJ0VxdWFsJywgODYgLyogS2V5Q29kZS5FcXVhbCAqLywgJz0nLCAxODcsICdWS19PRU1fUExVUycsICc9JywgJ09FTV9QTFVTJ10sXG4gICAgICAgIFswLCA1MyAvKiBTY2FuQ29kZS5CcmFja2V0TGVmdCAqLywgJ0JyYWNrZXRMZWZ0JywgOTIgLyogS2V5Q29kZS5CcmFja2V0TGVmdCAqLywgJ1snLCAyMTksICdWS19PRU1fNCcsICdbJywgJ09FTV80J10sXG4gICAgICAgIFswLCA1NCAvKiBTY2FuQ29kZS5CcmFja2V0UmlnaHQgKi8sICdCcmFja2V0UmlnaHQnLCA5NCAvKiBLZXlDb2RlLkJyYWNrZXRSaWdodCAqLywgJ10nLCAyMjEsICdWS19PRU1fNicsICddJywgJ09FTV82J10sXG4gICAgICAgIFswLCA1NSAvKiBTY2FuQ29kZS5CYWNrc2xhc2ggKi8sICdCYWNrc2xhc2gnLCA5MyAvKiBLZXlDb2RlLkJhY2tzbGFzaCAqLywgJ1xcXFwnLCAyMjAsICdWS19PRU1fNScsICdcXFxcJywgJ09FTV81J10sXG4gICAgICAgIFswLCA1NiAvKiBTY2FuQ29kZS5JbnRsSGFzaCAqLywgJ0ludGxIYXNoJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSwgLy8gaGFzIGJlZW4gZHJvcHBlZCBmcm9tIHRoZSB3M2Mgc3BlY1xuICAgICAgICBbMCwgNTcgLyogU2NhbkNvZGUuU2VtaWNvbG9uICovLCAnU2VtaWNvbG9uJywgODUgLyogS2V5Q29kZS5TZW1pY29sb24gKi8sICc7JywgMTg2LCAnVktfT0VNXzEnLCAnOycsICdPRU1fMSddLFxuICAgICAgICBbMCwgNTggLyogU2NhbkNvZGUuUXVvdGUgKi8sICdRdW90ZScsIDk1IC8qIEtleUNvZGUuUXVvdGUgKi8sICdcXCcnLCAyMjIsICdWS19PRU1fNycsICdcXCcnLCAnT0VNXzcnXSxcbiAgICAgICAgWzAsIDU5IC8qIFNjYW5Db2RlLkJhY2txdW90ZSAqLywgJ0JhY2txdW90ZScsIDkxIC8qIEtleUNvZGUuQmFja3F1b3RlICovLCAnYCcsIDE5MiwgJ1ZLX09FTV8zJywgJ2AnLCAnT0VNXzMnXSxcbiAgICAgICAgWzAsIDYwIC8qIFNjYW5Db2RlLkNvbW1hICovLCAnQ29tbWEnLCA4NyAvKiBLZXlDb2RlLkNvbW1hICovLCAnLCcsIDE4OCwgJ1ZLX09FTV9DT01NQScsICcsJywgJ09FTV9DT01NQSddLFxuICAgICAgICBbMCwgNjEgLyogU2NhbkNvZGUuUGVyaW9kICovLCAnUGVyaW9kJywgODkgLyogS2V5Q29kZS5QZXJpb2QgKi8sICcuJywgMTkwLCAnVktfT0VNX1BFUklPRCcsICcuJywgJ09FTV9QRVJJT0QnXSxcbiAgICAgICAgWzAsIDYyIC8qIFNjYW5Db2RlLlNsYXNoICovLCAnU2xhc2gnLCA5MCAvKiBLZXlDb2RlLlNsYXNoICovLCAnLycsIDE5MSwgJ1ZLX09FTV8yJywgJy8nLCAnT0VNXzInXSxcbiAgICAgICAgWzEsIDYzIC8qIFNjYW5Db2RlLkNhcHNMb2NrICovLCAnQ2Fwc0xvY2snLCA4IC8qIEtleUNvZGUuQ2Fwc0xvY2sgKi8sICdDYXBzTG9jaycsIDIwLCAnVktfQ0FQSVRBTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA2NCAvKiBTY2FuQ29kZS5GMSAqLywgJ0YxJywgNTkgLyogS2V5Q29kZS5GMSAqLywgJ0YxJywgMTEyLCAnVktfRjEnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNjUgLyogU2NhbkNvZGUuRjIgKi8sICdGMicsIDYwIC8qIEtleUNvZGUuRjIgKi8sICdGMicsIDExMywgJ1ZLX0YyJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDY2IC8qIFNjYW5Db2RlLkYzICovLCAnRjMnLCA2MSAvKiBLZXlDb2RlLkYzICovLCAnRjMnLCAxMTQsICdWS19GMycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA2NyAvKiBTY2FuQ29kZS5GNCAqLywgJ0Y0JywgNjIgLyogS2V5Q29kZS5GNCAqLywgJ0Y0JywgMTE1LCAnVktfRjQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNjggLyogU2NhbkNvZGUuRjUgKi8sICdGNScsIDYzIC8qIEtleUNvZGUuRjUgKi8sICdGNScsIDExNiwgJ1ZLX0Y1JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDY5IC8qIFNjYW5Db2RlLkY2ICovLCAnRjYnLCA2NCAvKiBLZXlDb2RlLkY2ICovLCAnRjYnLCAxMTcsICdWS19GNicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3MCAvKiBTY2FuQ29kZS5GNyAqLywgJ0Y3JywgNjUgLyogS2V5Q29kZS5GNyAqLywgJ0Y3JywgMTE4LCAnVktfRjcnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgNzEgLyogU2NhbkNvZGUuRjggKi8sICdGOCcsIDY2IC8qIEtleUNvZGUuRjggKi8sICdGOCcsIDExOSwgJ1ZLX0Y4JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDcyIC8qIFNjYW5Db2RlLkY5ICovLCAnRjknLCA2NyAvKiBLZXlDb2RlLkY5ICovLCAnRjknLCAxMjAsICdWS19GOScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3MyAvKiBTY2FuQ29kZS5GMTAgKi8sICdGMTAnLCA2OCAvKiBLZXlDb2RlLkYxMCAqLywgJ0YxMCcsIDEyMSwgJ1ZLX0YxMCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3NCAvKiBTY2FuQ29kZS5GMTEgKi8sICdGMTEnLCA2OSAvKiBLZXlDb2RlLkYxMSAqLywgJ0YxMScsIDEyMiwgJ1ZLX0YxMScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3NSAvKiBTY2FuQ29kZS5GMTIgKi8sICdGMTInLCA3MCAvKiBLZXlDb2RlLkYxMiAqLywgJ0YxMicsIDEyMywgJ1ZLX0YxMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3NiAvKiBTY2FuQ29kZS5QcmludFNjcmVlbiAqLywgJ1ByaW50U2NyZWVuJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDc3IC8qIFNjYW5Db2RlLlNjcm9sbExvY2sgKi8sICdTY3JvbGxMb2NrJywgODQgLyogS2V5Q29kZS5TY3JvbGxMb2NrICovLCAnU2Nyb2xsTG9jaycsIDE0NSwgJ1ZLX1NDUk9MTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3OCAvKiBTY2FuQ29kZS5QYXVzZSAqLywgJ1BhdXNlJywgNyAvKiBLZXlDb2RlLlBhdXNlQnJlYWsgKi8sICdQYXVzZUJyZWFrJywgMTksICdWS19QQVVTRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA3OSAvKiBTY2FuQ29kZS5JbnNlcnQgKi8sICdJbnNlcnQnLCAxOSAvKiBLZXlDb2RlLkluc2VydCAqLywgJ0luc2VydCcsIDQ1LCAnVktfSU5TRVJUJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDgwIC8qIFNjYW5Db2RlLkhvbWUgKi8sICdIb21lJywgMTQgLyogS2V5Q29kZS5Ib21lICovLCAnSG9tZScsIDM2LCAnVktfSE9NRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA4MSAvKiBTY2FuQ29kZS5QYWdlVXAgKi8sICdQYWdlVXAnLCAxMSAvKiBLZXlDb2RlLlBhZ2VVcCAqLywgJ1BhZ2VVcCcsIDMzLCAnVktfUFJJT1InLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgODIgLyogU2NhbkNvZGUuRGVsZXRlICovLCAnRGVsZXRlJywgMjAgLyogS2V5Q29kZS5EZWxldGUgKi8sICdEZWxldGUnLCA0NiwgJ1ZLX0RFTEVURScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA4MyAvKiBTY2FuQ29kZS5FbmQgKi8sICdFbmQnLCAxMyAvKiBLZXlDb2RlLkVuZCAqLywgJ0VuZCcsIDM1LCAnVktfRU5EJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDg0IC8qIFNjYW5Db2RlLlBhZ2VEb3duICovLCAnUGFnZURvd24nLCAxMiAvKiBLZXlDb2RlLlBhZ2VEb3duICovLCAnUGFnZURvd24nLCAzNCwgJ1ZLX05FWFQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgODUgLyogU2NhbkNvZGUuQXJyb3dSaWdodCAqLywgJ0Fycm93UmlnaHQnLCAxNyAvKiBLZXlDb2RlLlJpZ2h0QXJyb3cgKi8sICdSaWdodEFycm93JywgMzksICdWS19SSUdIVCcsICdSaWdodCcsIGVtcHR5XSxcbiAgICAgICAgWzEsIDg2IC8qIFNjYW5Db2RlLkFycm93TGVmdCAqLywgJ0Fycm93TGVmdCcsIDE1IC8qIEtleUNvZGUuTGVmdEFycm93ICovLCAnTGVmdEFycm93JywgMzcsICdWS19MRUZUJywgJ0xlZnQnLCBlbXB0eV0sXG4gICAgICAgIFsxLCA4NyAvKiBTY2FuQ29kZS5BcnJvd0Rvd24gKi8sICdBcnJvd0Rvd24nLCAxOCAvKiBLZXlDb2RlLkRvd25BcnJvdyAqLywgJ0Rvd25BcnJvdycsIDQwLCAnVktfRE9XTicsICdEb3duJywgZW1wdHldLFxuICAgICAgICBbMSwgODggLyogU2NhbkNvZGUuQXJyb3dVcCAqLywgJ0Fycm93VXAnLCAxNiAvKiBLZXlDb2RlLlVwQXJyb3cgKi8sICdVcEFycm93JywgMzgsICdWS19VUCcsICdVcCcsIGVtcHR5XSxcbiAgICAgICAgWzEsIDg5IC8qIFNjYW5Db2RlLk51bUxvY2sgKi8sICdOdW1Mb2NrJywgODMgLyogS2V5Q29kZS5OdW1Mb2NrICovLCAnTnVtTG9jaycsIDE0NCwgJ1ZLX05VTUxPQ0snLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgOTAgLyogU2NhbkNvZGUuTnVtcGFkRGl2aWRlICovLCAnTnVtcGFkRGl2aWRlJywgMTEzIC8qIEtleUNvZGUuTnVtcGFkRGl2aWRlICovLCAnTnVtUGFkX0RpdmlkZScsIDExMSwgJ1ZLX0RJVklERScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5MSAvKiBTY2FuQ29kZS5OdW1wYWRNdWx0aXBseSAqLywgJ051bXBhZE11bHRpcGx5JywgMTA4IC8qIEtleUNvZGUuTnVtcGFkTXVsdGlwbHkgKi8sICdOdW1QYWRfTXVsdGlwbHknLCAxMDYsICdWS19NVUxUSVBMWScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5MiAvKiBTY2FuQ29kZS5OdW1wYWRTdWJ0cmFjdCAqLywgJ051bXBhZFN1YnRyYWN0JywgMTExIC8qIEtleUNvZGUuTnVtcGFkU3VidHJhY3QgKi8sICdOdW1QYWRfU3VidHJhY3QnLCAxMDksICdWS19TVUJUUkFDVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5MyAvKiBTY2FuQ29kZS5OdW1wYWRBZGQgKi8sICdOdW1wYWRBZGQnLCAxMDkgLyogS2V5Q29kZS5OdW1wYWRBZGQgKi8sICdOdW1QYWRfQWRkJywgMTA3LCAnVktfQUREJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDk0IC8qIFNjYW5Db2RlLk51bXBhZEVudGVyICovLCAnTnVtcGFkRW50ZXInLCAzIC8qIEtleUNvZGUuRW50ZXIgKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDk1IC8qIFNjYW5Db2RlLk51bXBhZDEgKi8sICdOdW1wYWQxJywgOTkgLyogS2V5Q29kZS5OdW1wYWQxICovLCAnTnVtUGFkMScsIDk3LCAnVktfTlVNUEFEMScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCA5NiAvKiBTY2FuQ29kZS5OdW1wYWQyICovLCAnTnVtcGFkMicsIDEwMCAvKiBLZXlDb2RlLk51bXBhZDIgKi8sICdOdW1QYWQyJywgOTgsICdWS19OVU1QQUQyJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDk3IC8qIFNjYW5Db2RlLk51bXBhZDMgKi8sICdOdW1wYWQzJywgMTAxIC8qIEtleUNvZGUuTnVtcGFkMyAqLywgJ051bVBhZDMnLCA5OSwgJ1ZLX05VTVBBRDMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgOTggLyogU2NhbkNvZGUuTnVtcGFkNCAqLywgJ051bXBhZDQnLCAxMDIgLyogS2V5Q29kZS5OdW1wYWQ0ICovLCAnTnVtUGFkNCcsIDEwMCwgJ1ZLX05VTVBBRDQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgOTkgLyogU2NhbkNvZGUuTnVtcGFkNSAqLywgJ051bXBhZDUnLCAxMDMgLyogS2V5Q29kZS5OdW1wYWQ1ICovLCAnTnVtUGFkNScsIDEwMSwgJ1ZLX05VTVBBRDUnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTAwIC8qIFNjYW5Db2RlLk51bXBhZDYgKi8sICdOdW1wYWQ2JywgMTA0IC8qIEtleUNvZGUuTnVtcGFkNiAqLywgJ051bVBhZDYnLCAxMDIsICdWS19OVU1QQUQ2JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwMSAvKiBTY2FuQ29kZS5OdW1wYWQ3ICovLCAnTnVtcGFkNycsIDEwNSAvKiBLZXlDb2RlLk51bXBhZDcgKi8sICdOdW1QYWQ3JywgMTAzLCAnVktfTlVNUEFENycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMDIgLyogU2NhbkNvZGUuTnVtcGFkOCAqLywgJ051bXBhZDgnLCAxMDYgLyogS2V5Q29kZS5OdW1wYWQ4ICovLCAnTnVtUGFkOCcsIDEwNCwgJ1ZLX05VTVBBRDgnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTAzIC8qIFNjYW5Db2RlLk51bXBhZDkgKi8sICdOdW1wYWQ5JywgMTA3IC8qIEtleUNvZGUuTnVtcGFkOSAqLywgJ051bVBhZDknLCAxMDUsICdWS19OVU1QQUQ5JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwNCAvKiBTY2FuQ29kZS5OdW1wYWQwICovLCAnTnVtcGFkMCcsIDk4IC8qIEtleUNvZGUuTnVtcGFkMCAqLywgJ051bVBhZDAnLCA5NiwgJ1ZLX05VTVBBRDAnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTA1IC8qIFNjYW5Db2RlLk51bXBhZERlY2ltYWwgKi8sICdOdW1wYWREZWNpbWFsJywgMTEyIC8qIEtleUNvZGUuTnVtcGFkRGVjaW1hbCAqLywgJ051bVBhZF9EZWNpbWFsJywgMTEwLCAnVktfREVDSU1BTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxMDYgLyogU2NhbkNvZGUuSW50bEJhY2tzbGFzaCAqLywgJ0ludGxCYWNrc2xhc2gnLCA5NyAvKiBLZXlDb2RlLkludGxCYWNrc2xhc2ggKi8sICdPRU1fMTAyJywgMjI2LCAnVktfT0VNXzEwMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMDcgLyogU2NhbkNvZGUuQ29udGV4dE1lbnUgKi8sICdDb250ZXh0TWVudScsIDU4IC8qIEtleUNvZGUuQ29udGV4dE1lbnUgKi8sICdDb250ZXh0TWVudScsIDkzLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwOCAvKiBTY2FuQ29kZS5Qb3dlciAqLywgJ1Bvd2VyJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEwOSAvKiBTY2FuQ29kZS5OdW1wYWRFcXVhbCAqLywgJ051bXBhZEVxdWFsJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExMCAvKiBTY2FuQ29kZS5GMTMgKi8sICdGMTMnLCA3MSAvKiBLZXlDb2RlLkYxMyAqLywgJ0YxMycsIDEyNCwgJ1ZLX0YxMycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMTEgLyogU2NhbkNvZGUuRjE0ICovLCAnRjE0JywgNzIgLyogS2V5Q29kZS5GMTQgKi8sICdGMTQnLCAxMjUsICdWS19GMTQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTEyIC8qIFNjYW5Db2RlLkYxNSAqLywgJ0YxNScsIDczIC8qIEtleUNvZGUuRjE1ICovLCAnRjE1JywgMTI2LCAnVktfRjE1JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExMyAvKiBTY2FuQ29kZS5GMTYgKi8sICdGMTYnLCA3NCAvKiBLZXlDb2RlLkYxNiAqLywgJ0YxNicsIDEyNywgJ1ZLX0YxNicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMTQgLyogU2NhbkNvZGUuRjE3ICovLCAnRjE3JywgNzUgLyogS2V5Q29kZS5GMTcgKi8sICdGMTcnLCAxMjgsICdWS19GMTcnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTE1IC8qIFNjYW5Db2RlLkYxOCAqLywgJ0YxOCcsIDc2IC8qIEtleUNvZGUuRjE4ICovLCAnRjE4JywgMTI5LCAnVktfRjE4JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExNiAvKiBTY2FuQ29kZS5GMTkgKi8sICdGMTknLCA3NyAvKiBLZXlDb2RlLkYxOSAqLywgJ0YxOScsIDEzMCwgJ1ZLX0YxOScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMTcgLyogU2NhbkNvZGUuRjIwICovLCAnRjIwJywgNzggLyogS2V5Q29kZS5GMjAgKi8sICdGMjAnLCAxMzEsICdWS19GMjAnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTE4IC8qIFNjYW5Db2RlLkYyMSAqLywgJ0YyMScsIDc5IC8qIEtleUNvZGUuRjIxICovLCAnRjIxJywgMTMyLCAnVktfRjIxJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDExOSAvKiBTY2FuQ29kZS5GMjIgKi8sICdGMjInLCA4MCAvKiBLZXlDb2RlLkYyMiAqLywgJ0YyMicsIDEzMywgJ1ZLX0YyMicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjAgLyogU2NhbkNvZGUuRjIzICovLCAnRjIzJywgODEgLyogS2V5Q29kZS5GMjMgKi8sICdGMjMnLCAxMzQsICdWS19GMjMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTIxIC8qIFNjYW5Db2RlLkYyNCAqLywgJ0YyNCcsIDgyIC8qIEtleUNvZGUuRjI0ICovLCAnRjI0JywgMTM1LCAnVktfRjI0JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEyMiAvKiBTY2FuQ29kZS5PcGVuICovLCAnT3BlbicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjMgLyogU2NhbkNvZGUuSGVscCAqLywgJ0hlbHAnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTI0IC8qIFNjYW5Db2RlLlNlbGVjdCAqLywgJ1NlbGVjdCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjUgLyogU2NhbkNvZGUuQWdhaW4gKi8sICdBZ2FpbicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjYgLyogU2NhbkNvZGUuVW5kbyAqLywgJ1VuZG8nLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTI3IC8qIFNjYW5Db2RlLkN1dCAqLywgJ0N1dCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMjggLyogU2NhbkNvZGUuQ29weSAqLywgJ0NvcHknLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTI5IC8qIFNjYW5Db2RlLlBhc3RlICovLCAnUGFzdGUnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTMwIC8qIFNjYW5Db2RlLkZpbmQgKi8sICdGaW5kJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEzMSAvKiBTY2FuQ29kZS5BdWRpb1ZvbHVtZU11dGUgKi8sICdBdWRpb1ZvbHVtZU11dGUnLCAxMTcgLyogS2V5Q29kZS5BdWRpb1ZvbHVtZU11dGUgKi8sICdBdWRpb1ZvbHVtZU11dGUnLCAxNzMsICdWS19WT0xVTUVfTVVURScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMzIgLyogU2NhbkNvZGUuQXVkaW9Wb2x1bWVVcCAqLywgJ0F1ZGlvVm9sdW1lVXAnLCAxMTggLyogS2V5Q29kZS5BdWRpb1ZvbHVtZVVwICovLCAnQXVkaW9Wb2x1bWVVcCcsIDE3NSwgJ1ZLX1ZPTFVNRV9VUCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMzMgLyogU2NhbkNvZGUuQXVkaW9Wb2x1bWVEb3duICovLCAnQXVkaW9Wb2x1bWVEb3duJywgMTE5IC8qIEtleUNvZGUuQXVkaW9Wb2x1bWVEb3duICovLCAnQXVkaW9Wb2x1bWVEb3duJywgMTc0LCAnVktfVk9MVU1FX0RPV04nLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTM0IC8qIFNjYW5Db2RlLk51bXBhZENvbW1hICovLCAnTnVtcGFkQ29tbWEnLCAxMTAgLyogS2V5Q29kZS5OVU1QQURfU0VQQVJBVE9SICovLCAnTnVtUGFkX1NlcGFyYXRvcicsIDEwOCwgJ1ZLX1NFUEFSQVRPUicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFswLCAxMzUgLyogU2NhbkNvZGUuSW50bFJvICovLCAnSW50bFJvJywgMTE1IC8qIEtleUNvZGUuQUJOVF9DMSAqLywgJ0FCTlRfQzEnLCAxOTMsICdWS19BQk5UX0MxJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDEzNiAvKiBTY2FuQ29kZS5LYW5hTW9kZSAqLywgJ0thbmFNb2RlJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzAsIDEzNyAvKiBTY2FuQ29kZS5JbnRsWWVuICovLCAnSW50bFllbicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxMzggLyogU2NhbkNvZGUuQ29udmVydCAqLywgJ0NvbnZlcnQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTM5IC8qIFNjYW5Db2RlLk5vbkNvbnZlcnQgKi8sICdOb25Db252ZXJ0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MCAvKiBTY2FuQ29kZS5MYW5nMSAqLywgJ0xhbmcxJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MSAvKiBTY2FuQ29kZS5MYW5nMiAqLywgJ0xhbmcyJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MiAvKiBTY2FuQ29kZS5MYW5nMyAqLywgJ0xhbmczJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0MyAvKiBTY2FuQ29kZS5MYW5nNCAqLywgJ0xhbmc0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NCAvKiBTY2FuQ29kZS5MYW5nNSAqLywgJ0xhbmc1JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NSAvKiBTY2FuQ29kZS5BYm9ydCAqLywgJ0Fib3J0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NiAvKiBTY2FuQ29kZS5Qcm9wcyAqLywgJ1Byb3BzJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0NyAvKiBTY2FuQ29kZS5OdW1wYWRQYXJlbkxlZnQgKi8sICdOdW1wYWRQYXJlbkxlZnQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTQ4IC8qIFNjYW5Db2RlLk51bXBhZFBhcmVuUmlnaHQgKi8sICdOdW1wYWRQYXJlblJpZ2h0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE0OSAvKiBTY2FuQ29kZS5OdW1wYWRCYWNrc3BhY2UgKi8sICdOdW1wYWRCYWNrc3BhY2UnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTUwIC8qIFNjYW5Db2RlLk51bXBhZE1lbW9yeVN0b3JlICovLCAnTnVtcGFkTWVtb3J5U3RvcmUnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTUxIC8qIFNjYW5Db2RlLk51bXBhZE1lbW9yeVJlY2FsbCAqLywgJ051bXBhZE1lbW9yeVJlY2FsbCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNTIgLyogU2NhbkNvZGUuTnVtcGFkTWVtb3J5Q2xlYXIgKi8sICdOdW1wYWRNZW1vcnlDbGVhcicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNTMgLyogU2NhbkNvZGUuTnVtcGFkTWVtb3J5QWRkICovLCAnTnVtcGFkTWVtb3J5QWRkJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE1NCAvKiBTY2FuQ29kZS5OdW1wYWRNZW1vcnlTdWJ0cmFjdCAqLywgJ051bXBhZE1lbW9yeVN1YnRyYWN0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE1NSAvKiBTY2FuQ29kZS5OdW1wYWRDbGVhciAqLywgJ051bXBhZENsZWFyJywgMTMxIC8qIEtleUNvZGUuQ2xlYXIgKi8sICdDbGVhcicsIDEyLCAnVktfQ0xFQVInLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTU2IC8qIFNjYW5Db2RlLk51bXBhZENsZWFyRW50cnkgKi8sICdOdW1wYWRDbGVhckVudHJ5JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDUgLyogS2V5Q29kZS5DdHJsICovLCAnQ3RybCcsIDE3LCAnVktfQ09OVFJPTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCA0IC8qIEtleUNvZGUuU2hpZnQgKi8sICdTaGlmdCcsIDE2LCAnVktfU0hJRlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgNiAvKiBLZXlDb2RlLkFsdCAqLywgJ0FsdCcsIDE4LCAnVktfTUVOVScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCA1NyAvKiBLZXlDb2RlLk1ldGEgKi8sICdNZXRhJywgOTEsICdWS19DT01NQU5EJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE1NyAvKiBTY2FuQ29kZS5Db250cm9sTGVmdCAqLywgJ0NvbnRyb2xMZWZ0JywgNSAvKiBLZXlDb2RlLkN0cmwgKi8sIGVtcHR5LCAwLCAnVktfTENPTlRST0wnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTU4IC8qIFNjYW5Db2RlLlNoaWZ0TGVmdCAqLywgJ1NoaWZ0TGVmdCcsIDQgLyogS2V5Q29kZS5TaGlmdCAqLywgZW1wdHksIDAsICdWS19MU0hJRlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTU5IC8qIFNjYW5Db2RlLkFsdExlZnQgKi8sICdBbHRMZWZ0JywgNiAvKiBLZXlDb2RlLkFsdCAqLywgZW1wdHksIDAsICdWS19MTUVOVScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjAgLyogU2NhbkNvZGUuTWV0YUxlZnQgKi8sICdNZXRhTGVmdCcsIDU3IC8qIEtleUNvZGUuTWV0YSAqLywgZW1wdHksIDAsICdWS19MV0lOJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2MSAvKiBTY2FuQ29kZS5Db250cm9sUmlnaHQgKi8sICdDb250cm9sUmlnaHQnLCA1IC8qIEtleUNvZGUuQ3RybCAqLywgZW1wdHksIDAsICdWS19SQ09OVFJPTCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjIgLyogU2NhbkNvZGUuU2hpZnRSaWdodCAqLywgJ1NoaWZ0UmlnaHQnLCA0IC8qIEtleUNvZGUuU2hpZnQgKi8sIGVtcHR5LCAwLCAnVktfUlNISUZUJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2MyAvKiBTY2FuQ29kZS5BbHRSaWdodCAqLywgJ0FsdFJpZ2h0JywgNiAvKiBLZXlDb2RlLkFsdCAqLywgZW1wdHksIDAsICdWS19STUVOVScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjQgLyogU2NhbkNvZGUuTWV0YVJpZ2h0ICovLCAnTWV0YVJpZ2h0JywgNTcgLyogS2V5Q29kZS5NZXRhICovLCBlbXB0eSwgMCwgJ1ZLX1JXSU4nLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTY1IC8qIFNjYW5Db2RlLkJyaWdodG5lc3NVcCAqLywgJ0JyaWdodG5lc3NVcCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjYgLyogU2NhbkNvZGUuQnJpZ2h0bmVzc0Rvd24gKi8sICdCcmlnaHRuZXNzRG93bicsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNjcgLyogU2NhbkNvZGUuTWVkaWFQbGF5ICovLCAnTWVkaWFQbGF5JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2OCAvKiBTY2FuQ29kZS5NZWRpYVJlY29yZCAqLywgJ01lZGlhUmVjb3JkJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE2OSAvKiBTY2FuQ29kZS5NZWRpYUZhc3RGb3J3YXJkICovLCAnTWVkaWFGYXN0Rm9yd2FyZCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNzAgLyogU2NhbkNvZGUuTWVkaWFSZXdpbmQgKi8sICdNZWRpYVJld2luZCcsIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgZW1wdHksIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNzEgLyogU2NhbkNvZGUuTWVkaWFUcmFja05leHQgKi8sICdNZWRpYVRyYWNrTmV4dCcsIDEyNCAvKiBLZXlDb2RlLk1lZGlhVHJhY2tOZXh0ICovLCAnTWVkaWFUcmFja05leHQnLCAxNzYsICdWS19NRURJQV9ORVhUX1RSQUNLJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3MiAvKiBTY2FuQ29kZS5NZWRpYVRyYWNrUHJldmlvdXMgKi8sICdNZWRpYVRyYWNrUHJldmlvdXMnLCAxMjUgLyogS2V5Q29kZS5NZWRpYVRyYWNrUHJldmlvdXMgKi8sICdNZWRpYVRyYWNrUHJldmlvdXMnLCAxNzcsICdWS19NRURJQV9QUkVWX1RSQUNLJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3MyAvKiBTY2FuQ29kZS5NZWRpYVN0b3AgKi8sICdNZWRpYVN0b3AnLCAxMjYgLyogS2V5Q29kZS5NZWRpYVN0b3AgKi8sICdNZWRpYVN0b3AnLCAxNzgsICdWS19NRURJQV9TVE9QJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3NCAvKiBTY2FuQ29kZS5FamVjdCAqLywgJ0VqZWN0JywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3NSAvKiBTY2FuQ29kZS5NZWRpYVBsYXlQYXVzZSAqLywgJ01lZGlhUGxheVBhdXNlJywgMTI3IC8qIEtleUNvZGUuTWVkaWFQbGF5UGF1c2UgKi8sICdNZWRpYVBsYXlQYXVzZScsIDE3OSwgJ1ZLX01FRElBX1BMQVlfUEFVU0UnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTc2IC8qIFNjYW5Db2RlLk1lZGlhU2VsZWN0ICovLCAnTWVkaWFTZWxlY3QnLCAxMjggLyogS2V5Q29kZS5MYXVuY2hNZWRpYVBsYXllciAqLywgJ0xhdW5jaE1lZGlhUGxheWVyJywgMTgxLCAnVktfTUVESUFfTEFVTkNIX01FRElBX1NFTEVDVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxNzcgLyogU2NhbkNvZGUuTGF1bmNoTWFpbCAqLywgJ0xhdW5jaE1haWwnLCAxMjkgLyogS2V5Q29kZS5MYXVuY2hNYWlsICovLCAnTGF1bmNoTWFpbCcsIDE4MCwgJ1ZLX01FRElBX0xBVU5DSF9NQUlMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE3OCAvKiBTY2FuQ29kZS5MYXVuY2hBcHAyICovLCAnTGF1bmNoQXBwMicsIDEzMCAvKiBLZXlDb2RlLkxhdW5jaEFwcDIgKi8sICdMYXVuY2hBcHAyJywgMTgzLCAnVktfTUVESUFfTEFVTkNIX0FQUDInLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTc5IC8qIFNjYW5Db2RlLkxhdW5jaEFwcDEgKi8sICdMYXVuY2hBcHAxJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfTUVESUFfTEFVTkNIX0FQUDEnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTgwIC8qIFNjYW5Db2RlLlNlbGVjdFRhc2sgKi8sICdTZWxlY3RUYXNrJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE4MSAvKiBTY2FuQ29kZS5MYXVuY2hTY3JlZW5TYXZlciAqLywgJ0xhdW5jaFNjcmVlblNhdmVyJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE4MiAvKiBTY2FuQ29kZS5Ccm93c2VyU2VhcmNoICovLCAnQnJvd3NlclNlYXJjaCcsIDEyMCAvKiBLZXlDb2RlLkJyb3dzZXJTZWFyY2ggKi8sICdCcm93c2VyU2VhcmNoJywgMTcwLCAnVktfQlJPV1NFUl9TRUFSQ0gnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTgzIC8qIFNjYW5Db2RlLkJyb3dzZXJIb21lICovLCAnQnJvd3NlckhvbWUnLCAxMjEgLyogS2V5Q29kZS5Ccm93c2VySG9tZSAqLywgJ0Jyb3dzZXJIb21lJywgMTcyLCAnVktfQlJPV1NFUl9IT01FJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE4NCAvKiBTY2FuQ29kZS5Ccm93c2VyQmFjayAqLywgJ0Jyb3dzZXJCYWNrJywgMTIyIC8qIEtleUNvZGUuQnJvd3NlckJhY2sgKi8sICdCcm93c2VyQmFjaycsIDE2NiwgJ1ZLX0JST1dTRVJfQkFDSycsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAxODUgLyogU2NhbkNvZGUuQnJvd3NlckZvcndhcmQgKi8sICdCcm93c2VyRm9yd2FyZCcsIDEyMyAvKiBLZXlDb2RlLkJyb3dzZXJGb3J3YXJkICovLCAnQnJvd3NlckZvcndhcmQnLCAxNjcsICdWS19CUk9XU0VSX0ZPUldBUkQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg2IC8qIFNjYW5Db2RlLkJyb3dzZXJTdG9wICovLCAnQnJvd3NlclN0b3AnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19CUk9XU0VSX1NUT1AnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg3IC8qIFNjYW5Db2RlLkJyb3dzZXJSZWZyZXNoICovLCAnQnJvd3NlclJlZnJlc2gnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19CUk9XU0VSX1JFRlJFU0gnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg4IC8qIFNjYW5Db2RlLkJyb3dzZXJGYXZvcml0ZXMgKi8sICdCcm93c2VyRmF2b3JpdGVzJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfQlJPV1NFUl9GQVZPUklURVMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTg5IC8qIFNjYW5Db2RlLlpvb21Ub2dnbGUgKi8sICdab29tVG9nZ2xlJywgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCBlbXB0eSwgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDE5MCAvKiBTY2FuQ29kZS5NYWlsUmVwbHkgKi8sICdNYWlsUmVwbHknLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTkxIC8qIFNjYW5Db2RlLk1haWxGb3J3YXJkICovLCAnTWFpbEZvcndhcmQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMTkyIC8qIFNjYW5Db2RlLk1haWxTZW5kICovLCAnTWFpbFNlbmQnLCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1kb20vMjAxMEp1bFNlcC9hdHQtMDE4Mi9rZXlDb2RlLXNwZWMuaHRtbFxuICAgICAgICAvLyBJZiBhbiBJbnB1dCBNZXRob2QgRWRpdG9yIGlzIHByb2Nlc3Npbmcga2V5IGlucHV0IGFuZCB0aGUgZXZlbnQgaXMga2V5ZG93biwgcmV0dXJuIDIyOS5cbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDExNCAvKiBLZXlDb2RlLktFWV9JTl9DT01QT1NJVElPTiAqLywgJ0tleUluQ29tcG9zaXRpb24nLCAyMjksIGVtcHR5LCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMTE2IC8qIEtleUNvZGUuQUJOVF9DMiAqLywgJ0FCTlRfQzInLCAxOTQsICdWS19BQk5UX0MyJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDk2IC8qIEtleUNvZGUuT0VNXzggKi8sICdPRU1fOCcsIDIyMywgJ1ZLX09FTV84JywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0tBTkEnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfSEFOR1VMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0pVTkpBJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0ZJTkFMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0hBTkpBJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0tBTkpJJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0NPTlZFUlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfTk9OQ09OVkVSVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19BQ0NFUFQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfTU9ERUNIQU5HRScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19TRUxFQ1QnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfUFJJTlQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfRVhFQ1VURScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19TTkFQU0hPVCcsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19IRUxQJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0FQUFMnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfUFJPQ0VTU0tFWScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19QQUNLRVQnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfREJFX1NCQ1NDSEFSJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0RCRV9EQkNTQ0hBUicsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19BVFROJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0NSU0VMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0VYU0VMJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX0VSRU9GJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX1BMQVknLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfWk9PTScsIGVtcHR5LCBlbXB0eV0sXG4gICAgICAgIFsxLCAwIC8qIFNjYW5Db2RlLk5vbmUgKi8sIGVtcHR5LCAwIC8qIEtleUNvZGUuVW5rbm93biAqLywgZW1wdHksIDAsICdWS19OT05BTUUnLCBlbXB0eSwgZW1wdHldLFxuICAgICAgICBbMSwgMCAvKiBTY2FuQ29kZS5Ob25lICovLCBlbXB0eSwgMCAvKiBLZXlDb2RlLlVua25vd24gKi8sIGVtcHR5LCAwLCAnVktfUEExJywgZW1wdHksIGVtcHR5XSxcbiAgICAgICAgWzEsIDAgLyogU2NhbkNvZGUuTm9uZSAqLywgZW1wdHksIDAgLyogS2V5Q29kZS5Vbmtub3duICovLCBlbXB0eSwgMCwgJ1ZLX09FTV9DTEVBUicsIGVtcHR5LCBlbXB0eV0sXG4gICAgXTtcbiAgICBjb25zdCBzZWVuS2V5Q29kZSA9IFtdO1xuICAgIGNvbnN0IHNlZW5TY2FuQ29kZSA9IFtdO1xuICAgIGZvciAoY29uc3QgbWFwcGluZyBvZiBtYXBwaW5ncykge1xuICAgICAgICBjb25zdCBbaW1tdXRhYmxlLCBzY2FuQ29kZSwgc2NhbkNvZGVTdHIsIGtleUNvZGUsIGtleUNvZGVTdHIsIGV2ZW50S2V5Q29kZSwgdmtleSwgdXNVc2VyU2V0dGluZ3NMYWJlbCwgZ2VuZXJhbFVzZXJTZXR0aW5nc0xhYmVsXSA9IG1hcHBpbmc7XG4gICAgICAgIGlmICghc2VlblNjYW5Db2RlW3NjYW5Db2RlXSkge1xuICAgICAgICAgICAgc2VlblNjYW5Db2RlW3NjYW5Db2RlXSA9IHRydWU7XG4gICAgICAgICAgICBzY2FuQ29kZUludFRvU3RyW3NjYW5Db2RlXSA9IHNjYW5Db2RlU3RyO1xuICAgICAgICAgICAgc2NhbkNvZGVTdHJUb0ludFtzY2FuQ29kZVN0cl0gPSBzY2FuQ29kZTtcbiAgICAgICAgICAgIHNjYW5Db2RlTG93ZXJDYXNlU3RyVG9JbnRbc2NhbkNvZGVTdHIudG9Mb3dlckNhc2UoKV0gPSBzY2FuQ29kZTtcbiAgICAgICAgICAgIGlmIChpbW11dGFibGUpIHtcbiAgICAgICAgICAgICAgICBJTU1VVEFCTEVfQ09ERV9UT19LRVlfQ09ERVtzY2FuQ29kZV0gPSBrZXlDb2RlO1xuICAgICAgICAgICAgICAgIGlmICgoa2V5Q29kZSAhPT0gMCAvKiBLZXlDb2RlLlVua25vd24gKi8pXG4gICAgICAgICAgICAgICAgICAgICYmIChrZXlDb2RlICE9PSAzIC8qIEtleUNvZGUuRW50ZXIgKi8pXG4gICAgICAgICAgICAgICAgICAgICYmIChrZXlDb2RlICE9PSA1IC8qIEtleUNvZGUuQ3RybCAqLylcbiAgICAgICAgICAgICAgICAgICAgJiYgKGtleUNvZGUgIT09IDQgLyogS2V5Q29kZS5TaGlmdCAqLylcbiAgICAgICAgICAgICAgICAgICAgJiYgKGtleUNvZGUgIT09IDYgLyogS2V5Q29kZS5BbHQgKi8pXG4gICAgICAgICAgICAgICAgICAgICYmIChrZXlDb2RlICE9PSA1NyAvKiBLZXlDb2RlLk1ldGEgKi8pKSB7XG4gICAgICAgICAgICAgICAgICAgIElNTVVUQUJMRV9LRVlfQ09ERV9UT19DT0RFW2tleUNvZGVdID0gc2NhbkNvZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc2VlbktleUNvZGVba2V5Q29kZV0pIHtcbiAgICAgICAgICAgIHNlZW5LZXlDb2RlW2tleUNvZGVdID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICgha2V5Q29kZVN0cikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG1pc3NpbmcgZm9yIGtleSBjb2RlICR7a2V5Q29kZX0gYXJvdW5kIHNjYW4gY29kZSAke3NjYW5Db2RlU3RyfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdWlNYXAuZGVmaW5lKGtleUNvZGUsIGtleUNvZGVTdHIpO1xuICAgICAgICAgICAgdXNlclNldHRpbmdzVVNNYXAuZGVmaW5lKGtleUNvZGUsIHVzVXNlclNldHRpbmdzTGFiZWwgfHwga2V5Q29kZVN0cik7XG4gICAgICAgICAgICB1c2VyU2V0dGluZ3NHZW5lcmFsTWFwLmRlZmluZShrZXlDb2RlLCBnZW5lcmFsVXNlclNldHRpbmdzTGFiZWwgfHwgdXNVc2VyU2V0dGluZ3NMYWJlbCB8fCBrZXlDb2RlU3RyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRLZXlDb2RlKSB7XG4gICAgICAgICAgICBFVkVOVF9LRVlfQ09ERV9NQVBbZXZlbnRLZXlDb2RlXSA9IGtleUNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZrZXkpIHtcbiAgICAgICAgICAgIE5BVElWRV9XSU5ET1dTX0tFWV9DT0RFX1RPX0tFWV9DT0RFW3ZrZXldID0ga2V5Q29kZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBNYW51YWxseSBhZGRlZCBkdWUgdG8gdGhlIGV4Y2x1c2lvbiBhYm92ZSAoZHVlIHRvIGR1cGxpY2F0aW9uIHdpdGggTnVtcGFkRW50ZXIpXG4gICAgSU1NVVRBQkxFX0tFWV9DT0RFX1RPX0NPREVbMyAvKiBLZXlDb2RlLkVudGVyICovXSA9IDQ2IC8qIFNjYW5Db2RlLkVudGVyICovO1xufSkoKTtcbmV4cG9ydCB2YXIgS2V5Q29kZVV0aWxzO1xuKGZ1bmN0aW9uIChLZXlDb2RlVXRpbHMpIHtcbiAgICBmdW5jdGlvbiB0b1N0cmluZyhrZXlDb2RlKSB7XG4gICAgICAgIHJldHVybiB1aU1hcC5rZXlDb2RlVG9TdHIoa2V5Q29kZSk7XG4gICAgfVxuICAgIEtleUNvZGVVdGlscy50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcoa2V5KSB7XG4gICAgICAgIHJldHVybiB1aU1hcC5zdHJUb0tleUNvZGUoa2V5KTtcbiAgICB9XG4gICAgS2V5Q29kZVV0aWxzLmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xuICAgIGZ1bmN0aW9uIHRvVXNlclNldHRpbmdzVVMoa2V5Q29kZSkge1xuICAgICAgICByZXR1cm4gdXNlclNldHRpbmdzVVNNYXAua2V5Q29kZVRvU3RyKGtleUNvZGUpO1xuICAgIH1cbiAgICBLZXlDb2RlVXRpbHMudG9Vc2VyU2V0dGluZ3NVUyA9IHRvVXNlclNldHRpbmdzVVM7XG4gICAgZnVuY3Rpb24gdG9Vc2VyU2V0dGluZ3NHZW5lcmFsKGtleUNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJTZXR0aW5nc0dlbmVyYWxNYXAua2V5Q29kZVRvU3RyKGtleUNvZGUpO1xuICAgIH1cbiAgICBLZXlDb2RlVXRpbHMudG9Vc2VyU2V0dGluZ3NHZW5lcmFsID0gdG9Vc2VyU2V0dGluZ3NHZW5lcmFsO1xuICAgIGZ1bmN0aW9uIGZyb21Vc2VyU2V0dGluZ3Moa2V5KSB7XG4gICAgICAgIHJldHVybiB1c2VyU2V0dGluZ3NVU01hcC5zdHJUb0tleUNvZGUoa2V5KSB8fCB1c2VyU2V0dGluZ3NHZW5lcmFsTWFwLnN0clRvS2V5Q29kZShrZXkpO1xuICAgIH1cbiAgICBLZXlDb2RlVXRpbHMuZnJvbVVzZXJTZXR0aW5ncyA9IGZyb21Vc2VyU2V0dGluZ3M7XG4gICAgZnVuY3Rpb24gdG9FbGVjdHJvbkFjY2VsZXJhdG9yKGtleUNvZGUpIHtcbiAgICAgICAgaWYgKGtleUNvZGUgPj0gOTggLyogS2V5Q29kZS5OdW1wYWQwICovICYmIGtleUNvZGUgPD0gMTEzIC8qIEtleUNvZGUuTnVtcGFkRGl2aWRlICovKSB7XG4gICAgICAgICAgICAvLyBbRWxlY3Ryb24gQWNjZWxlcmF0b3JzXSBFbGVjdHJvbiBpcyBhYmxlIHRvIHBhcnNlIG51bXBhZCBrZXlzLCBidXQgdW5mb3J0dW5hdGVseSBpdFxuICAgICAgICAgICAgLy8gcmVuZGVycyB0aGVtIGp1c3QgYXMgcmVndWxhciBrZXlzIGluIG1lbnVzLiBGb3IgZXhhbXBsZSwgbnVtMCBpcyByZW5kZXJlZCBhcyBcIjBcIixcbiAgICAgICAgICAgIC8vIG51bWRpdiBpcyByZW5kZXJlZCBhcyBcIi9cIiwgbnVtc3ViIGlzIHJlbmRlcmVkIGFzIFwiLVwiLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIGxlYWQgdG8gaW5jcmVkaWJsZSBjb25mdXNpb24sIGFzIGl0IG1ha2VzIG51bXBhZCBiYXNlZCBrZXliaW5kaW5ncyBpbmRpc3Rpbmd1aXNoYWJsZVxuICAgICAgICAgICAgLy8gZnJvbSBrZXliaW5kaW5ncyBiYXNlZCBvbiByZWd1bGFyIGtleXMuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gV2UgdGhlcmVmb3JlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIGN1c3RvbSByZW5kZXJpbmcgZm9yIG51bXBhZCBrZXlzLlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDE2IC8qIEtleUNvZGUuVXBBcnJvdyAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1VwJztcbiAgICAgICAgICAgIGNhc2UgMTggLyogS2V5Q29kZS5Eb3duQXJyb3cgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuICdEb3duJztcbiAgICAgICAgICAgIGNhc2UgMTUgLyogS2V5Q29kZS5MZWZ0QXJyb3cgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuICdMZWZ0JztcbiAgICAgICAgICAgIGNhc2UgMTcgLyogS2V5Q29kZS5SaWdodEFycm93ICovOlxuICAgICAgICAgICAgICAgIHJldHVybiAnUmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1aU1hcC5rZXlDb2RlVG9TdHIoa2V5Q29kZSk7XG4gICAgfVxuICAgIEtleUNvZGVVdGlscy50b0VsZWN0cm9uQWNjZWxlcmF0b3IgPSB0b0VsZWN0cm9uQWNjZWxlcmF0b3I7XG59KShLZXlDb2RlVXRpbHMgfHwgKEtleUNvZGVVdGlscyA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gS2V5Q2hvcmQoZmlyc3RQYXJ0LCBzZWNvbmRQYXJ0KSB7XG4gICAgY29uc3QgY2hvcmRQYXJ0ID0gKChzZWNvbmRQYXJ0ICYgMHgwMDAwRkZGRikgPDwgMTYpID4+PiAwO1xuICAgIHJldHVybiAoZmlyc3RQYXJ0IHwgY2hvcmRQYXJ0KSA+Pj4gMDtcbn1cbiJdLCJuYW1lcyI6WyJLZXlDb2RlU3RyTWFwIiwiY29uc3RydWN0b3IiLCJfa2V5Q29kZVRvU3RyIiwiX3N0clRvS2V5Q29kZSIsIk9iamVjdCIsImNyZWF0ZSIsImRlZmluZSIsImtleUNvZGUiLCJzdHIiLCJ0b0xvd2VyQ2FzZSIsImtleUNvZGVUb1N0ciIsInN0clRvS2V5Q29kZSIsInVpTWFwIiwidXNlclNldHRpbmdzVVNNYXAiLCJ1c2VyU2V0dGluZ3NHZW5lcmFsTWFwIiwiRVZFTlRfS0VZX0NPREVfTUFQIiwiQXJyYXkiLCJOQVRJVkVfV0lORE9XU19LRVlfQ09ERV9UT19LRVlfQ09ERSIsInNjYW5Db2RlSW50VG9TdHIiLCJzY2FuQ29kZVN0clRvSW50Iiwic2NhbkNvZGVMb3dlckNhc2VTdHJUb0ludCIsIklNTVVUQUJMRV9DT0RFX1RPX0tFWV9DT0RFIiwiSU1NVVRBQkxFX0tFWV9DT0RFX1RPX0NPREUiLCJpIiwiZW1wdHkiLCJtYXBwaW5ncyIsInNlZW5LZXlDb2RlIiwic2VlblNjYW5Db2RlIiwibWFwcGluZyIsImltbXV0YWJsZSIsInNjYW5Db2RlIiwic2NhbkNvZGVTdHIiLCJrZXlDb2RlU3RyIiwiZXZlbnRLZXlDb2RlIiwidmtleSIsInVzVXNlclNldHRpbmdzTGFiZWwiLCJnZW5lcmFsVXNlclNldHRpbmdzTGFiZWwiLCJFcnJvciIsIktleUNvZGVVdGlscyIsInRvU3RyaW5nIiwiZnJvbVN0cmluZyIsImtleSIsInRvVXNlclNldHRpbmdzVVMiLCJ0b1VzZXJTZXR0aW5nc0dlbmVyYWwiLCJmcm9tVXNlclNldHRpbmdzIiwidG9FbGVjdHJvbkFjY2VsZXJhdG9yIiwiS2V5Q2hvcmQiLCJmaXJzdFBhcnQiLCJzZWNvbmRQYXJ0IiwiY2hvcmRQYXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lazy.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lazy.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Lazy\": function() { return /* binding */ Lazy; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Lazy {\n  constructor(executor) {\n    this.executor = executor;\n    this._didRun = false;\n  }\n  /**\n   * Get the wrapped value.\n   *\n   * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n   * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n   */\n  get value() {\n    if (!this._didRun) {\n      try {\n        this._value = this.executor();\n      } catch (err) {\n        this._error = err;\n      } finally {\n        this._didRun = true;\n      }\n    }\n    if (this._error) {\n      throw this._error;\n    }\n    return this._value;\n  }\n  /**\n   * Get the wrapped value without forcing evaluation.\n   */\n  get rawValue() {\n    return this._value;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGF6eS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxJQUFJLENBQUM7RUFDZEMsV0FBV0EsQ0FBQ0MsUUFBUSxFQUFFO0lBQ2xCLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEtBQUs7RUFDeEI7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSSxJQUFJQyxLQUFLQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUMsSUFBSSxDQUFDRCxPQUFPLEVBQUU7TUFDZixJQUFJO1FBQ0EsSUFBSSxDQUFDRSxNQUFNLEdBQUcsSUFBSSxDQUFDSCxRQUFRLENBQUMsQ0FBQztNQUNqQyxDQUFDLENBQ0QsT0FBT0ksR0FBRyxFQUFFO1FBQ1IsSUFBSSxDQUFDQyxNQUFNLEdBQUdELEdBQUc7TUFDckIsQ0FBQyxTQUNPO1FBQ0osSUFBSSxDQUFDSCxPQUFPLEdBQUcsSUFBSTtNQUN2QjtJQUNKO0lBQ0EsSUFBSSxJQUFJLENBQUNJLE1BQU0sRUFBRTtNQUNiLE1BQU0sSUFBSSxDQUFDQSxNQUFNO0lBQ3JCO0lBQ0EsT0FBTyxJQUFJLENBQUNGLE1BQU07RUFDdEI7RUFDQTtBQUNKO0FBQ0E7RUFDSSxJQUFJRyxRQUFRQSxDQUFBLEVBQUc7SUFBRSxPQUFPLElBQUksQ0FBQ0gsTUFBTTtFQUFFO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9sYXp5LmpzP2UxYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgY2xhc3MgTGF6eSB7XG4gICAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICAgICAgdGhpcy5leGVjdXRvciA9IGV4ZWN1dG9yO1xuICAgICAgICB0aGlzLl9kaWRSdW4gPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogVGhpcyB3aWxsIGZvcmNlIGV2YWx1YXRpb24gb2YgdGhlIGxhenkgdmFsdWUgaWYgaXQgaGFzIG5vdCBiZWVuIHJlc29sdmVkIHlldC4gTGF6eSB2YWx1ZXMgYXJlIG9ubHlcbiAgICAgKiByZXNvbHZlZCBvbmNlLiBgZ2V0VmFsdWVgIHdpbGwgcmUtdGhyb3cgZXhjZXB0aW9ucyB0aGF0IGFyZSBoaXQgd2hpbGUgcmVzb2x2aW5nIHRoZSB2YWx1ZVxuICAgICAqL1xuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kaWRSdW4pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLmV4ZWN1dG9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWRSdW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5fZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHdyYXBwZWQgdmFsdWUgd2l0aG91dCBmb3JjaW5nIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgZ2V0IHJhd1ZhbHVlKCkgeyByZXR1cm4gdGhpcy5fdmFsdWU7IH1cbn1cbiJdLCJuYW1lcyI6WyJMYXp5IiwiY29uc3RydWN0b3IiLCJleGVjdXRvciIsIl9kaWRSdW4iLCJ2YWx1ZSIsIl92YWx1ZSIsImVyciIsIl9lcnJvciIsInJhd1ZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/lazy.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Disposable\": function() { return /* binding */ Disposable; },\n/* harmony export */   \"DisposableMap\": function() { return /* binding */ DisposableMap; },\n/* harmony export */   \"DisposableStore\": function() { return /* binding */ DisposableStore; },\n/* harmony export */   \"ImmortalReference\": function() { return /* binding */ ImmortalReference; },\n/* harmony export */   \"MutableDisposable\": function() { return /* binding */ MutableDisposable; },\n/* harmony export */   \"RefCountedDisposable\": function() { return /* binding */ RefCountedDisposable; },\n/* harmony export */   \"combinedDisposable\": function() { return /* binding */ combinedDisposable; },\n/* harmony export */   \"dispose\": function() { return /* binding */ dispose; },\n/* harmony export */   \"isDisposable\": function() { return /* binding */ isDisposable; },\n/* harmony export */   \"markAsDisposed\": function() { return /* binding */ markAsDisposed; },\n/* harmony export */   \"markAsSingleton\": function() { return /* binding */ markAsSingleton; },\n/* harmony export */   \"setDisposableTracker\": function() { return /* binding */ setDisposableTracker; },\n/* harmony export */   \"toDisposable\": function() { return /* binding */ toDisposable; },\n/* harmony export */   \"trackDisposable\": function() { return /* binding */ trackDisposable; }\n/* harmony export */ });\n/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional.js */ \"./node_modules/monaco-editor/esm/vs/base/common/functional.js\");\n/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterator.js */ \"./node_modules/monaco-editor/esm/vs/base/common/iterator.js\");\n\n\n// #region Disposable Tracking\n/**\n * Enables logging of potentially leaked disposables.\n *\n * A disposable is considered leaked if it is not disposed or not registered as the child of\n * another disposable. This tracking is very simple an only works for classes that either\n * extend Disposable or use a DisposableStore. This means there are a lot of false positives.\n */\nconst TRACK_DISPOSABLES = false;\nlet disposableTracker = null;\nfunction setDisposableTracker(tracker) {\n  disposableTracker = tracker;\n}\nif (TRACK_DISPOSABLES) {\n  const __is_disposable_tracked__ = '__is_disposable_tracked__';\n  setDisposableTracker(new class {\n    trackDisposable(x) {\n      const stack = new Error('Potentially leaked disposable').stack;\n      setTimeout(() => {\n        if (!x[__is_disposable_tracked__]) {\n          console.log(stack);\n        }\n      }, 3000);\n    }\n    setParent(child, parent) {\n      if (child && child !== Disposable.None) {\n        try {\n          child[__is_disposable_tracked__] = true;\n        } catch (_a) {\n          // noop\n        }\n      }\n    }\n    markAsDisposed(disposable) {\n      if (disposable && disposable !== Disposable.None) {\n        try {\n          disposable[__is_disposable_tracked__] = true;\n        } catch (_a) {\n          // noop\n        }\n      }\n    }\n    markAsSingleton(disposable) {}\n  }());\n}\nfunction trackDisposable(x) {\n  disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.trackDisposable(x);\n  return x;\n}\nfunction markAsDisposed(disposable) {\n  disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsDisposed(disposable);\n}\nfunction setParentOfDisposable(child, parent) {\n  disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.setParent(child, parent);\n}\nfunction setParentOfDisposables(children, parent) {\n  if (!disposableTracker) {\n    return;\n  }\n  for (const child of children) {\n    disposableTracker.setParent(child, parent);\n  }\n}\n/**\n * Indicates that the given object is a singleton which does not need to be disposed.\n*/\nfunction markAsSingleton(singleton) {\n  disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsSingleton(singleton);\n  return singleton;\n}\n/**\n * Check if `thing` is {@link IDisposable disposable}.\n */\nfunction isDisposable(thing) {\n  return typeof thing === 'object' && thing !== null && typeof thing.dispose === 'function' && thing.dispose.length === 0;\n}\nfunction dispose(arg) {\n  if (_iterator_js__WEBPACK_IMPORTED_MODULE_1__.Iterable.is(arg)) {\n    const errors = [];\n    for (const d of arg) {\n      if (d) {\n        try {\n          d.dispose();\n        } catch (e) {\n          errors.push(e);\n        }\n      }\n    }\n    if (errors.length === 1) {\n      throw errors[0];\n    } else if (errors.length > 1) {\n      throw new AggregateError(errors, 'Encountered errors while disposing of store');\n    }\n    return Array.isArray(arg) ? [] : arg;\n  } else if (arg) {\n    arg.dispose();\n    return arg;\n  }\n}\n/**\n * Combine multiple disposable values into a single {@link IDisposable}.\n */\nfunction combinedDisposable(...disposables) {\n  const parent = toDisposable(() => dispose(disposables));\n  setParentOfDisposables(disposables, parent);\n  return parent;\n}\n/**\n * Turn a function that implements dispose into an {@link IDisposable}.\n *\n * @param fn Clean up function, guaranteed to be called only **once**.\n */\nfunction toDisposable(fn) {\n  const self = trackDisposable({\n    dispose: (0,_functional_js__WEBPACK_IMPORTED_MODULE_0__.createSingleCallFunction)(() => {\n      markAsDisposed(self);\n      fn();\n    })\n  });\n  return self;\n}\n/**\n * Manages a collection of disposable values.\n *\n * This is the preferred way to manage multiple disposables. A `DisposableStore` is safer to work with than an\n * `IDisposable[]` as it considers edge cases, such as registering the same value multiple times or adding an item to a\n * store that has already been disposed of.\n */\nclass DisposableStore {\n  constructor() {\n    this._toDispose = new Set();\n    this._isDisposed = false;\n    trackDisposable(this);\n  }\n  /**\n   * Dispose of all registered disposables and mark this object as disposed.\n   *\n   * Any future disposables added to this object will be disposed of on `add`.\n   */\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n    markAsDisposed(this);\n    this._isDisposed = true;\n    this.clear();\n  }\n  /**\n   * @return `true` if this object has been disposed of.\n   */\n  get isDisposed() {\n    return this._isDisposed;\n  }\n  /**\n   * Dispose of all registered disposables but do not mark this object as disposed.\n   */\n  clear() {\n    if (this._toDispose.size === 0) {\n      return;\n    }\n    try {\n      dispose(this._toDispose);\n    } finally {\n      this._toDispose.clear();\n    }\n  }\n  /**\n   * Add a new {@link IDisposable disposable} to the collection.\n   */\n  add(o) {\n    if (!o) {\n      return o;\n    }\n    if (o === this) {\n      throw new Error('Cannot register a disposable on itself!');\n    }\n    setParentOfDisposable(o, this);\n    if (this._isDisposed) {\n      if (!DisposableStore.DISABLE_DISPOSED_WARNING) {\n        console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);\n      }\n    } else {\n      this._toDispose.add(o);\n    }\n    return o;\n  }\n  /**\n   * Deletes the value from the store, but does not dispose it.\n   */\n  deleteAndLeak(o) {\n    if (!o) {\n      return;\n    }\n    if (this._toDispose.has(o)) {\n      this._toDispose.delete(o);\n      setParentOfDisposable(o, null);\n    }\n  }\n}\nDisposableStore.DISABLE_DISPOSED_WARNING = false;\n/**\n * Abstract base class for a {@link IDisposable disposable} object.\n *\n * Subclasses can {@linkcode _register} disposables that will be automatically cleaned up when this object is disposed of.\n */\nclass Disposable {\n  constructor() {\n    this._store = new DisposableStore();\n    trackDisposable(this);\n    setParentOfDisposable(this._store, this);\n  }\n  dispose() {\n    markAsDisposed(this);\n    this._store.dispose();\n  }\n  /**\n   * Adds `o` to the collection of disposables managed by this object.\n   */\n  _register(o) {\n    if (o === this) {\n      throw new Error('Cannot register a disposable on itself!');\n    }\n    return this._store.add(o);\n  }\n}\n/**\n * A disposable that does nothing when it is disposed of.\n *\n * TODO: This should not be a static property.\n */\nDisposable.None = Object.freeze({\n  dispose() {}\n});\n/**\n * Manages the lifecycle of a disposable value that may be changed.\n *\n * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can\n * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.\n */\nclass MutableDisposable {\n  constructor() {\n    this._isDisposed = false;\n    trackDisposable(this);\n  }\n  get value() {\n    return this._isDisposed ? undefined : this._value;\n  }\n  set value(value) {\n    var _a;\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\n    if (value) {\n      setParentOfDisposable(value, this);\n    }\n    this._value = value;\n  }\n  /**\n   * Resets the stored value and disposed of the previously stored value.\n   */\n  clear() {\n    this.value = undefined;\n  }\n  dispose() {\n    var _a;\n    this._isDisposed = true;\n    markAsDisposed(this);\n    (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._value = undefined;\n  }\n}\nclass RefCountedDisposable {\n  constructor(_disposable) {\n    this._disposable = _disposable;\n    this._counter = 1;\n  }\n  acquire() {\n    this._counter++;\n    return this;\n  }\n  release() {\n    if (--this._counter === 0) {\n      this._disposable.dispose();\n    }\n    return this;\n  }\n}\nclass ImmortalReference {\n  constructor(object) {\n    this.object = object;\n  }\n  dispose() {}\n}\n/**\n * A map the manages the lifecycle of the values that it stores.\n */\nclass DisposableMap {\n  constructor() {\n    this._store = new Map();\n    this._isDisposed = false;\n    trackDisposable(this);\n  }\n  /**\n   * Disposes of all stored values and mark this object as disposed.\n   *\n   * Trying to use this object after it has been disposed of is an error.\n   */\n  dispose() {\n    markAsDisposed(this);\n    this._isDisposed = true;\n    this.clearAndDisposeAll();\n  }\n  /**\n   * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.\n   */\n  clearAndDisposeAll() {\n    if (!this._store.size) {\n      return;\n    }\n    try {\n      dispose(this._store.values());\n    } finally {\n      this._store.clear();\n    }\n  }\n  get(key) {\n    return this._store.get(key);\n  }\n  set(key, value, skipDisposeOnOverwrite = false) {\n    var _a;\n    if (this._isDisposed) {\n      console.warn(new Error('Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!').stack);\n    }\n    if (!skipDisposeOnOverwrite) {\n      (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    this._store.set(key, value);\n  }\n  /**\n   * Delete the value stored for `key` from this map and also dispose of it.\n   */\n  deleteAndDispose(key) {\n    var _a;\n    (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._store.delete(key);\n  }\n  [Symbol.iterator]() {\n    return this._store[Symbol.iterator]();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/linkedList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LinkedList\": function() { return /* binding */ LinkedList; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n  constructor(element) {\n    this.element = element;\n    this.next = Node.Undefined;\n    this.prev = Node.Undefined;\n  }\n}\nNode.Undefined = new Node(undefined);\nclass LinkedList {\n  constructor() {\n    this._first = Node.Undefined;\n    this._last = Node.Undefined;\n    this._size = 0;\n  }\n  get size() {\n    return this._size;\n  }\n  isEmpty() {\n    return this._first === Node.Undefined;\n  }\n  clear() {\n    let node = this._first;\n    while (node !== Node.Undefined) {\n      const next = node.next;\n      node.prev = Node.Undefined;\n      node.next = Node.Undefined;\n      node = next;\n    }\n    this._first = Node.Undefined;\n    this._last = Node.Undefined;\n    this._size = 0;\n  }\n  unshift(element) {\n    return this._insert(element, false);\n  }\n  push(element) {\n    return this._insert(element, true);\n  }\n  _insert(element, atTheEnd) {\n    const newNode = new Node(element);\n    if (this._first === Node.Undefined) {\n      this._first = newNode;\n      this._last = newNode;\n    } else if (atTheEnd) {\n      // push\n      const oldLast = this._last;\n      this._last = newNode;\n      newNode.prev = oldLast;\n      oldLast.next = newNode;\n    } else {\n      // unshift\n      const oldFirst = this._first;\n      this._first = newNode;\n      newNode.next = oldFirst;\n      oldFirst.prev = newNode;\n    }\n    this._size += 1;\n    let didRemove = false;\n    return () => {\n      if (!didRemove) {\n        didRemove = true;\n        this._remove(newNode);\n      }\n    };\n  }\n  shift() {\n    if (this._first === Node.Undefined) {\n      return undefined;\n    } else {\n      const res = this._first.element;\n      this._remove(this._first);\n      return res;\n    }\n  }\n  pop() {\n    if (this._last === Node.Undefined) {\n      return undefined;\n    } else {\n      const res = this._last.element;\n      this._remove(this._last);\n      return res;\n    }\n  }\n  _remove(node) {\n    if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n      // middle\n      const anchor = node.prev;\n      anchor.next = node.next;\n      node.next.prev = anchor;\n    } else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n      // only node\n      this._first = Node.Undefined;\n      this._last = Node.Undefined;\n    } else if (node.next === Node.Undefined) {\n      // last\n      this._last = this._last.prev;\n      this._last.next = Node.Undefined;\n    } else if (node.prev === Node.Undefined) {\n      // first\n      this._first = this._first.next;\n      this._first.prev = Node.Undefined;\n    }\n    // done\n    this._size -= 1;\n  }\n  *[Symbol.iterator]() {\n    let node = this._first;\n    while (node !== Node.Undefined) {\n      yield node.element;\n      node = node.next;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/map.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BidirectionalMap\": function() { return /* binding */ BidirectionalMap; },\n/* harmony export */   \"LRUCache\": function() { return /* binding */ LRUCache; },\n/* harmony export */   \"LinkedMap\": function() { return /* binding */ LinkedMap; },\n/* harmony export */   \"ResourceMap\": function() { return /* binding */ ResourceMap; },\n/* harmony export */   \"SetMap\": function() { return /* binding */ SetMap; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a, _b;\nclass ResourceMapEntry {\n  constructor(uri, value) {\n    this.uri = uri;\n    this.value = value;\n  }\n}\nfunction isEntries(arg) {\n  return Array.isArray(arg);\n}\nclass ResourceMap {\n  constructor(arg, toKey) {\n    this[_a] = 'ResourceMap';\n    if (arg instanceof ResourceMap) {\n      this.map = new Map(arg.map);\n      this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\n    } else if (isEntries(arg)) {\n      this.map = new Map();\n      this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\n      for (const [resource, value] of arg) {\n        this.set(resource, value);\n      }\n    } else {\n      this.map = new Map();\n      this.toKey = arg !== null && arg !== void 0 ? arg : ResourceMap.defaultToKey;\n    }\n  }\n  set(resource, value) {\n    this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));\n    return this;\n  }\n  get(resource) {\n    var _c;\n    return (_c = this.map.get(this.toKey(resource))) === null || _c === void 0 ? void 0 : _c.value;\n  }\n  has(resource) {\n    return this.map.has(this.toKey(resource));\n  }\n  get size() {\n    return this.map.size;\n  }\n  clear() {\n    this.map.clear();\n  }\n  delete(resource) {\n    return this.map.delete(this.toKey(resource));\n  }\n  forEach(clb, thisArg) {\n    if (typeof thisArg !== 'undefined') {\n      clb = clb.bind(thisArg);\n    }\n    for (const [_, entry] of this.map) {\n      clb(entry.value, entry.uri, this);\n    }\n  }\n  *values() {\n    for (const entry of this.map.values()) {\n      yield entry.value;\n    }\n  }\n  *keys() {\n    for (const entry of this.map.values()) {\n      yield entry.uri;\n    }\n  }\n  *entries() {\n    for (const entry of this.map.values()) {\n      yield [entry.uri, entry.value];\n    }\n  }\n  *[(_a = Symbol.toStringTag, Symbol.iterator)]() {\n    for (const [, entry] of this.map) {\n      yield [entry.uri, entry.value];\n    }\n  }\n}\nResourceMap.defaultToKey = resource => resource.toString();\nclass LinkedMap {\n  constructor() {\n    this[_b] = 'LinkedMap';\n    this._map = new Map();\n    this._head = undefined;\n    this._tail = undefined;\n    this._size = 0;\n    this._state = 0;\n  }\n  clear() {\n    this._map.clear();\n    this._head = undefined;\n    this._tail = undefined;\n    this._size = 0;\n    this._state++;\n  }\n  isEmpty() {\n    return !this._head && !this._tail;\n  }\n  get size() {\n    return this._size;\n  }\n  get first() {\n    var _c;\n    return (_c = this._head) === null || _c === void 0 ? void 0 : _c.value;\n  }\n  get last() {\n    var _c;\n    return (_c = this._tail) === null || _c === void 0 ? void 0 : _c.value;\n  }\n  has(key) {\n    return this._map.has(key);\n  }\n  get(key, touch = 0 /* Touch.None */) {\n    const item = this._map.get(key);\n    if (!item) {\n      return undefined;\n    }\n    if (touch !== 0 /* Touch.None */) {\n      this.touch(item, touch);\n    }\n    return item.value;\n  }\n  set(key, value, touch = 0 /* Touch.None */) {\n    let item = this._map.get(key);\n    if (item) {\n      item.value = value;\n      if (touch !== 0 /* Touch.None */) {\n        this.touch(item, touch);\n      }\n    } else {\n      item = {\n        key,\n        value,\n        next: undefined,\n        previous: undefined\n      };\n      switch (touch) {\n        case 0 /* Touch.None */:\n          this.addItemLast(item);\n          break;\n        case 1 /* Touch.AsOld */:\n          this.addItemFirst(item);\n          break;\n        case 2 /* Touch.AsNew */:\n          this.addItemLast(item);\n          break;\n        default:\n          this.addItemLast(item);\n          break;\n      }\n      this._map.set(key, item);\n      this._size++;\n    }\n    return this;\n  }\n  delete(key) {\n    return !!this.remove(key);\n  }\n  remove(key) {\n    const item = this._map.get(key);\n    if (!item) {\n      return undefined;\n    }\n    this._map.delete(key);\n    this.removeItem(item);\n    this._size--;\n    return item.value;\n  }\n  shift() {\n    if (!this._head && !this._tail) {\n      return undefined;\n    }\n    if (!this._head || !this._tail) {\n      throw new Error('Invalid list');\n    }\n    const item = this._head;\n    this._map.delete(item.key);\n    this.removeItem(item);\n    this._size--;\n    return item.value;\n  }\n  forEach(callbackfn, thisArg) {\n    const state = this._state;\n    let current = this._head;\n    while (current) {\n      if (thisArg) {\n        callbackfn.bind(thisArg)(current.value, current.key, this);\n      } else {\n        callbackfn(current.value, current.key, this);\n      }\n      if (this._state !== state) {\n        throw new Error(`LinkedMap got modified during iteration.`);\n      }\n      current = current.next;\n    }\n  }\n  keys() {\n    const map = this;\n    const state = this._state;\n    let current = this._head;\n    const iterator = {\n      [Symbol.iterator]() {\n        return iterator;\n      },\n      next() {\n        if (map._state !== state) {\n          throw new Error(`LinkedMap got modified during iteration.`);\n        }\n        if (current) {\n          const result = {\n            value: current.key,\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n    return iterator;\n  }\n  values() {\n    const map = this;\n    const state = this._state;\n    let current = this._head;\n    const iterator = {\n      [Symbol.iterator]() {\n        return iterator;\n      },\n      next() {\n        if (map._state !== state) {\n          throw new Error(`LinkedMap got modified during iteration.`);\n        }\n        if (current) {\n          const result = {\n            value: current.value,\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n    return iterator;\n  }\n  entries() {\n    const map = this;\n    const state = this._state;\n    let current = this._head;\n    const iterator = {\n      [Symbol.iterator]() {\n        return iterator;\n      },\n      next() {\n        if (map._state !== state) {\n          throw new Error(`LinkedMap got modified during iteration.`);\n        }\n        if (current) {\n          const result = {\n            value: [current.key, current.value],\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n    return iterator;\n  }\n  [(_b = Symbol.toStringTag, Symbol.iterator)]() {\n    return this.entries();\n  }\n  trimOld(newSize) {\n    if (newSize >= this.size) {\n      return;\n    }\n    if (newSize === 0) {\n      this.clear();\n      return;\n    }\n    let current = this._head;\n    let currentSize = this.size;\n    while (current && currentSize > newSize) {\n      this._map.delete(current.key);\n      current = current.next;\n      currentSize--;\n    }\n    this._head = current;\n    this._size = currentSize;\n    if (current) {\n      current.previous = undefined;\n    }\n    this._state++;\n  }\n  trimNew(newSize) {\n    if (newSize >= this.size) {\n      return;\n    }\n    if (newSize === 0) {\n      this.clear();\n      return;\n    }\n    let current = this._tail;\n    let currentSize = this.size;\n    while (current && currentSize > newSize) {\n      this._map.delete(current.key);\n      current = current.previous;\n      currentSize--;\n    }\n    this._tail = current;\n    this._size = currentSize;\n    if (current) {\n      current.next = undefined;\n    }\n    this._state++;\n  }\n  addItemFirst(item) {\n    // First time Insert\n    if (!this._head && !this._tail) {\n      this._tail = item;\n    } else if (!this._head) {\n      throw new Error('Invalid list');\n    } else {\n      item.next = this._head;\n      this._head.previous = item;\n    }\n    this._head = item;\n    this._state++;\n  }\n  addItemLast(item) {\n    // First time Insert\n    if (!this._head && !this._tail) {\n      this._head = item;\n    } else if (!this._tail) {\n      throw new Error('Invalid list');\n    } else {\n      item.previous = this._tail;\n      this._tail.next = item;\n    }\n    this._tail = item;\n    this._state++;\n  }\n  removeItem(item) {\n    if (item === this._head && item === this._tail) {\n      this._head = undefined;\n      this._tail = undefined;\n    } else if (item === this._head) {\n      // This can only happen if size === 1 which is handled\n      // by the case above.\n      if (!item.next) {\n        throw new Error('Invalid list');\n      }\n      item.next.previous = undefined;\n      this._head = item.next;\n    } else if (item === this._tail) {\n      // This can only happen if size === 1 which is handled\n      // by the case above.\n      if (!item.previous) {\n        throw new Error('Invalid list');\n      }\n      item.previous.next = undefined;\n      this._tail = item.previous;\n    } else {\n      const next = item.next;\n      const previous = item.previous;\n      if (!next || !previous) {\n        throw new Error('Invalid list');\n      }\n      next.previous = previous;\n      previous.next = next;\n    }\n    item.next = undefined;\n    item.previous = undefined;\n    this._state++;\n  }\n  touch(item, touch) {\n    if (!this._head || !this._tail) {\n      throw new Error('Invalid list');\n    }\n    if (touch !== 1 /* Touch.AsOld */ && touch !== 2 /* Touch.AsNew */) {\n      return;\n    }\n    if (touch === 1 /* Touch.AsOld */) {\n      if (item === this._head) {\n        return;\n      }\n      const next = item.next;\n      const previous = item.previous;\n      // Unlink the item\n      if (item === this._tail) {\n        // previous must be defined since item was not head but is tail\n        // So there are more than on item in the map\n        previous.next = undefined;\n        this._tail = previous;\n      } else {\n        // Both next and previous are not undefined since item was neither head nor tail.\n        next.previous = previous;\n        previous.next = next;\n      }\n      // Insert the node at head\n      item.previous = undefined;\n      item.next = this._head;\n      this._head.previous = item;\n      this._head = item;\n      this._state++;\n    } else if (touch === 2 /* Touch.AsNew */) {\n      if (item === this._tail) {\n        return;\n      }\n      const next = item.next;\n      const previous = item.previous;\n      // Unlink the item.\n      if (item === this._head) {\n        // next must be defined since item was not tail but is head\n        // So there are more than on item in the map\n        next.previous = undefined;\n        this._head = next;\n      } else {\n        // Both next and previous are not undefined since item was neither head nor tail.\n        next.previous = previous;\n        previous.next = next;\n      }\n      item.next = undefined;\n      item.previous = this._tail;\n      this._tail.next = item;\n      this._tail = item;\n      this._state++;\n    }\n  }\n  toJSON() {\n    const data = [];\n    this.forEach((value, key) => {\n      data.push([key, value]);\n    });\n    return data;\n  }\n  fromJSON(data) {\n    this.clear();\n    for (const [key, value] of data) {\n      this.set(key, value);\n    }\n  }\n}\nclass Cache extends LinkedMap {\n  constructor(limit, ratio = 1) {\n    super();\n    this._limit = limit;\n    this._ratio = Math.min(Math.max(0, ratio), 1);\n  }\n  get limit() {\n    return this._limit;\n  }\n  set limit(limit) {\n    this._limit = limit;\n    this.checkTrim();\n  }\n  get(key, touch = 2 /* Touch.AsNew */) {\n    return super.get(key, touch);\n  }\n  peek(key) {\n    return super.get(key, 0 /* Touch.None */);\n  }\n  set(key, value) {\n    super.set(key, value, 2 /* Touch.AsNew */);\n    return this;\n  }\n  checkTrim() {\n    if (this.size > this._limit) {\n      this.trim(Math.round(this._limit * this._ratio));\n    }\n  }\n}\nclass LRUCache extends Cache {\n  constructor(limit, ratio = 1) {\n    super(limit, ratio);\n  }\n  trim(newSize) {\n    this.trimOld(newSize);\n  }\n  set(key, value) {\n    super.set(key, value);\n    this.checkTrim();\n    return this;\n  }\n}\n/**\n * A map that allows access both by keys and values.\n * **NOTE**: values need to be unique.\n */\nclass BidirectionalMap {\n  constructor(entries) {\n    this._m1 = new Map();\n    this._m2 = new Map();\n    if (entries) {\n      for (const [key, value] of entries) {\n        this.set(key, value);\n      }\n    }\n  }\n  clear() {\n    this._m1.clear();\n    this._m2.clear();\n  }\n  set(key, value) {\n    this._m1.set(key, value);\n    this._m2.set(value, key);\n  }\n  get(key) {\n    return this._m1.get(key);\n  }\n  getKey(value) {\n    return this._m2.get(value);\n  }\n  delete(key) {\n    const value = this._m1.get(key);\n    if (value === undefined) {\n      return false;\n    }\n    this._m1.delete(key);\n    this._m2.delete(value);\n    return true;\n  }\n  keys() {\n    return this._m1.keys();\n  }\n  values() {\n    return this._m1.values();\n  }\n}\nclass SetMap {\n  constructor() {\n    this.map = new Map();\n  }\n  add(key, value) {\n    let values = this.map.get(key);\n    if (!values) {\n      values = new Set();\n      this.map.set(key, values);\n    }\n    values.add(value);\n  }\n  delete(key, value) {\n    const values = this.map.get(key);\n    if (!values) {\n      return;\n    }\n    values.delete(value);\n    if (values.size === 0) {\n      this.map.delete(key);\n    }\n  }\n  forEach(key, fn) {\n    const values = this.map.get(key);\n    if (!values) {\n      return;\n    }\n    values.forEach(fn);\n  }\n  get(key) {\n    const values = this.map.get(key);\n    if (!values) {\n      return new Set();\n    }\n    return values;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/map.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/objects.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/objects.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cloneAndChange\": function() { return /* binding */ cloneAndChange; },\n/* harmony export */   \"createProxyObject\": function() { return /* binding */ createProxyObject; },\n/* harmony export */   \"deepClone\": function() { return /* binding */ deepClone; },\n/* harmony export */   \"deepFreeze\": function() { return /* binding */ deepFreeze; },\n/* harmony export */   \"equals\": function() { return /* binding */ equals; },\n/* harmony export */   \"getAllMethodNames\": function() { return /* binding */ getAllMethodNames; },\n/* harmony export */   \"getAllPropertyNames\": function() { return /* binding */ getAllPropertyNames; },\n/* harmony export */   \"mixin\": function() { return /* binding */ mixin; }\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/monaco-editor/esm/vs/base/common/types.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nfunction deepClone(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n  if (obj instanceof RegExp) {\n    return obj;\n  }\n  const result = Array.isArray(obj) ? [] : {};\n  Object.entries(obj).forEach(([key, value]) => {\n    result[key] = value && typeof value === 'object' ? deepClone(value) : value;\n  });\n  return result;\n}\nfunction deepFreeze(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n  const stack = [obj];\n  while (stack.length > 0) {\n    const obj = stack.shift();\n    Object.freeze(obj);\n    for (const key in obj) {\n      if (_hasOwnProperty.call(obj, key)) {\n        const prop = obj[key];\n        if (typeof prop === 'object' && !Object.isFrozen(prop) && !(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isTypedArray)(prop)) {\n          stack.push(prop);\n        }\n      }\n    }\n  }\n  return obj;\n}\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction cloneAndChange(obj, changer) {\n  return _cloneAndChange(obj, changer, new Set());\n}\nfunction _cloneAndChange(obj, changer, seen) {\n  if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isUndefinedOrNull)(obj)) {\n    return obj;\n  }\n  const changed = changer(obj);\n  if (typeof changed !== 'undefined') {\n    return changed;\n  }\n  if (Array.isArray(obj)) {\n    const r1 = [];\n    for (const e of obj) {\n      r1.push(_cloneAndChange(e, changer, seen));\n    }\n    return r1;\n  }\n  if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(obj)) {\n    if (seen.has(obj)) {\n      throw new Error('Cannot clone recursive data-structure');\n    }\n    seen.add(obj);\n    const r2 = {};\n    for (const i2 in obj) {\n      if (_hasOwnProperty.call(obj, i2)) {\n        r2[i2] = _cloneAndChange(obj[i2], changer, seen);\n      }\n    }\n    seen.delete(obj);\n    return r2;\n  }\n  return obj;\n}\n/**\n * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\n * if existing properties on the destination should be overwritten or not. Defaults to true (overwrite).\n */\nfunction mixin(destination, source, overwrite = true) {\n  if (!(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination)) {\n    return source;\n  }\n  if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source)) {\n    Object.keys(source).forEach(key => {\n      if (key in destination) {\n        if (overwrite) {\n          if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination[key]) && (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source[key])) {\n            mixin(destination[key], source[key], overwrite);\n          } else {\n            destination[key] = source[key];\n          }\n        }\n      } else {\n        destination[key] = source[key];\n      }\n    });\n  }\n  return destination;\n}\nfunction equals(one, other) {\n  if (one === other) {\n    return true;\n  }\n  if (one === null || one === undefined || other === null || other === undefined) {\n    return false;\n  }\n  if (typeof one !== typeof other) {\n    return false;\n  }\n  if (typeof one !== 'object') {\n    return false;\n  }\n  if (Array.isArray(one) !== Array.isArray(other)) {\n    return false;\n  }\n  let i;\n  let key;\n  if (Array.isArray(one)) {\n    if (one.length !== other.length) {\n      return false;\n    }\n    for (i = 0; i < one.length; i++) {\n      if (!equals(one[i], other[i])) {\n        return false;\n      }\n    }\n  } else {\n    const oneKeys = [];\n    for (key in one) {\n      oneKeys.push(key);\n    }\n    oneKeys.sort();\n    const otherKeys = [];\n    for (key in other) {\n      otherKeys.push(key);\n    }\n    otherKeys.sort();\n    if (!equals(oneKeys, otherKeys)) {\n      return false;\n    }\n    for (i = 0; i < oneKeys.length; i++) {\n      if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction getAllPropertyNames(obj) {\n  let res = [];\n  while (Object.prototype !== obj) {\n    res = res.concat(Object.getOwnPropertyNames(obj));\n    obj = Object.getPrototypeOf(obj);\n  }\n  return res;\n}\nfunction getAllMethodNames(obj) {\n  const methods = [];\n  for (const prop of getAllPropertyNames(obj)) {\n    if (typeof obj[prop] === 'function') {\n      methods.push(prop);\n    }\n  }\n  return methods;\n}\nfunction createProxyObject(methodNames, invoke) {\n  const createProxyMethod = method => {\n    return function () {\n      const args = Array.prototype.slice.call(arguments, 0);\n      return invoke(method, args);\n    };\n  };\n  const result = {};\n  for (const methodName of methodNames) {\n    result[methodName] = createProxyMethod(methodName);\n  }\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/objects.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/path.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/path.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"basename\": function() { return /* binding */ basename; },\n/* harmony export */   \"dirname\": function() { return /* binding */ dirname; },\n/* harmony export */   \"extname\": function() { return /* binding */ extname; },\n/* harmony export */   \"normalize\": function() { return /* binding */ normalize; },\n/* harmony export */   \"posix\": function() { return /* binding */ posix; },\n/* harmony export */   \"relative\": function() { return /* binding */ relative; },\n/* harmony export */   \"resolve\": function() { return /* binding */ resolve; },\n/* harmony export */   \"sep\": function() { return /* binding */ sep; },\n/* harmony export */   \"win32\": function() { return /* binding */ win32; }\n/* harmony export */ });\n/* harmony import */ var _process_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process.js */ \"./node_modules/monaco-editor/esm/vs/base/common/process.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/blob/v16.14.2/lib/path.js\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst CHAR_UPPERCASE_A = 65; /* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\nclass ErrorInvalidArgType extends Error {\n  constructor(name, expected, actual) {\n    // determiner: 'must be' or 'must not be'\n    let determiner;\n    if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n      determiner = 'must not be';\n      expected = expected.replace(/^not /, '');\n    } else {\n      determiner = 'must be';\n    }\n    const type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n    let msg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\n    msg += `. Received type ${typeof actual}`;\n    super(msg);\n    this.code = 'ERR_INVALID_ARG_TYPE';\n  }\n}\nfunction validateObject(pathObject, name) {\n  if (pathObject === null || typeof pathObject !== 'object') {\n    throw new ErrorInvalidArgType(name, 'Object', pathObject);\n  }\n}\nfunction validateString(value, name) {\n  if (typeof value !== 'string') {\n    throw new ErrorInvalidArgType(name, 'string', value);\n  }\n}\nconst platformIsWin32 = _process_js__WEBPACK_IMPORTED_MODULE_0__.platform === 'win32';\nfunction isPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\nfunction isPosixPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH;\n}\nfunction isWindowsDeviceRoot(code) {\n  return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z || code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n}\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n  let res = '';\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code = 0;\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i);\n    } else if (isPathSeparator(code)) {\n      break;\n    } else {\n      code = CHAR_FORWARD_SLASH;\n    }\n    if (isPathSeparator(code)) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator);\n            if (lastSlashIndex === -1) {\n              res = '';\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n            }\n            lastSlash = i;\n            dots = 0;\n            continue;\n          } else if (res.length !== 0) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          res += res.length > 0 ? `${separator}..` : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += `${separator}${path.slice(lastSlash + 1, i)}`;\n        } else {\n          res = path.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nfunction _format(sep, pathObject) {\n  validateObject(pathObject, 'pathObject');\n  const dir = pathObject.dir || pathObject.root;\n  const base = pathObject.base || `${pathObject.name || ''}${pathObject.ext || ''}`;\n  if (!dir) {\n    return base;\n  }\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\n}\nconst win32 = {\n  // path.resolve([from ...], to)\n  resolve(...pathSegments) {\n    let resolvedDevice = '';\n    let resolvedTail = '';\n    let resolvedAbsolute = false;\n    for (let i = pathSegments.length - 1; i >= -1; i--) {\n      let path;\n      if (i >= 0) {\n        path = pathSegments[i];\n        validateString(path, 'path');\n        // Skip empty entries\n        if (path.length === 0) {\n          continue;\n        }\n      } else if (resolvedDevice.length === 0) {\n        path = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\n      } else {\n        // Windows has the concept of drive-specific current working\n        // directories. If we've resolved a drive letter but not yet an\n        // absolute path, get cwd for that drive, or the process cwd if\n        // the drive cwd is not available. We're sure the device is not\n        // a UNC path at this points, because UNC paths are always absolute.\n        path = _process_js__WEBPACK_IMPORTED_MODULE_0__.env[`=${resolvedDevice}`] || _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\n        // Verify that a cwd was found and that it actually points\n        // to our drive. If not, default to the drive's root.\n        if (path === undefined || path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n          path = `${resolvedDevice}\\\\`;\n        }\n      }\n      const len = path.length;\n      let rootEnd = 0;\n      let device = '';\n      let isAbsolute = false;\n      const code = path.charCodeAt(0);\n      // Try to match a root\n      if (len === 1) {\n        if (isPathSeparator(code)) {\n          // `path` contains just a path separator\n          rootEnd = 1;\n          isAbsolute = true;\n        }\n      } else if (isPathSeparator(code)) {\n        // Possible UNC root\n        // If we started with a separator, we know we at least have an\n        // absolute path of some kind (UNC or otherwise)\n        isAbsolute = true;\n        if (isPathSeparator(path.charCodeAt(1))) {\n          // Matched double path separator at beginning\n          let j = 2;\n          let last = j;\n          // Match 1 or more non-path separators\n          while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            const firstPart = path.slice(last, j);\n            // Matched!\n            last = j;\n            // Match 1 or more path separators\n            while (j < len && isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j < len && j !== last) {\n              // Matched!\n              last = j;\n              // Match 1 or more non-path separators\n              while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                j++;\n              }\n              if (j === len || j !== last) {\n                // We matched a UNC root\n                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                rootEnd = j;\n              }\n            }\n          }\n        } else {\n          rootEnd = 1;\n        }\n      } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n        // Possible device root\n        device = path.slice(0, 2);\n        rootEnd = 2;\n        if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n          // Treat separator following drive name as an absolute path\n          // indicator\n          isAbsolute = true;\n          rootEnd = 3;\n        }\n      }\n      if (device.length > 0) {\n        if (resolvedDevice.length > 0) {\n          if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n            // This path points to another device so it is not applicable\n            continue;\n          }\n        } else {\n          resolvedDevice = device;\n        }\n      }\n      if (resolvedAbsolute) {\n        if (resolvedDevice.length > 0) {\n          break;\n        }\n      } else {\n        resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\n        resolvedAbsolute = isAbsolute;\n        if (isAbsolute && resolvedDevice.length > 0) {\n          break;\n        }\n      }\n    }\n    // At this point the path should be resolved to a full absolute path,\n    // but handle relative paths to be safe (might happen when process.cwd()\n    // fails)\n    // Normalize the tail path\n    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\n    return resolvedAbsolute ? `${resolvedDevice}\\\\${resolvedTail}` : `${resolvedDevice}${resolvedTail}` || '.';\n  },\n  normalize(path) {\n    validateString(path, 'path');\n    const len = path.length;\n    if (len === 0) {\n      return '.';\n    }\n    let rootEnd = 0;\n    let device;\n    let isAbsolute = false;\n    const code = path.charCodeAt(0);\n    // Try to match a root\n    if (len === 1) {\n      // `path` contains just a single char, exit early to avoid\n      // unnecessary work\n      return isPosixPathSeparator(code) ? '\\\\' : path;\n    }\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      // If we started with a separator, we know we at least have an absolute\n      // path of some kind (UNC or otherwise)\n      isAbsolute = true;\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j;\n        // Match 1 or more non-path separators\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n        if (j < len && j !== last) {\n          const firstPart = path.slice(last, j);\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              // Return the normalized version of the UNC root since there\n              // is nothing left to process\n              return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\n            }\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n              device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n              rootEnd = j;\n            }\n          }\n        }\n      } else {\n        rootEnd = 1;\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      // Possible device root\n      device = path.slice(0, 2);\n      rootEnd = 2;\n      if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n        // Treat separator following drive name as an absolute path\n        // indicator\n        isAbsolute = true;\n        rootEnd = 3;\n      }\n    }\n    let tail = rootEnd < len ? normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) : '';\n    if (tail.length === 0 && !isAbsolute) {\n      tail = '.';\n    }\n    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n      tail += '\\\\';\n    }\n    if (device === undefined) {\n      return isAbsolute ? `\\\\${tail}` : tail;\n    }\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\n  },\n  isAbsolute(path) {\n    validateString(path, 'path');\n    const len = path.length;\n    if (len === 0) {\n      return false;\n    }\n    const code = path.charCodeAt(0);\n    return isPathSeparator(code) ||\n    // Possible device root\n    len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isPathSeparator(path.charCodeAt(2));\n  },\n  join(...paths) {\n    if (paths.length === 0) {\n      return '.';\n    }\n    let joined;\n    let firstPart;\n    for (let i = 0; i < paths.length; ++i) {\n      const arg = paths[i];\n      validateString(arg, 'path');\n      if (arg.length > 0) {\n        if (joined === undefined) {\n          joined = firstPart = arg;\n        } else {\n          joined += `\\\\${arg}`;\n        }\n      }\n    }\n    if (joined === undefined) {\n      return '.';\n    }\n    // Make sure that the joined path doesn't start with two slashes, because\n    // normalize() will mistake it for a UNC path then.\n    //\n    // This step is skipped when it is very clear that the user actually\n    // intended to point at a UNC path. This is assumed when the first\n    // non-empty string arguments starts with exactly two slashes followed by\n    // at least one more non-slash character.\n    //\n    // Note that for normalize() to treat a path as a UNC path it needs to\n    // have at least 2 components, so we don't filter for that here.\n    // This means that the user can use join to construct UNC paths from\n    // a server name and a share name; for example:\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n    let needsReplace = true;\n    let slashCount = 0;\n    if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n      ++slashCount;\n      const firstLen = firstPart.length;\n      if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\n        ++slashCount;\n        if (firstLen > 2) {\n          if (isPathSeparator(firstPart.charCodeAt(2))) {\n            ++slashCount;\n          } else {\n            // We matched a UNC path in the first part\n            needsReplace = false;\n          }\n        }\n      }\n    }\n    if (needsReplace) {\n      // Find any more consecutive slashes we need to replace\n      while (slashCount < joined.length && isPathSeparator(joined.charCodeAt(slashCount))) {\n        slashCount++;\n      }\n      // Replace the slashes if needed\n      if (slashCount >= 2) {\n        joined = `\\\\${joined.slice(slashCount)}`;\n      }\n    }\n    return win32.normalize(joined);\n  },\n  // It will solve the relative path from `from` to `to`, for instance:\n  //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n  //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n  // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n  relative(from, to) {\n    validateString(from, 'from');\n    validateString(to, 'to');\n    if (from === to) {\n      return '';\n    }\n    const fromOrig = win32.resolve(from);\n    const toOrig = win32.resolve(to);\n    if (fromOrig === toOrig) {\n      return '';\n    }\n    from = fromOrig.toLowerCase();\n    to = toOrig.toLowerCase();\n    if (from === to) {\n      return '';\n    }\n    // Trim any leading backslashes\n    let fromStart = 0;\n    while (fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n      fromStart++;\n    }\n    // Trim trailing backslashes (applicable to UNC paths only)\n    let fromEnd = from.length;\n    while (fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n      fromEnd--;\n    }\n    const fromLen = fromEnd - fromStart;\n    // Trim any leading backslashes\n    let toStart = 0;\n    while (toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n      toStart++;\n    }\n    // Trim trailing backslashes (applicable to UNC paths only)\n    let toEnd = to.length;\n    while (toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n      toEnd--;\n    }\n    const toLen = toEnd - toStart;\n    // Compare paths to find the longest common path from root\n    const length = fromLen < toLen ? fromLen : toLen;\n    let lastCommonSep = -1;\n    let i = 0;\n    for (; i < length; i++) {\n      const fromCode = from.charCodeAt(fromStart + i);\n      if (fromCode !== to.charCodeAt(toStart + i)) {\n        break;\n      } else if (fromCode === CHAR_BACKWARD_SLASH) {\n        lastCommonSep = i;\n      }\n    }\n    // We found a mismatch before the first common path separator was seen, so\n    // return the original `to`.\n    if (i !== length) {\n      if (lastCommonSep === -1) {\n        return toOrig;\n      }\n    } else {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n          return toOrig.slice(toStart + i + 1);\n        }\n        if (i === 2) {\n          // We get here if `from` is the device root.\n          // For example: from='C:\\\\'; to='C:\\\\foo'\n          return toOrig.slice(toStart + i);\n        }\n      }\n      if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n          lastCommonSep = i;\n        } else if (i === 2) {\n          // We get here if `to` is the device root.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n          lastCommonSep = 3;\n        }\n      }\n      if (lastCommonSep === -1) {\n        lastCommonSep = 0;\n      }\n    }\n    let out = '';\n    // Generate the relative path based on the path difference between `to` and\n    // `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n        out += out.length === 0 ? '..' : '\\\\..';\n      }\n    }\n    toStart += lastCommonSep;\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0) {\n      return `${out}${toOrig.slice(toStart, toEnd)}`;\n    }\n    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n      ++toStart;\n    }\n    return toOrig.slice(toStart, toEnd);\n  },\n  toNamespacedPath(path) {\n    // Note: this will *probably* throw somewhere.\n    if (typeof path !== 'string' || path.length === 0) {\n      return path;\n    }\n    const resolvedPath = win32.resolve(path);\n    if (resolvedPath.length <= 2) {\n      return path;\n    }\n    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n      // Possible UNC root\n      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n        const code = resolvedPath.charCodeAt(2);\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n          // Matched non-long UNC root, convert the path to a long UNC path\n          return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\n        }\n      }\n    } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) && resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n      // Matched device root, convert the path to a long UNC path\n      return `\\\\\\\\?\\\\${resolvedPath}`;\n    }\n    return path;\n  },\n  dirname(path) {\n    validateString(path, 'path');\n    const len = path.length;\n    if (len === 0) {\n      return '.';\n    }\n    let rootEnd = -1;\n    let offset = 0;\n    const code = path.charCodeAt(0);\n    if (len === 1) {\n      // `path` contains just a path separator, exit early to avoid\n      // unnecessary work or a dot.\n      return isPathSeparator(code) ? path : '.';\n    }\n    // Try to match a root\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      rootEnd = offset = 1;\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j;\n        // Match 1 or more non-path separators\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n        if (j < len && j !== last) {\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              return path;\n            }\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n              // Offset by 1 to include the separator after the UNC root to\n              // treat it as a \"normal root\" on top of a (UNC) root\n              rootEnd = offset = j + 1;\n            }\n          }\n        }\n      }\n      // Possible device root\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\n      offset = rootEnd;\n    }\n    let end = -1;\n    let matchedSlash = true;\n    for (let i = len - 1; i >= offset; --i) {\n      if (isPathSeparator(path.charCodeAt(i))) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) {\n      if (rootEnd === -1) {\n        return '.';\n      }\n      end = rootEnd;\n    }\n    return path.slice(0, end);\n  },\n  basename(path, ext) {\n    if (ext !== undefined) {\n      validateString(ext, 'ext');\n    }\n    validateString(path, 'path');\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n    if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {\n      start = 2;\n    }\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext === path) {\n        return '';\n      }\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= start; --i) {\n        const code = path.charCodeAt(i);\n        if (isPathSeparator(code)) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) {\n        end = firstNonSlashEnd;\n      } else if (end === -1) {\n        end = path.length;\n      }\n      return path.slice(start, end);\n    }\n    for (i = path.length - 1; i >= start; --i) {\n      if (isPathSeparator(path.charCodeAt(i))) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) {\n      return '';\n    }\n    return path.slice(start, end);\n  },\n  extname(path) {\n    validateString(path, 'path');\n    let start = 0;\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n    if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {\n      start = startPart = 2;\n    }\n    for (let i = path.length - 1; i >= start; --i) {\n      const code = path.charCodeAt(i);\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n  format: _format.bind(null, '\\\\'),\n  parse(path) {\n    validateString(path, 'path');\n    const ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) {\n      return ret;\n    }\n    const len = path.length;\n    let rootEnd = 0;\n    let code = path.charCodeAt(0);\n    if (len === 1) {\n      if (isPathSeparator(code)) {\n        // `path` contains just a path separator, exit early to avoid\n        // unnecessary work\n        ret.root = ret.dir = path;\n        return ret;\n      }\n      ret.base = ret.name = path;\n      return ret;\n    }\n    // Try to match a root\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      rootEnd = 1;\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j;\n        // Match 1 or more non-path separators\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n        if (j < len && j !== last) {\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              rootEnd = j;\n            } else if (j !== last) {\n              // We matched a UNC root with leftovers\n              rootEnd = j + 1;\n            }\n          }\n        }\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      // Possible device root\n      if (len <= 2) {\n        // `path` contains just a drive root, exit early to avoid\n        // unnecessary work\n        ret.root = ret.dir = path;\n        return ret;\n      }\n      rootEnd = 2;\n      if (isPathSeparator(path.charCodeAt(2))) {\n        if (len === 3) {\n          // `path` contains just a drive root, exit early to avoid\n          // unnecessary work\n          ret.root = ret.dir = path;\n          return ret;\n        }\n        rootEnd = 3;\n      }\n    }\n    if (rootEnd > 0) {\n      ret.root = path.slice(0, rootEnd);\n    }\n    let startDot = -1;\n    let startPart = rootEnd;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path.length - 1;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    // Get non-dir info\n    for (; i >= rootEnd; --i) {\n      code = path.charCodeAt(i);\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (end !== -1) {\n      if (startDot === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n        ret.base = ret.name = path.slice(startPart, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n        ret.ext = path.slice(startDot, end);\n      }\n    }\n    // If the directory is the root, use the entire root as the `dir` including\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n    if (startPart > 0 && startPart !== rootEnd) {\n      ret.dir = path.slice(0, startPart - 1);\n    } else {\n      ret.dir = ret.root;\n    }\n    return ret;\n  },\n  sep: '\\\\',\n  delimiter: ';',\n  win32: null,\n  posix: null\n};\nconst posixCwd = (() => {\n  if (platformIsWin32) {\n    // Converts Windows' backslash path separators to POSIX forward slashes\n    // and truncates any drive indicator\n    const regexp = /\\\\/g;\n    return () => {\n      const cwd = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd().replace(regexp, '/');\n      return cwd.slice(cwd.indexOf('/'));\n    };\n  }\n  // We're already on POSIX, no need for any transformations\n  return () => _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\n})();\nconst posix = {\n  // path.resolve([from ...], to)\n  resolve(...pathSegments) {\n    let resolvedPath = '';\n    let resolvedAbsolute = false;\n    for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      const path = i >= 0 ? pathSegments[i] : posixCwd();\n      validateString(path, 'path');\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n      resolvedPath = `${path}/${resolvedPath}`;\n      resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    }\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\n    if (resolvedAbsolute) {\n      return `/${resolvedPath}`;\n    }\n    return resolvedPath.length > 0 ? resolvedPath : '.';\n  },\n  normalize(path) {\n    validateString(path, 'path');\n    if (path.length === 0) {\n      return '.';\n    }\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n    // Normalize the path\n    path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n    if (path.length === 0) {\n      if (isAbsolute) {\n        return '/';\n      }\n      return trailingSeparator ? './' : '.';\n    }\n    if (trailingSeparator) {\n      path += '/';\n    }\n    return isAbsolute ? `/${path}` : path;\n  },\n  isAbsolute(path) {\n    validateString(path, 'path');\n    return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  },\n  join(...paths) {\n    if (paths.length === 0) {\n      return '.';\n    }\n    let joined;\n    for (let i = 0; i < paths.length; ++i) {\n      const arg = paths[i];\n      validateString(arg, 'path');\n      if (arg.length > 0) {\n        if (joined === undefined) {\n          joined = arg;\n        } else {\n          joined += `/${arg}`;\n        }\n      }\n    }\n    if (joined === undefined) {\n      return '.';\n    }\n    return posix.normalize(joined);\n  },\n  relative(from, to) {\n    validateString(from, 'from');\n    validateString(to, 'to');\n    if (from === to) {\n      return '';\n    }\n    // Trim leading forward slashes.\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) {\n      return '';\n    }\n    const fromStart = 1;\n    const fromEnd = from.length;\n    const fromLen = fromEnd - fromStart;\n    const toStart = 1;\n    const toLen = to.length - toStart;\n    // Compare paths to find the longest common path from root\n    const length = fromLen < toLen ? fromLen : toLen;\n    let lastCommonSep = -1;\n    let i = 0;\n    for (; i < length; i++) {\n      const fromCode = from.charCodeAt(fromStart + i);\n      if (fromCode !== to.charCodeAt(toStart + i)) {\n        break;\n      } else if (fromCode === CHAR_FORWARD_SLASH) {\n        lastCommonSep = i;\n      }\n    }\n    if (i === length) {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\n          return to.slice(toStart + i + 1);\n        }\n        if (i === 0) {\n          // We get here if `from` is the root\n          // For example: from='/'; to='/foo'\n          return to.slice(toStart + i);\n        }\n      } else if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\n          lastCommonSep = i;\n        } else if (i === 0) {\n          // We get here if `to` is the root.\n          // For example: from='/foo/bar'; to='/'\n          lastCommonSep = 0;\n        }\n      }\n    }\n    let out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`.\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        out += out.length === 0 ? '..' : '/..';\n      }\n    }\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts.\n    return `${out}${to.slice(toStart + lastCommonSep)}`;\n  },\n  toNamespacedPath(path) {\n    // Non-op on posix systems\n    return path;\n  },\n  dirname(path) {\n    validateString(path, 'path');\n    if (path.length === 0) {\n      return '.';\n    }\n    const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    let end = -1;\n    let matchedSlash = true;\n    for (let i = path.length - 1; i >= 1; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) {\n      return hasRoot ? '/' : '.';\n    }\n    if (hasRoot && end === 1) {\n      return '//';\n    }\n    return path.slice(0, end);\n  },\n  basename(path, ext) {\n    if (ext !== undefined) {\n      validateString(ext, 'ext');\n    }\n    validateString(path, 'path');\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext === path) {\n        return '';\n      }\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        const code = path.charCodeAt(i);\n        if (code === CHAR_FORWARD_SLASH) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) {\n        end = firstNonSlashEnd;\n      } else if (end === -1) {\n        end = path.length;\n      }\n      return path.slice(start, end);\n    }\n    for (i = path.length - 1; i >= 0; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) {\n      return '';\n    }\n    return path.slice(start, end);\n  },\n  extname(path) {\n    validateString(path, 'path');\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    for (let i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n  format: _format.bind(null, '/'),\n  parse(path) {\n    validateString(path, 'path');\n    const ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) {\n      return ret;\n    }\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    let start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path.length - 1;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    // Get non-dir info\n    for (; i >= start; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (end !== -1) {\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\n      if (startDot === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n        ret.base = ret.name = path.slice(start, end);\n      } else {\n        ret.name = path.slice(start, startDot);\n        ret.base = path.slice(start, end);\n        ret.ext = path.slice(startDot, end);\n      }\n    }\n    if (startPart > 0) {\n      ret.dir = path.slice(0, startPart - 1);\n    } else if (isAbsolute) {\n      ret.dir = '/';\n    }\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\nconst normalize = platformIsWin32 ? win32.normalize : posix.normalize;\nconst resolve = platformIsWin32 ? win32.resolve : posix.resolve;\nconst relative = platformIsWin32 ? win32.relative : posix.relative;\nconst dirname = platformIsWin32 ? win32.dirname : posix.dirname;\nconst basename = platformIsWin32 ? win32.basename : posix.basename;\nconst extname = platformIsWin32 ? win32.extname : posix.extname;\nconst sep = platformIsWin32 ? win32.sep : posix.sep;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/path.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/platform.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/platform.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LANGUAGE_DEFAULT\": function() { return /* binding */ LANGUAGE_DEFAULT; },\n/* harmony export */   \"OS\": function() { return /* binding */ OS; },\n/* harmony export */   \"isAndroid\": function() { return /* binding */ isAndroid; },\n/* harmony export */   \"isChrome\": function() { return /* binding */ isChrome; },\n/* harmony export */   \"isEdge\": function() { return /* binding */ isEdge; },\n/* harmony export */   \"isFirefox\": function() { return /* binding */ isFirefox; },\n/* harmony export */   \"isIOS\": function() { return /* binding */ isIOS; },\n/* harmony export */   \"isLinux\": function() { return /* binding */ isLinux; },\n/* harmony export */   \"isLittleEndian\": function() { return /* binding */ isLittleEndian; },\n/* harmony export */   \"isMacintosh\": function() { return /* binding */ isMacintosh; },\n/* harmony export */   \"isMobile\": function() { return /* binding */ isMobile; },\n/* harmony export */   \"isNative\": function() { return /* binding */ isNative; },\n/* harmony export */   \"isSafari\": function() { return /* binding */ isSafari; },\n/* harmony export */   \"isWeb\": function() { return /* binding */ isWeb; },\n/* harmony export */   \"isWebWorker\": function() { return /* binding */ isWebWorker; },\n/* harmony export */   \"isWindows\": function() { return /* binding */ isWindows; },\n/* harmony export */   \"language\": function() { return /* binding */ language; },\n/* harmony export */   \"setTimeout0\": function() { return /* binding */ setTimeout0; },\n/* harmony export */   \"setTimeout0IsFaster\": function() { return /* binding */ setTimeout0IsFaster; },\n/* harmony export */   \"userAgent\": function() { return /* binding */ userAgent; },\n/* harmony export */   \"webWorkerOrigin\": function() { return /* binding */ webWorkerOrigin; }\n/* harmony export */ });\n/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../nls.js */ \"./node_modules/monaco-editor/esm/vs/nls.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\nvar _a, _b;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _isCI = false;\nlet _isMobile = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _platformLocale = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nconst $globalThis = globalThis;\nlet nodeProcess = undefined;\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\n  // Native environment (sandboxed)\n  nodeProcess = $globalThis.vscode.process;\n} else if (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) === 'string') {\n  // Native environment (non-sandboxed)\n  nodeProcess = process;\n}\nconst isElectronProcess = typeof ((_b = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _b === void 0 ? void 0 : _b.electron) === 'string';\nconst isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer';\n// Native environment\nif (typeof nodeProcess === 'object') {\n  _isWindows = nodeProcess.platform === 'win32';\n  _isMacintosh = nodeProcess.platform === 'darwin';\n  _isLinux = nodeProcess.platform === 'linux';\n  _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n  _isElectron = isElectronProcess;\n  _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\n  _locale = LANGUAGE_DEFAULT;\n  _language = LANGUAGE_DEFAULT;\n  const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n  if (rawNlsConfig) {\n    try {\n      const nlsConfig = JSON.parse(rawNlsConfig);\n      const resolved = nlsConfig.availableLanguages['*'];\n      _locale = nlsConfig.locale;\n      _platformLocale = nlsConfig.osLocale;\n      // VSCode's default language is 'en'\n      _language = resolved ? resolved : LANGUAGE_DEFAULT;\n      _translationsConfigFile = nlsConfig._translationsConfigFile;\n    } catch (e) {}\n  }\n  _isNative = true;\n}\n// Web environment\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\n  _userAgent = navigator.userAgent;\n  _isWindows = _userAgent.indexOf('Windows') >= 0;\n  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n  _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n  _isLinux = _userAgent.indexOf('Linux') >= 0;\n  _isMobile = (_userAgent === null || _userAgent === void 0 ? void 0 : _userAgent.indexOf('Mobi')) >= 0;\n  _isWeb = true;\n  const configuredLocale = _nls_js__WEBPACK_IMPORTED_MODULE_0__.getConfiguredDefaultLocale(\n  // This call _must_ be done in the file that calls `nls.getConfiguredDefaultLocale`\n  // to ensure that the NLS AMD Loader plugin has been loaded and configured.\n  // This is because the loader plugin decides what the default locale is based on\n  // how it's able to resolve the strings.\n  _nls_js__WEBPACK_IMPORTED_MODULE_0__.localize({\n    key: 'ensureLoaderPluginIsLoaded',\n    comment: ['{Locked}']\n  }, '_'));\n  _locale = configuredLocale || LANGUAGE_DEFAULT;\n  _language = _locale;\n  _platformLocale = navigator.language;\n}\n// Unknown environment\nelse {\n  console.error('Unable to resolve platform.');\n}\nlet _platform = 0 /* Platform.Web */;\nif (_isMacintosh) {\n  _platform = 1 /* Platform.Mac */;\n} else if (_isWindows) {\n  _platform = 3 /* Platform.Windows */;\n} else if (_isLinux) {\n  _platform = 2 /* Platform.Linux */;\n}\nconst isWindows = _isWindows;\nconst isMacintosh = _isMacintosh;\nconst isLinux = _isLinux;\nconst isNative = _isNative;\nconst isWeb = _isWeb;\nconst isWebWorker = _isWeb && typeof $globalThis.importScripts === 'function';\nconst webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\nconst isIOS = _isIOS;\nconst isMobile = _isMobile;\nconst userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nconst language = _language;\nconst setTimeout0IsFaster = typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts;\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nconst setTimeout0 = (() => {\n  if (setTimeout0IsFaster) {\n    const pending = [];\n    $globalThis.addEventListener('message', e => {\n      if (e.data && e.data.vscodeScheduleAsyncWork) {\n        for (let i = 0, len = pending.length; i < len; i++) {\n          const candidate = pending[i];\n          if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n            pending.splice(i, 1);\n            candidate.callback();\n            return;\n          }\n        }\n      }\n    });\n    let lastId = 0;\n    return callback => {\n      const myId = ++lastId;\n      pending.push({\n        id: myId,\n        callback: callback\n      });\n      $globalThis.postMessage({\n        vscodeScheduleAsyncWork: myId\n      }, '*');\n    };\n  }\n  return callback => setTimeout(callback);\n})();\nconst OS = _isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : _isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */;\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nfunction isLittleEndian() {\n  if (!_isLittleEndianComputed) {\n    _isLittleEndianComputed = true;\n    const test = new Uint8Array(2);\n    test[0] = 1;\n    test[1] = 2;\n    const view = new Uint16Array(test.buffer);\n    _isLittleEndian = view[0] === (2 << 8) + 1;\n  }\n  return _isLittleEndian;\n}\nconst isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nconst isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nconst isSafari = !!(!isChrome && userAgent && userAgent.indexOf('Safari') >= 0);\nconst isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nconst isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/platform.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/process.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/process.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cwd\": function() { return /* binding */ cwd; },\n/* harmony export */   \"env\": function() { return /* binding */ env; },\n/* harmony export */   \"platform\": function() { return /* binding */ platform; }\n/* harmony export */ });\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nlet safeProcess;\n// Native sandbox environment\nconst vscodeGlobal = globalThis.vscode;\nif (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.process !== 'undefined') {\n  const sandboxProcess = vscodeGlobal.process;\n  safeProcess = {\n    get platform() {\n      return sandboxProcess.platform;\n    },\n    get arch() {\n      return sandboxProcess.arch;\n    },\n    get env() {\n      return sandboxProcess.env;\n    },\n    cwd() {\n      return sandboxProcess.cwd();\n    }\n  };\n}\n// Native node.js environment\nelse if (typeof process !== 'undefined') {\n  safeProcess = {\n    get platform() {\n      return process.platform;\n    },\n    get arch() {\n      return process.arch;\n    },\n    get env() {\n      return process.env;\n    },\n    cwd() {\n      return process.env['VSCODE_CWD'] || process.cwd();\n    }\n  };\n}\n// Web environment\nelse {\n  safeProcess = {\n    // Supported\n    get platform() {\n      return _platform_js__WEBPACK_IMPORTED_MODULE_0__.isWindows ? 'win32' : _platform_js__WEBPACK_IMPORTED_MODULE_0__.isMacintosh ? 'darwin' : 'linux';\n    },\n    get arch() {\n      return undefined; /* arch is undefined in web */\n    },\n    // Unsupported\n    get env() {\n      return {};\n    },\n    cwd() {\n      return '/';\n    }\n  };\n}\n/**\n * Provides safe access to the `cwd` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `/`.\n *\n * @skipMangle\n */\nconst cwd = safeProcess.cwd;\n/**\n * Provides safe access to the `env` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `{}`.\n */\nconst env = safeProcess.env;\n/**\n * Provides safe access to the `platform` property in node.js, sandboxed or web\n * environments.\n */\nconst platform = safeProcess.platform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcHJvY2Vzcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEO0FBQ3ZELElBQUlFLFdBQVc7QUFDZjtBQUNBLE1BQU1DLFlBQVksR0FBR0MsVUFBVSxDQUFDQyxNQUFNO0FBQ3RDLElBQUksT0FBT0YsWUFBWSxLQUFLLFdBQVcsSUFBSSxPQUFPQSxZQUFZLENBQUNHLE9BQU8sS0FBSyxXQUFXLEVBQUU7RUFDcEYsTUFBTUMsY0FBYyxHQUFHSixZQUFZLENBQUNHLE9BQU87RUFDM0NKLFdBQVcsR0FBRztJQUNWLElBQUlNLFFBQVFBLENBQUEsRUFBRztNQUFFLE9BQU9ELGNBQWMsQ0FBQ0MsUUFBUTtJQUFFLENBQUM7SUFDbEQsSUFBSUMsSUFBSUEsQ0FBQSxFQUFHO01BQUUsT0FBT0YsY0FBYyxDQUFDRSxJQUFJO0lBQUUsQ0FBQztJQUMxQyxJQUFJQyxHQUFHQSxDQUFBLEVBQUc7TUFBRSxPQUFPSCxjQUFjLENBQUNHLEdBQUc7SUFBRSxDQUFDO0lBQ3hDQyxHQUFHQSxDQUFBLEVBQUc7TUFBRSxPQUFPSixjQUFjLENBQUNJLEdBQUcsQ0FBQyxDQUFDO0lBQUU7RUFDekMsQ0FBQztBQUNMO0FBQ0E7QUFBQSxLQUNLLElBQUksT0FBT0wsT0FBTyxLQUFLLFdBQVcsRUFBRTtFQUNyQ0osV0FBVyxHQUFHO0lBQ1YsSUFBSU0sUUFBUUEsQ0FBQSxFQUFHO01BQUUsT0FBT0YsT0FBTyxDQUFDRSxRQUFRO0lBQUUsQ0FBQztJQUMzQyxJQUFJQyxJQUFJQSxDQUFBLEVBQUc7TUFBRSxPQUFPSCxPQUFPLENBQUNHLElBQUk7SUFBRSxDQUFDO0lBQ25DLElBQUlDLEdBQUdBLENBQUEsRUFBRztNQUFFLE9BQU9KLE9BQU8sQ0FBQ0ksR0FBRztJQUFFLENBQUM7SUFDakNDLEdBQUdBLENBQUEsRUFBRztNQUFFLE9BQU9MLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJSixPQUFPLENBQUNLLEdBQUcsQ0FBQyxDQUFDO0lBQUU7RUFDL0QsQ0FBQztBQUNMO0FBQ0E7QUFBQSxLQUNLO0VBQ0RULFdBQVcsR0FBRztJQUNWO0lBQ0EsSUFBSU0sUUFBUUEsQ0FBQSxFQUFHO01BQUUsT0FBT1AsbURBQVMsR0FBRyxPQUFPLEdBQUdELHFEQUFXLEdBQUcsUUFBUSxHQUFHLE9BQU87SUFBRSxDQUFDO0lBQ2pGLElBQUlTLElBQUlBLENBQUEsRUFBRztNQUFFLE9BQU9HLFNBQVMsQ0FBQyxDQUFDO0lBQStCLENBQUM7SUFDL0Q7SUFDQSxJQUFJRixHQUFHQSxDQUFBLEVBQUc7TUFBRSxPQUFPLENBQUMsQ0FBQztJQUFFLENBQUM7SUFDeEJDLEdBQUdBLENBQUEsRUFBRztNQUFFLE9BQU8sR0FBRztJQUFFO0VBQ3hCLENBQUM7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxHQUFHLEdBQUdULFdBQVcsQ0FBQ1MsR0FBRztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNRCxHQUFHLEdBQUdSLFdBQVcsQ0FBQ1EsR0FBRztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1GLFFBQVEsR0FBR04sV0FBVyxDQUFDTSxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9wcm9jZXNzLmpzPzEyMWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBpc01hY2ludG9zaCwgaXNXaW5kb3dzIH0gZnJvbSAnLi9wbGF0Zm9ybS5qcyc7XG5sZXQgc2FmZVByb2Nlc3M7XG4vLyBOYXRpdmUgc2FuZGJveCBlbnZpcm9ubWVudFxuY29uc3QgdnNjb2RlR2xvYmFsID0gZ2xvYmFsVGhpcy52c2NvZGU7XG5pZiAodHlwZW9mIHZzY29kZUdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHZzY29kZUdsb2JhbC5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IHNhbmRib3hQcm9jZXNzID0gdnNjb2RlR2xvYmFsLnByb2Nlc3M7XG4gICAgc2FmZVByb2Nlc3MgPSB7XG4gICAgICAgIGdldCBwbGF0Zm9ybSgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLnBsYXRmb3JtOyB9LFxuICAgICAgICBnZXQgYXJjaCgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmFyY2g7IH0sXG4gICAgICAgIGdldCBlbnYoKSB7IHJldHVybiBzYW5kYm94UHJvY2Vzcy5lbnY7IH0sXG4gICAgICAgIGN3ZCgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmN3ZCgpOyB9XG4gICAgfTtcbn1cbi8vIE5hdGl2ZSBub2RlLmpzIGVudmlyb25tZW50XG5lbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzYWZlUHJvY2VzcyA9IHtcbiAgICAgICAgZ2V0IHBsYXRmb3JtKCkgeyByZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybTsgfSxcbiAgICAgICAgZ2V0IGFyY2goKSB7IHJldHVybiBwcm9jZXNzLmFyY2g7IH0sXG4gICAgICAgIGdldCBlbnYoKSB7IHJldHVybiBwcm9jZXNzLmVudjsgfSxcbiAgICAgICAgY3dkKCkgeyByZXR1cm4gcHJvY2Vzcy5lbnZbJ1ZTQ09ERV9DV0QnXSB8fCBwcm9jZXNzLmN3ZCgpOyB9XG4gICAgfTtcbn1cbi8vIFdlYiBlbnZpcm9ubWVudFxuZWxzZSB7XG4gICAgc2FmZVByb2Nlc3MgPSB7XG4gICAgICAgIC8vIFN1cHBvcnRlZFxuICAgICAgICBnZXQgcGxhdGZvcm0oKSB7IHJldHVybiBpc1dpbmRvd3MgPyAnd2luMzInIDogaXNNYWNpbnRvc2ggPyAnZGFyd2luJyA6ICdsaW51eCc7IH0sXG4gICAgICAgIGdldCBhcmNoKCkgeyByZXR1cm4gdW5kZWZpbmVkOyAvKiBhcmNoIGlzIHVuZGVmaW5lZCBpbiB3ZWIgKi8gfSxcbiAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgICAgZ2V0IGVudigpIHsgcmV0dXJuIHt9OyB9LFxuICAgICAgICBjd2QoKSB7IHJldHVybiAnLyc7IH1cbiAgICB9O1xufVxuLyoqXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYGN3ZGAgcHJvcGVydHkgaW4gbm9kZS5qcywgc2FuZGJveGVkIG9yIHdlYlxuICogZW52aXJvbm1lbnRzLlxuICpcbiAqIE5vdGU6IGluIHdlYiwgdGhpcyBwcm9wZXJ0eSBpcyBoYXJkY29kZWQgdG8gYmUgYC9gLlxuICpcbiAqIEBza2lwTWFuZ2xlXG4gKi9cbmV4cG9ydCBjb25zdCBjd2QgPSBzYWZlUHJvY2Vzcy5jd2Q7XG4vKipcbiAqIFByb3ZpZGVzIHNhZmUgYWNjZXNzIHRvIHRoZSBgZW52YCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXG4gKiBlbnZpcm9ubWVudHMuXG4gKlxuICogTm90ZTogaW4gd2ViLCB0aGlzIHByb3BlcnR5IGlzIGhhcmRjb2RlZCB0byBiZSBge31gLlxuICovXG5leHBvcnQgY29uc3QgZW52ID0gc2FmZVByb2Nlc3MuZW52O1xuLyoqXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYHBsYXRmb3JtYCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXG4gKiBlbnZpcm9ubWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBwbGF0Zm9ybSA9IHNhZmVQcm9jZXNzLnBsYXRmb3JtO1xuIl0sIm5hbWVzIjpbImlzTWFjaW50b3NoIiwiaXNXaW5kb3dzIiwic2FmZVByb2Nlc3MiLCJ2c2NvZGVHbG9iYWwiLCJnbG9iYWxUaGlzIiwidnNjb2RlIiwicHJvY2VzcyIsInNhbmRib3hQcm9jZXNzIiwicGxhdGZvcm0iLCJhcmNoIiwiZW52IiwiY3dkIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/process.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StopWatch\": function() { return /* binding */ StopWatch; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst hasPerformanceNow = globalThis.performance && typeof globalThis.performance.now === 'function';\nclass StopWatch {\n  static create(highResolution) {\n    return new StopWatch(highResolution);\n  }\n  constructor(highResolution) {\n    this._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance.now.bind(globalThis.performance);\n    this._startTime = this._now();\n    this._stopTime = -1;\n  }\n  stop() {\n    this._stopTime = this._now();\n  }\n  reset() {\n    this._startTime = this._now();\n    this._stopTime = -1;\n  }\n  elapsed() {\n    if (this._stopTime !== -1) {\n      return this._stopTime - this._startTime;\n    }\n    return this._now() - this._startTime;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vc3RvcHdhdGNoLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLGlCQUFpQixHQUFJQyxVQUFVLENBQUNDLFdBQVcsSUFBSSxPQUFPRCxVQUFVLENBQUNDLFdBQVcsQ0FBQ0MsR0FBRyxLQUFLLFVBQVc7QUFDL0YsTUFBTUMsU0FBUyxDQUFDO0VBQ25CLE9BQU9DLE1BQU1BLENBQUNDLGNBQWMsRUFBRTtJQUMxQixPQUFPLElBQUlGLFNBQVMsQ0FBQ0UsY0FBYyxDQUFDO0VBQ3hDO0VBQ0FDLFdBQVdBLENBQUNELGNBQWMsRUFBRTtJQUN4QixJQUFJLENBQUNFLElBQUksR0FBR1IsaUJBQWlCLElBQUlNLGNBQWMsS0FBSyxLQUFLLEdBQUdHLElBQUksQ0FBQ04sR0FBRyxHQUFHRixVQUFVLENBQUNDLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDTyxJQUFJLENBQUNULFVBQVUsQ0FBQ0MsV0FBVyxDQUFDO0lBQzlILElBQUksQ0FBQ1MsVUFBVSxHQUFHLElBQUksQ0FBQ0gsSUFBSSxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZCO0VBQ0FDLElBQUlBLENBQUEsRUFBRztJQUNILElBQUksQ0FBQ0QsU0FBUyxHQUFHLElBQUksQ0FBQ0osSUFBSSxDQUFDLENBQUM7RUFDaEM7RUFDQU0sS0FBS0EsQ0FBQSxFQUFHO0lBQ0osSUFBSSxDQUFDSCxVQUFVLEdBQUcsSUFBSSxDQUFDSCxJQUFJLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUNJLFNBQVMsR0FBRyxDQUFDLENBQUM7RUFDdkI7RUFDQUcsT0FBT0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxJQUFJLENBQUNILFNBQVMsS0FBSyxDQUFDLENBQUMsRUFBRTtNQUN2QixPQUFPLElBQUksQ0FBQ0EsU0FBUyxHQUFHLElBQUksQ0FBQ0QsVUFBVTtJQUMzQztJQUNBLE9BQU8sSUFBSSxDQUFDSCxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0csVUFBVTtFQUN4QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9zdG9wd2F0Y2guanM/ZGY4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmNvbnN0IGhhc1BlcmZvcm1hbmNlTm93ID0gKGdsb2JhbFRoaXMucGVyZm9ybWFuY2UgJiYgdHlwZW9mIGdsb2JhbFRoaXMucGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nKTtcbmV4cG9ydCBjbGFzcyBTdG9wV2F0Y2gge1xuICAgIHN0YXRpYyBjcmVhdGUoaGlnaFJlc29sdXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdG9wV2F0Y2goaGlnaFJlc29sdXRpb24pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihoaWdoUmVzb2x1dGlvbikge1xuICAgICAgICB0aGlzLl9ub3cgPSBoYXNQZXJmb3JtYW5jZU5vdyAmJiBoaWdoUmVzb2x1dGlvbiA9PT0gZmFsc2UgPyBEYXRlLm5vdyA6IGdsb2JhbFRoaXMucGVyZm9ybWFuY2Uubm93LmJpbmQoZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IHRoaXMuX25vdygpO1xuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IC0xO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IHRoaXMuX25vdygpO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gdGhpcy5fbm93KCk7XG4gICAgICAgIHRoaXMuX3N0b3BUaW1lID0gLTE7XG4gICAgfVxuICAgIGVsYXBzZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdG9wVGltZSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdG9wVGltZSAtIHRoaXMuX3N0YXJ0VGltZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbm93KCkgLSB0aGlzLl9zdGFydFRpbWU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImhhc1BlcmZvcm1hbmNlTm93IiwiZ2xvYmFsVGhpcyIsInBlcmZvcm1hbmNlIiwibm93IiwiU3RvcFdhdGNoIiwiY3JlYXRlIiwiaGlnaFJlc29sdXRpb24iLCJjb25zdHJ1Y3RvciIsIl9ub3ciLCJEYXRlIiwiYmluZCIsIl9zdGFydFRpbWUiLCJfc3RvcFRpbWUiLCJzdG9wIiwicmVzZXQiLCJlbGFwc2VkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/strings.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AmbiguousCharacters\": function() { return /* binding */ AmbiguousCharacters; },\n/* harmony export */   \"CodePointIterator\": function() { return /* binding */ CodePointIterator; },\n/* harmony export */   \"GraphemeIterator\": function() { return /* binding */ GraphemeIterator; },\n/* harmony export */   \"InvisibleCharacters\": function() { return /* binding */ InvisibleCharacters; },\n/* harmony export */   \"UNUSUAL_LINE_TERMINATORS\": function() { return /* binding */ UNUSUAL_LINE_TERMINATORS; },\n/* harmony export */   \"UTF8_BOM_CHARACTER\": function() { return /* binding */ UTF8_BOM_CHARACTER; },\n/* harmony export */   \"commonPrefixLength\": function() { return /* binding */ commonPrefixLength; },\n/* harmony export */   \"commonSuffixLength\": function() { return /* binding */ commonSuffixLength; },\n/* harmony export */   \"compare\": function() { return /* binding */ compare; },\n/* harmony export */   \"compareIgnoreCase\": function() { return /* binding */ compareIgnoreCase; },\n/* harmony export */   \"compareSubstring\": function() { return /* binding */ compareSubstring; },\n/* harmony export */   \"compareSubstringIgnoreCase\": function() { return /* binding */ compareSubstringIgnoreCase; },\n/* harmony export */   \"computeCodePoint\": function() { return /* binding */ computeCodePoint; },\n/* harmony export */   \"containsRTL\": function() { return /* binding */ containsRTL; },\n/* harmony export */   \"containsUnusualLineTerminators\": function() { return /* binding */ containsUnusualLineTerminators; },\n/* harmony export */   \"containsUppercaseCharacter\": function() { return /* binding */ containsUppercaseCharacter; },\n/* harmony export */   \"convertSimple2RegExpPattern\": function() { return /* binding */ convertSimple2RegExpPattern; },\n/* harmony export */   \"createRegExp\": function() { return /* binding */ createRegExp; },\n/* harmony export */   \"equalsIgnoreCase\": function() { return /* binding */ equalsIgnoreCase; },\n/* harmony export */   \"escape\": function() { return /* binding */ escape; },\n/* harmony export */   \"escapeRegExpCharacters\": function() { return /* binding */ escapeRegExpCharacters; },\n/* harmony export */   \"firstNonWhitespaceIndex\": function() { return /* binding */ firstNonWhitespaceIndex; },\n/* harmony export */   \"format\": function() { return /* binding */ format; },\n/* harmony export */   \"getCharContainingOffset\": function() { return /* binding */ getCharContainingOffset; },\n/* harmony export */   \"getLeadingWhitespace\": function() { return /* binding */ getLeadingWhitespace; },\n/* harmony export */   \"getLeftDeleteOffset\": function() { return /* binding */ getLeftDeleteOffset; },\n/* harmony export */   \"getNextCodePoint\": function() { return /* binding */ getNextCodePoint; },\n/* harmony export */   \"htmlAttributeEncodeValue\": function() { return /* binding */ htmlAttributeEncodeValue; },\n/* harmony export */   \"isAsciiDigit\": function() { return /* binding */ isAsciiDigit; },\n/* harmony export */   \"isBasicASCII\": function() { return /* binding */ isBasicASCII; },\n/* harmony export */   \"isEmojiImprecise\": function() { return /* binding */ isEmojiImprecise; },\n/* harmony export */   \"isFalsyOrWhitespace\": function() { return /* binding */ isFalsyOrWhitespace; },\n/* harmony export */   \"isFullWidthCharacter\": function() { return /* binding */ isFullWidthCharacter; },\n/* harmony export */   \"isHighSurrogate\": function() { return /* binding */ isHighSurrogate; },\n/* harmony export */   \"isLowSurrogate\": function() { return /* binding */ isLowSurrogate; },\n/* harmony export */   \"isLowerAsciiLetter\": function() { return /* binding */ isLowerAsciiLetter; },\n/* harmony export */   \"isUpperAsciiLetter\": function() { return /* binding */ isUpperAsciiLetter; },\n/* harmony export */   \"lastNonWhitespaceIndex\": function() { return /* binding */ lastNonWhitespaceIndex; },\n/* harmony export */   \"ltrim\": function() { return /* binding */ ltrim; },\n/* harmony export */   \"nextCharLength\": function() { return /* binding */ nextCharLength; },\n/* harmony export */   \"noBreakWhitespace\": function() { return /* binding */ noBreakWhitespace; },\n/* harmony export */   \"prevCharLength\": function() { return /* binding */ prevCharLength; },\n/* harmony export */   \"regExpLeadsToEndlessLoop\": function() { return /* binding */ regExpLeadsToEndlessLoop; },\n/* harmony export */   \"rtrim\": function() { return /* binding */ rtrim; },\n/* harmony export */   \"singleLetterHash\": function() { return /* binding */ singleLetterHash; },\n/* harmony export */   \"splitLines\": function() { return /* binding */ splitLines; },\n/* harmony export */   \"splitLinesIncludeSeparators\": function() { return /* binding */ splitLinesIncludeSeparators; },\n/* harmony export */   \"startsWithIgnoreCase\": function() { return /* binding */ startsWithIgnoreCase; },\n/* harmony export */   \"startsWithUTF8BOM\": function() { return /* binding */ startsWithUTF8BOM; },\n/* harmony export */   \"stripWildcards\": function() { return /* binding */ stripWildcards; },\n/* harmony export */   \"trim\": function() { return /* binding */ trim; }\n/* harmony export */ });\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache.js */ \"./node_modules/monaco-editor/esm/vs/base/common/cache.js\");\n/* harmony import */ var _lazy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lazy.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lazy.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\n\nfunction isFalsyOrWhitespace(str) {\n  if (!str || typeof str !== 'string') {\n    return true;\n  }\n  return str.trim().length === 0;\n}\nconst _formatRegexp = /{(\\d+)}/g;\n/**\n * Helper to produce a string with a variable number of arguments. Insert variable segments\n * into the string using the {n} notation where N is the index of the argument following the string.\n * @param value string to which formatting is applied\n * @param args replacements for {n}-entries\n */\nfunction format(value, ...args) {\n  if (args.length === 0) {\n    return value;\n  }\n  return value.replace(_formatRegexp, function (match, group) {\n    const idx = parseInt(group, 10);\n    return isNaN(idx) || idx < 0 || idx >= args.length ? match : args[idx];\n  });\n}\n/**\n * Encodes the given value so that it can be used as literal value in html attributes.\n *\n * In other words, computes `$val`, such that `attr` in `<div attr=\"$val\" />` has the runtime value `value`.\n * This prevents XSS injection.\n */\nfunction htmlAttributeEncodeValue(value) {\n  return value.replace(/[<>\"'&]/g, ch => {\n    switch (ch) {\n      case '<':\n        return '&lt;';\n      case '>':\n        return '&gt;';\n      case '\"':\n        return '&quot;';\n      case '\\'':\n        return '&apos;';\n      case '&':\n        return '&amp;';\n    }\n    return ch;\n  });\n}\n/**\n * Converts HTML characters inside the string to use entities instead. Makes the string safe from\n * being used e.g. in HTMLElement.innerHTML.\n */\nfunction escape(html) {\n  return html.replace(/[<>&]/g, function (match) {\n    switch (match) {\n      case '<':\n        return '&lt;';\n      case '>':\n        return '&gt;';\n      case '&':\n        return '&amp;';\n      default:\n        return match;\n    }\n  });\n}\n/**\n * Escapes regular expression characters in a given string\n */\nfunction escapeRegExpCharacters(value) {\n  return value.replace(/[\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\[\\]\\(\\)]/g, '\\\\$&');\n}\n/**\n * Removes all occurrences of needle from the beginning and end of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim (default is a blank)\n */\nfunction trim(haystack, needle = ' ') {\n  const trimmed = ltrim(haystack, needle);\n  return rtrim(trimmed, needle);\n}\n/**\n * Removes all occurrences of needle from the beginning of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim\n */\nfunction ltrim(haystack, needle) {\n  if (!haystack || !needle) {\n    return haystack;\n  }\n  const needleLen = needle.length;\n  if (needleLen === 0 || haystack.length === 0) {\n    return haystack;\n  }\n  let offset = 0;\n  while (haystack.indexOf(needle, offset) === offset) {\n    offset = offset + needleLen;\n  }\n  return haystack.substring(offset);\n}\n/**\n * Removes all occurrences of needle from the end of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim\n */\nfunction rtrim(haystack, needle) {\n  if (!haystack || !needle) {\n    return haystack;\n  }\n  const needleLen = needle.length,\n    haystackLen = haystack.length;\n  if (needleLen === 0 || haystackLen === 0) {\n    return haystack;\n  }\n  let offset = haystackLen,\n    idx = -1;\n  while (true) {\n    idx = haystack.lastIndexOf(needle, offset - 1);\n    if (idx === -1 || idx + needleLen !== offset) {\n      break;\n    }\n    if (idx === 0) {\n      return '';\n    }\n    offset = idx;\n  }\n  return haystack.substring(0, offset);\n}\nfunction convertSimple2RegExpPattern(pattern) {\n  return pattern.replace(/[\\-\\\\\\{\\}\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&').replace(/[\\*]/g, '.*');\n}\nfunction stripWildcards(pattern) {\n  return pattern.replace(/\\*/g, '');\n}\nfunction createRegExp(searchString, isRegex, options = {}) {\n  if (!searchString) {\n    throw new Error('Cannot create regex from empty string');\n  }\n  if (!isRegex) {\n    searchString = escapeRegExpCharacters(searchString);\n  }\n  if (options.wholeWord) {\n    if (!/\\B/.test(searchString.charAt(0))) {\n      searchString = '\\\\b' + searchString;\n    }\n    if (!/\\B/.test(searchString.charAt(searchString.length - 1))) {\n      searchString = searchString + '\\\\b';\n    }\n  }\n  let modifiers = '';\n  if (options.global) {\n    modifiers += 'g';\n  }\n  if (!options.matchCase) {\n    modifiers += 'i';\n  }\n  if (options.multiline) {\n    modifiers += 'm';\n  }\n  if (options.unicode) {\n    modifiers += 'u';\n  }\n  return new RegExp(searchString, modifiers);\n}\nfunction regExpLeadsToEndlessLoop(regexp) {\n  // Exit early if it's one of these special cases which are meant to match\n  // against an empty string\n  if (regexp.source === '^' || regexp.source === '^$' || regexp.source === '$' || regexp.source === '^\\\\s*$') {\n    return false;\n  }\n  // We check against an empty string. If the regular expression doesn't advance\n  // (e.g. ends in an endless loop) it will match an empty string.\n  const match = regexp.exec('');\n  return !!(match && regexp.lastIndex === 0);\n}\nfunction splitLines(str) {\n  return str.split(/\\r\\n|\\r|\\n/);\n}\nfunction splitLinesIncludeSeparators(str) {\n  var _b;\n  const linesWithSeparators = [];\n  const splitLinesAndSeparators = str.split(/(\\r\\n|\\r|\\n)/);\n  for (let i = 0; i < Math.ceil(splitLinesAndSeparators.length / 2); i++) {\n    linesWithSeparators.push(splitLinesAndSeparators[2 * i] + ((_b = splitLinesAndSeparators[2 * i + 1]) !== null && _b !== void 0 ? _b : ''));\n  }\n  return linesWithSeparators;\n}\n/**\n * Returns first index of the string that is not whitespace.\n * If string is empty or contains only whitespaces, returns -1\n */\nfunction firstNonWhitespaceIndex(str) {\n  for (let i = 0, len = str.length; i < len; i++) {\n    const chCode = str.charCodeAt(i);\n    if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Returns the leading whitespace of the string.\n * If the string contains only whitespaces, returns entire string\n */\nfunction getLeadingWhitespace(str, start = 0, end = str.length) {\n  for (let i = start; i < end; i++) {\n    const chCode = str.charCodeAt(i);\n    if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\n      return str.substring(start, i);\n    }\n  }\n  return str.substring(start, end);\n}\n/**\n * Returns last index of the string that is not whitespace.\n * If string is empty or contains only whitespaces, returns -1\n */\nfunction lastNonWhitespaceIndex(str, startIndex = str.length - 1) {\n  for (let i = startIndex; i >= 0; i--) {\n    const chCode = str.charCodeAt(i);\n    if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction compare(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nfunction compareSubstring(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\n  for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n    const codeA = a.charCodeAt(aStart);\n    const codeB = b.charCodeAt(bStart);\n    if (codeA < codeB) {\n      return -1;\n    } else if (codeA > codeB) {\n      return 1;\n    }\n  }\n  const aLen = aEnd - aStart;\n  const bLen = bEnd - bStart;\n  if (aLen < bLen) {\n    return -1;\n  } else if (aLen > bLen) {\n    return 1;\n  }\n  return 0;\n}\nfunction compareIgnoreCase(a, b) {\n  return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);\n}\nfunction compareSubstringIgnoreCase(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\n  for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n    let codeA = a.charCodeAt(aStart);\n    let codeB = b.charCodeAt(bStart);\n    if (codeA === codeB) {\n      // equal\n      continue;\n    }\n    if (codeA >= 128 || codeB >= 128) {\n      // not ASCII letters -> fallback to lower-casing strings\n      return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);\n    }\n    // mapper lower-case ascii letter onto upper-case varinats\n    // [97-122] (lower ascii) --> [65-90] (upper ascii)\n    if (isLowerAsciiLetter(codeA)) {\n      codeA -= 32;\n    }\n    if (isLowerAsciiLetter(codeB)) {\n      codeB -= 32;\n    }\n    // compare both code points\n    const diff = codeA - codeB;\n    if (diff === 0) {\n      continue;\n    }\n    return diff;\n  }\n  const aLen = aEnd - aStart;\n  const bLen = bEnd - bStart;\n  if (aLen < bLen) {\n    return -1;\n  } else if (aLen > bLen) {\n    return 1;\n  }\n  return 0;\n}\nfunction isAsciiDigit(code) {\n  return code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */;\n}\nfunction isLowerAsciiLetter(code) {\n  return code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */;\n}\nfunction isUpperAsciiLetter(code) {\n  return code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */;\n}\nfunction equalsIgnoreCase(a, b) {\n  return a.length === b.length && compareSubstringIgnoreCase(a, b) === 0;\n}\nfunction startsWithIgnoreCase(str, candidate) {\n  const candidateLength = candidate.length;\n  if (candidate.length > str.length) {\n    return false;\n  }\n  return compareSubstringIgnoreCase(str, candidate, 0, candidateLength) === 0;\n}\n/**\n * @returns the length of the common prefix of the two strings.\n */\nfunction commonPrefixLength(a, b) {\n  const len = Math.min(a.length, b.length);\n  let i;\n  for (i = 0; i < len; i++) {\n    if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n      return i;\n    }\n  }\n  return len;\n}\n/**\n * @returns the length of the common suffix of the two strings.\n */\nfunction commonSuffixLength(a, b) {\n  const len = Math.min(a.length, b.length);\n  let i;\n  const aLastIndex = a.length - 1;\n  const bLastIndex = b.length - 1;\n  for (i = 0; i < len; i++) {\n    if (a.charCodeAt(aLastIndex - i) !== b.charCodeAt(bLastIndex - i)) {\n      return i;\n    }\n  }\n  return len;\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction isHighSurrogate(charCode) {\n  return 0xD800 <= charCode && charCode <= 0xDBFF;\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction isLowSurrogate(charCode) {\n  return 0xDC00 <= charCode && charCode <= 0xDFFF;\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction computeCodePoint(highSurrogate, lowSurrogate) {\n  return (highSurrogate - 0xD800 << 10) + (lowSurrogate - 0xDC00) + 0x10000;\n}\n/**\n * get the code point that begins at offset `offset`\n */\nfunction getNextCodePoint(str, len, offset) {\n  const charCode = str.charCodeAt(offset);\n  if (isHighSurrogate(charCode) && offset + 1 < len) {\n    const nextCharCode = str.charCodeAt(offset + 1);\n    if (isLowSurrogate(nextCharCode)) {\n      return computeCodePoint(charCode, nextCharCode);\n    }\n  }\n  return charCode;\n}\n/**\n * get the code point that ends right before offset `offset`\n */\nfunction getPrevCodePoint(str, offset) {\n  const charCode = str.charCodeAt(offset - 1);\n  if (isLowSurrogate(charCode) && offset > 1) {\n    const prevCharCode = str.charCodeAt(offset - 2);\n    if (isHighSurrogate(prevCharCode)) {\n      return computeCodePoint(prevCharCode, charCode);\n    }\n  }\n  return charCode;\n}\nclass CodePointIterator {\n  get offset() {\n    return this._offset;\n  }\n  constructor(str, offset = 0) {\n    this._str = str;\n    this._len = str.length;\n    this._offset = offset;\n  }\n  setOffset(offset) {\n    this._offset = offset;\n  }\n  prevCodePoint() {\n    const codePoint = getPrevCodePoint(this._str, this._offset);\n    this._offset -= codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n    return codePoint;\n  }\n  nextCodePoint() {\n    const codePoint = getNextCodePoint(this._str, this._len, this._offset);\n    this._offset += codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n    return codePoint;\n  }\n  eol() {\n    return this._offset >= this._len;\n  }\n}\nclass GraphemeIterator {\n  get offset() {\n    return this._iterator.offset;\n  }\n  constructor(str, offset = 0) {\n    this._iterator = new CodePointIterator(str, offset);\n  }\n  nextGraphemeLength() {\n    const graphemeBreakTree = GraphemeBreakTree.getInstance();\n    const iterator = this._iterator;\n    const initialOffset = iterator.offset;\n    let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());\n    while (!iterator.eol()) {\n      const offset = iterator.offset;\n      const nextGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());\n      if (breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n        // move iterator back\n        iterator.setOffset(offset);\n        break;\n      }\n      graphemeBreakType = nextGraphemeBreakType;\n    }\n    return iterator.offset - initialOffset;\n  }\n  prevGraphemeLength() {\n    const graphemeBreakTree = GraphemeBreakTree.getInstance();\n    const iterator = this._iterator;\n    const initialOffset = iterator.offset;\n    let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());\n    while (iterator.offset > 0) {\n      const offset = iterator.offset;\n      const prevGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());\n      if (breakBetweenGraphemeBreakType(prevGraphemeBreakType, graphemeBreakType)) {\n        // move iterator back\n        iterator.setOffset(offset);\n        break;\n      }\n      graphemeBreakType = prevGraphemeBreakType;\n    }\n    return initialOffset - iterator.offset;\n  }\n  eol() {\n    return this._iterator.eol();\n  }\n}\nfunction nextCharLength(str, initialOffset) {\n  const iterator = new GraphemeIterator(str, initialOffset);\n  return iterator.nextGraphemeLength();\n}\nfunction prevCharLength(str, initialOffset) {\n  const iterator = new GraphemeIterator(str, initialOffset);\n  return iterator.prevGraphemeLength();\n}\nfunction getCharContainingOffset(str, offset) {\n  if (offset > 0 && isLowSurrogate(str.charCodeAt(offset))) {\n    offset--;\n  }\n  const endOffset = offset + nextCharLength(str, offset);\n  const startOffset = endOffset - prevCharLength(str, endOffset);\n  return [startOffset, endOffset];\n}\nlet CONTAINS_RTL = undefined;\nfunction makeContainsRtl() {\n  // Generated using https://github.com/alexdima/unicode-utils/blob/main/rtl-test.js\n  return /(?:[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05F4\\u0608\\u060B\\u060D\\u061B-\\u064A\\u066D-\\u066F\\u0671-\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u0858\\u085E-\\u088E\\u08A0-\\u08C9\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFD3D\\uFD50-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFEFC]|\\uD802[\\uDC00-\\uDD1B\\uDD20-\\uDE00\\uDE10-\\uDE35\\uDE40-\\uDEE4\\uDEEB-\\uDF35\\uDF40-\\uDFFF]|\\uD803[\\uDC00-\\uDD23\\uDE80-\\uDEA9\\uDEAD-\\uDF45\\uDF51-\\uDF81\\uDF86-\\uDFF6]|\\uD83A[\\uDC00-\\uDCCF\\uDD00-\\uDD43\\uDD4B-\\uDFFF]|\\uD83B[\\uDC00-\\uDEBB])/;\n}\n/**\n * Returns true if `str` contains any Unicode character that is classified as \"R\" or \"AL\".\n */\nfunction containsRTL(str) {\n  if (!CONTAINS_RTL) {\n    CONTAINS_RTL = makeContainsRtl();\n  }\n  return CONTAINS_RTL.test(str);\n}\nconst IS_BASIC_ASCII = /^[\\t\\n\\r\\x20-\\x7E]*$/;\n/**\n * Returns true if `str` contains only basic ASCII characters in the range 32 - 126 (including 32 and 126) or \\n, \\r, \\t\n */\nfunction isBasicASCII(str) {\n  return IS_BASIC_ASCII.test(str);\n}\nconst UNUSUAL_LINE_TERMINATORS = /[\\u2028\\u2029]/; // LINE SEPARATOR (LS) or PARAGRAPH SEPARATOR (PS)\n/**\n * Returns true if `str` contains unusual line terminators, like LS or PS\n */\nfunction containsUnusualLineTerminators(str) {\n  return UNUSUAL_LINE_TERMINATORS.test(str);\n}\nfunction isFullWidthCharacter(charCode) {\n  // Do a cheap trick to better support wrapping of wide characters, treat them as 2 columns\n  // http://jrgraphix.net/research/unicode_blocks.php\n  //          2E80 - 2EFF   CJK Radicals Supplement\n  //          2F00 - 2FDF   Kangxi Radicals\n  //          2FF0 - 2FFF   Ideographic Description Characters\n  //          3000 - 303F   CJK Symbols and Punctuation\n  //          3040 - 309F   Hiragana\n  //          30A0 - 30FF   Katakana\n  //          3100 - 312F   Bopomofo\n  //          3130 - 318F   Hangul Compatibility Jamo\n  //          3190 - 319F   Kanbun\n  //          31A0 - 31BF   Bopomofo Extended\n  //          31F0 - 31FF   Katakana Phonetic Extensions\n  //          3200 - 32FF   Enclosed CJK Letters and Months\n  //          3300 - 33FF   CJK Compatibility\n  //          3400 - 4DBF   CJK Unified Ideographs Extension A\n  //          4DC0 - 4DFF   Yijing Hexagram Symbols\n  //          4E00 - 9FFF   CJK Unified Ideographs\n  //          A000 - A48F   Yi Syllables\n  //          A490 - A4CF   Yi Radicals\n  //          AC00 - D7AF   Hangul Syllables\n  // [IGNORE] D800 - DB7F   High Surrogates\n  // [IGNORE] DB80 - DBFF   High Private Use Surrogates\n  // [IGNORE] DC00 - DFFF   Low Surrogates\n  // [IGNORE] E000 - F8FF   Private Use Area\n  //          F900 - FAFF   CJK Compatibility Ideographs\n  // [IGNORE] FB00 - FB4F   Alphabetic Presentation Forms\n  // [IGNORE] FB50 - FDFF   Arabic Presentation Forms-A\n  // [IGNORE] FE00 - FE0F   Variation Selectors\n  // [IGNORE] FE20 - FE2F   Combining Half Marks\n  // [IGNORE] FE30 - FE4F   CJK Compatibility Forms\n  // [IGNORE] FE50 - FE6F   Small Form Variants\n  // [IGNORE] FE70 - FEFF   Arabic Presentation Forms-B\n  //          FF00 - FFEF   Halfwidth and Fullwidth Forms\n  //               [https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms]\n  //               of which FF01 - FF5E fullwidth ASCII of 21 to 7E\n  // [IGNORE]    and FF65 - FFDC halfwidth of Katakana and Hangul\n  // [IGNORE] FFF0 - FFFF   Specials\n  return charCode >= 0x2E80 && charCode <= 0xD7AF || charCode >= 0xF900 && charCode <= 0xFAFF || charCode >= 0xFF01 && charCode <= 0xFF5E;\n}\n/**\n * A fast function (therefore imprecise) to check if code points are emojis.\n * Generated using https://github.com/alexdima/unicode-utils/blob/main/emoji-test.js\n */\nfunction isEmojiImprecise(x) {\n  return x >= 0x1F1E6 && x <= 0x1F1FF || x === 8986 || x === 8987 || x === 9200 || x === 9203 || x >= 9728 && x <= 10175 || x === 11088 || x === 11093 || x >= 127744 && x <= 128591 || x >= 128640 && x <= 128764 || x >= 128992 && x <= 129008 || x >= 129280 && x <= 129535 || x >= 129648 && x <= 129782;\n}\n// -- UTF-8 BOM\nconst UTF8_BOM_CHARACTER = String.fromCharCode(65279 /* CharCode.UTF8_BOM */);\nfunction startsWithUTF8BOM(str) {\n  return !!(str && str.length > 0 && str.charCodeAt(0) === 65279 /* CharCode.UTF8_BOM */);\n}\nfunction containsUppercaseCharacter(target, ignoreEscapedChars = false) {\n  if (!target) {\n    return false;\n  }\n  if (ignoreEscapedChars) {\n    target = target.replace(/\\\\./g, '');\n  }\n  return target.toLowerCase() !== target;\n}\n/**\n * Produces 'a'-'z', followed by 'A'-'Z'... followed by 'a'-'z', etc.\n */\nfunction singleLetterHash(n) {\n  const LETTERS_CNT = 90 /* CharCode.Z */ - 65 /* CharCode.A */ + 1;\n  n = n % (2 * LETTERS_CNT);\n  if (n < LETTERS_CNT) {\n    return String.fromCharCode(97 /* CharCode.a */ + n);\n  }\n  return String.fromCharCode(65 /* CharCode.A */ + n - LETTERS_CNT);\n}\nfunction breakBetweenGraphemeBreakType(breakTypeA, breakTypeB) {\n  // http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules\n  // !!! Let's make the common case a bit faster\n  if (breakTypeA === 0 /* GraphemeBreakType.Other */) {\n    // see https://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakTest-13.0.0d10.html#table\n    return breakTypeB !== 5 /* GraphemeBreakType.Extend */ && breakTypeB !== 7 /* GraphemeBreakType.SpacingMark */;\n  }\n  // Do not break between a CR and LF. Otherwise, break before and after controls.\n  // GB3                                        CR × LF\n  // GB4                       (Control | CR | LF) ÷\n  // GB5                                           ÷ (Control | CR | LF)\n  if (breakTypeA === 2 /* GraphemeBreakType.CR */) {\n    if (breakTypeB === 3 /* GraphemeBreakType.LF */) {\n      return false; // GB3\n    }\n  }\n  if (breakTypeA === 4 /* GraphemeBreakType.Control */ || breakTypeA === 2 /* GraphemeBreakType.CR */ || breakTypeA === 3 /* GraphemeBreakType.LF */) {\n    return true; // GB4\n  }\n  if (breakTypeB === 4 /* GraphemeBreakType.Control */ || breakTypeB === 2 /* GraphemeBreakType.CR */ || breakTypeB === 3 /* GraphemeBreakType.LF */) {\n    return true; // GB5\n  }\n  // Do not break Hangul syllable sequences.\n  // GB6                                         L × (L | V | LV | LVT)\n  // GB7                                  (LV | V) × (V | T)\n  // GB8                                 (LVT | T) × T\n  if (breakTypeA === 8 /* GraphemeBreakType.L */) {\n    if (breakTypeB === 8 /* GraphemeBreakType.L */ || breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 11 /* GraphemeBreakType.LV */ || breakTypeB === 12 /* GraphemeBreakType.LVT */) {\n      return false; // GB6\n    }\n  }\n  if (breakTypeA === 11 /* GraphemeBreakType.LV */ || breakTypeA === 9 /* GraphemeBreakType.V */) {\n    if (breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 10 /* GraphemeBreakType.T */) {\n      return false; // GB7\n    }\n  }\n  if (breakTypeA === 12 /* GraphemeBreakType.LVT */ || breakTypeA === 10 /* GraphemeBreakType.T */) {\n    if (breakTypeB === 10 /* GraphemeBreakType.T */) {\n      return false; // GB8\n    }\n  }\n  // Do not break before extending characters or ZWJ.\n  // GB9                                           × (Extend | ZWJ)\n  if (breakTypeB === 5 /* GraphemeBreakType.Extend */ || breakTypeB === 13 /* GraphemeBreakType.ZWJ */) {\n    return false; // GB9\n  }\n  // The GB9a and GB9b rules only apply to extended grapheme clusters:\n  // Do not break before SpacingMarks, or after Prepend characters.\n  // GB9a                                          × SpacingMark\n  // GB9b                                  Prepend ×\n  if (breakTypeB === 7 /* GraphemeBreakType.SpacingMark */) {\n    return false; // GB9a\n  }\n  if (breakTypeA === 1 /* GraphemeBreakType.Prepend */) {\n    return false; // GB9b\n  }\n  // Do not break within emoji modifier sequences or emoji zwj sequences.\n  // GB11    \\p{Extended_Pictographic} Extend* ZWJ × \\p{Extended_Pictographic}\n  if (breakTypeA === 13 /* GraphemeBreakType.ZWJ */ && breakTypeB === 14 /* GraphemeBreakType.Extended_Pictographic */) {\n    // Note: we are not implementing the rule entirely here to avoid introducing states\n    return false; // GB11\n  }\n  // GB12                          sot (RI RI)* RI × RI\n  // GB13                        [^RI] (RI RI)* RI × RI\n  if (breakTypeA === 6 /* GraphemeBreakType.Regional_Indicator */ && breakTypeB === 6 /* GraphemeBreakType.Regional_Indicator */) {\n    // Note: we are not implementing the rule entirely here to avoid introducing states\n    return false; // GB12 & GB13\n  }\n  // GB999                                     Any ÷ Any\n  return true;\n}\nclass GraphemeBreakTree {\n  static getInstance() {\n    if (!GraphemeBreakTree._INSTANCE) {\n      GraphemeBreakTree._INSTANCE = new GraphemeBreakTree();\n    }\n    return GraphemeBreakTree._INSTANCE;\n  }\n  constructor() {\n    this._data = getGraphemeBreakRawData();\n  }\n  getGraphemeBreakType(codePoint) {\n    // !!! Let's make 7bit ASCII a bit faster: 0..31\n    if (codePoint < 32) {\n      if (codePoint === 10 /* CharCode.LineFeed */) {\n        return 3 /* GraphemeBreakType.LF */;\n      }\n      if (codePoint === 13 /* CharCode.CarriageReturn */) {\n        return 2 /* GraphemeBreakType.CR */;\n      }\n      return 4 /* GraphemeBreakType.Control */;\n    }\n    // !!! Let's make 7bit ASCII a bit faster: 32..126\n    if (codePoint < 127) {\n      return 0 /* GraphemeBreakType.Other */;\n    }\n    const data = this._data;\n    const nodeCount = data.length / 3;\n    let nodeIndex = 1;\n    while (nodeIndex <= nodeCount) {\n      if (codePoint < data[3 * nodeIndex]) {\n        // go left\n        nodeIndex = 2 * nodeIndex;\n      } else if (codePoint > data[3 * nodeIndex + 1]) {\n        // go right\n        nodeIndex = 2 * nodeIndex + 1;\n      } else {\n        // hit\n        return data[3 * nodeIndex + 2];\n      }\n    }\n    return 0 /* GraphemeBreakType.Other */;\n  }\n}\nGraphemeBreakTree._INSTANCE = null;\nfunction getGraphemeBreakRawData() {\n  // generated using https://github.com/alexdima/unicode-utils/blob/main/grapheme-break.js\n  return JSON.parse('[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]');\n}\n//#endregion\n/**\n * Computes the offset after performing a left delete on the given string,\n * while considering unicode grapheme/emoji rules.\n*/\nfunction getLeftDeleteOffset(offset, str) {\n  if (offset === 0) {\n    return 0;\n  }\n  // Try to delete emoji part.\n  const emojiOffset = getOffsetBeforeLastEmojiComponent(offset, str);\n  if (emojiOffset !== undefined) {\n    return emojiOffset;\n  }\n  // Otherwise, just skip a single code point.\n  const iterator = new CodePointIterator(str, offset);\n  iterator.prevCodePoint();\n  return iterator.offset;\n}\nfunction getOffsetBeforeLastEmojiComponent(initialOffset, str) {\n  // See https://www.unicode.org/reports/tr51/tr51-14.html#EBNF_and_Regex for the\n  // structure of emojis.\n  const iterator = new CodePointIterator(str, initialOffset);\n  let codePoint = iterator.prevCodePoint();\n  // Skip modifiers\n  while (isEmojiModifier(codePoint) || codePoint === 65039 /* CodePoint.emojiVariantSelector */ || codePoint === 8419 /* CodePoint.enclosingKeyCap */) {\n    if (iterator.offset === 0) {\n      // Cannot skip modifier, no preceding emoji base.\n      return undefined;\n    }\n    codePoint = iterator.prevCodePoint();\n  }\n  // Expect base emoji\n  if (!isEmojiImprecise(codePoint)) {\n    // Unexpected code point, not a valid emoji.\n    return undefined;\n  }\n  let resultOffset = iterator.offset;\n  if (resultOffset > 0) {\n    // Skip optional ZWJ code points that combine multiple emojis.\n    // In theory, we should check if that ZWJ actually combines multiple emojis\n    // to prevent deleting ZWJs in situations we didn't account for.\n    const optionalZwjCodePoint = iterator.prevCodePoint();\n    if (optionalZwjCodePoint === 8205 /* CodePoint.zwj */) {\n      resultOffset = iterator.offset;\n    }\n  }\n  return resultOffset;\n}\nfunction isEmojiModifier(codePoint) {\n  return 0x1F3FB <= codePoint && codePoint <= 0x1F3FF;\n}\nconst noBreakWhitespace = '\\xa0';\nclass AmbiguousCharacters {\n  static getInstance(locales) {\n    return _a.cache.get(Array.from(locales));\n  }\n  static getLocales() {\n    return _a._locales.value;\n  }\n  constructor(confusableDictionary) {\n    this.confusableDictionary = confusableDictionary;\n  }\n  isAmbiguous(codePoint) {\n    return this.confusableDictionary.has(codePoint);\n  }\n  /**\n   * Returns the non basic ASCII code point that the given code point can be confused,\n   * or undefined if such code point does note exist.\n   */\n  getPrimaryConfusable(codePoint) {\n    return this.confusableDictionary.get(codePoint);\n  }\n  getConfusableCodePoints() {\n    return new Set(this.confusableDictionary.keys());\n  }\n}\n_a = AmbiguousCharacters;\nAmbiguousCharacters.ambiguousCharacterData = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => {\n  // Generated using https://github.com/hediet/vscode-unicode-data\n  // Stored as key1, value1, key2, value2, ...\n  return JSON.parse('{\\\"_common\\\":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],\\\"_default\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"cs\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"de\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"es\\\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"fr\\\":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"it\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"ja\\\":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],\\\"ko\\\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"pl\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"pt-BR\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"qps-ploc\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"ru\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"tr\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"zh-hans\\\":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],\\\"zh-hant\\\":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}');\n});\nAmbiguousCharacters.cache = new _cache_js__WEBPACK_IMPORTED_MODULE_0__.LRUCachedFunction({\n  getCacheKey: JSON.stringify\n}, locales => {\n  function arrayToMap(arr) {\n    const result = new Map();\n    for (let i = 0; i < arr.length; i += 2) {\n      result.set(arr[i], arr[i + 1]);\n    }\n    return result;\n  }\n  function mergeMaps(map1, map2) {\n    const result = new Map(map1);\n    for (const [key, value] of map2) {\n      result.set(key, value);\n    }\n    return result;\n  }\n  function intersectMaps(map1, map2) {\n    if (!map1) {\n      return map2;\n    }\n    const result = new Map();\n    for (const [key, value] of map1) {\n      if (map2.has(key)) {\n        result.set(key, value);\n      }\n    }\n    return result;\n  }\n  const data = _a.ambiguousCharacterData.value;\n  let filteredLocales = locales.filter(l => !l.startsWith('_') && l in data);\n  if (filteredLocales.length === 0) {\n    filteredLocales = ['_default'];\n  }\n  let languageSpecificMap = undefined;\n  for (const locale of filteredLocales) {\n    const map = arrayToMap(data[locale]);\n    languageSpecificMap = intersectMaps(languageSpecificMap, map);\n  }\n  const commonMap = arrayToMap(data['_common']);\n  const map = mergeMaps(commonMap, languageSpecificMap);\n  return new _a(map);\n});\nAmbiguousCharacters._locales = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => Object.keys(_a.ambiguousCharacterData.value).filter(k => !k.startsWith('_')));\nclass InvisibleCharacters {\n  static getRawData() {\n    // Generated using https://github.com/hediet/vscode-unicode-data\n    return JSON.parse('[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]');\n  }\n  static getData() {\n    if (!this._data) {\n      this._data = new Set(InvisibleCharacters.getRawData());\n    }\n    return this._data;\n  }\n  static isInvisibleCharacter(codePoint) {\n    return InvisibleCharacters.getData().has(codePoint);\n  }\n  static get codePoints() {\n    return InvisibleCharacters.getData();\n  }\n}\nInvisibleCharacters._data = undefined;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vc3RyaW5ncy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsRUFBRTtBQUN5QztBQUNkO0FBQzFCLFNBQVNHLG1CQUFtQkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3JDLElBQUksQ0FBQ0EsR0FBRyxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLEVBQUU7SUFDakMsT0FBTyxJQUFJO0VBQ2Y7RUFDQSxPQUFPQSxHQUFHLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUNDLE1BQU0sS0FBSyxDQUFDO0FBQ2xDO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLFVBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsTUFBTUEsQ0FBQ0MsS0FBSyxFQUFFLEdBQUdDLElBQUksRUFBRTtFQUNuQyxJQUFJQSxJQUFJLENBQUNKLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDbkIsT0FBT0csS0FBSztFQUNoQjtFQUNBLE9BQU9BLEtBQUssQ0FBQ0UsT0FBTyxDQUFDSixhQUFhLEVBQUUsVUFBVUssS0FBSyxFQUFFQyxLQUFLLEVBQUU7SUFDeEQsTUFBTUMsR0FBRyxHQUFHQyxRQUFRLENBQUNGLEtBQUssRUFBRSxFQUFFLENBQUM7SUFDL0IsT0FBT0csS0FBSyxDQUFDRixHQUFHLENBQUMsSUFBSUEsR0FBRyxHQUFHLENBQUMsSUFBSUEsR0FBRyxJQUFJSixJQUFJLENBQUNKLE1BQU0sR0FDOUNNLEtBQUssR0FDTEYsSUFBSSxDQUFDSSxHQUFHLENBQUM7RUFDakIsQ0FBQyxDQUFDO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyx3QkFBd0JBLENBQUNSLEtBQUssRUFBRTtFQUM1QyxPQUFPQSxLQUFLLENB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R0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0SCxNQUFNTyxtQkFBbUIsQ0FBQztFQUM3QixPQUFPQyxVQUFVQSxDQUFBLEVBQUc7SUFDaEI7SUFDQSxPQUFPaEQsSUFBSSxDQUFDQyxLQUFLLENBQUMsc2lHQUFzaUcsQ0FBQztFQUM3akc7RUFDQSxPQUFPZ0QsT0FBT0EsQ0FBQSxFQUFHO0lBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQ3RELEtBQUssRUFBRTtNQUNiLElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUkyQixHQUFHLENBQUN5QixtQkFBbUIsQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMxRDtJQUNBLE9BQU8sSUFBSSxDQUFDckQsS0FBSztFQUNyQjtFQUNBLE9BQU91RCxvQkFBb0JBLENBQUNyRyxTQUFTLEVBQUU7SUFDbkMsT0FBT2tHLG1CQUFtQixDQUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDOUIsR0FBRyxDQUFDdEUsU0FBUyxDQUFDO0VBQ3ZEO0VBQ0EsV0FBV3NHLFVBQVVBLENBQUEsRUFBRztJQUNwQixPQUFPSixtQkFBbUIsQ0FBQ0UsT0FBTyxDQUFDLENBQUM7RUFDeEM7QUFDSjtBQUNBRixtQkFBbUIsQ0FBQ3BELEtBQUssR0FBR3ZCLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3N0cmluZ3MuanM/NGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnZhciBfYTtcbmltcG9ydCB7IExSVUNhY2hlZEZ1bmN0aW9uIH0gZnJvbSAnLi9jYWNoZS5qcyc7XG5pbXBvcnQgeyBMYXp5IH0gZnJvbSAnLi9sYXp5LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ZhbHN5T3JXaGl0ZXNwYWNlKHN0cikge1xuICAgIGlmICghc3RyIHx8IHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnRyaW0oKS5sZW5ndGggPT09IDA7XG59XG5jb25zdCBfZm9ybWF0UmVnZXhwID0gL3soXFxkKyl9L2c7XG4vKipcbiAqIEhlbHBlciB0byBwcm9kdWNlIGEgc3RyaW5nIHdpdGggYSB2YXJpYWJsZSBudW1iZXIgb2YgYXJndW1lbnRzLiBJbnNlcnQgdmFyaWFibGUgc2VnbWVudHNcbiAqIGludG8gdGhlIHN0cmluZyB1c2luZyB0aGUge259IG5vdGF0aW9uIHdoZXJlIE4gaXMgdGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCBmb2xsb3dpbmcgdGhlIHN0cmluZy5cbiAqIEBwYXJhbSB2YWx1ZSBzdHJpbmcgdG8gd2hpY2ggZm9ybWF0dGluZyBpcyBhcHBsaWVkXG4gKiBAcGFyYW0gYXJncyByZXBsYWNlbWVudHMgZm9yIHtufS1lbnRyaWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIC4uLmFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShfZm9ybWF0UmVnZXhwLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHBhcnNlSW50KGdyb3VwLCAxMCk7XG4gICAgICAgIHJldHVybiBpc05hTihpZHgpIHx8IGlkeCA8IDAgfHwgaWR4ID49IGFyZ3MubGVuZ3RoID9cbiAgICAgICAgICAgIG1hdGNoIDpcbiAgICAgICAgICAgIGFyZ3NbaWR4XTtcbiAgICB9KTtcbn1cbi8qKlxuICogRW5jb2RlcyB0aGUgZ2l2ZW4gdmFsdWUgc28gdGhhdCBpdCBjYW4gYmUgdXNlZCBhcyBsaXRlcmFsIHZhbHVlIGluIGh0bWwgYXR0cmlidXRlcy5cbiAqXG4gKiBJbiBvdGhlciB3b3JkcywgY29tcHV0ZXMgYCR2YWxgLCBzdWNoIHRoYXQgYGF0dHJgIGluIGA8ZGl2IGF0dHI9XCIkdmFsXCIgLz5gIGhhcyB0aGUgcnVudGltZSB2YWx1ZSBgdmFsdWVgLlxuICogVGhpcyBwcmV2ZW50cyBYU1MgaW5qZWN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbEF0dHJpYnV0ZUVuY29kZVZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1s8PlwiJyZdL2csIGNoID0+IHtcbiAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICAgICAgY2FzZSAnPCc6IHJldHVybiAnJmx0Oyc7XG4gICAgICAgICAgICBjYXNlICc+JzogcmV0dXJuICcmZ3Q7JztcbiAgICAgICAgICAgIGNhc2UgJ1wiJzogcmV0dXJuICcmcXVvdDsnO1xuICAgICAgICAgICAgY2FzZSAnXFwnJzogcmV0dXJuICcmYXBvczsnO1xuICAgICAgICAgICAgY2FzZSAnJic6IHJldHVybiAnJmFtcDsnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaDtcbiAgICB9KTtcbn1cbi8qKlxuICogQ29udmVydHMgSFRNTCBjaGFyYWN0ZXJzIGluc2lkZSB0aGUgc3RyaW5nIHRvIHVzZSBlbnRpdGllcyBpbnN0ZWFkLiBNYWtlcyB0aGUgc3RyaW5nIHNhZmUgZnJvbVxuICogYmVpbmcgdXNlZCBlLmcuIGluIEhUTUxFbGVtZW50LmlubmVySFRNTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZShodG1sKSB7XG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvWzw+Jl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNhc2UgJzwnOiByZXR1cm4gJyZsdDsnO1xuICAgICAgICAgICAgY2FzZSAnPic6IHJldHVybiAnJmd0Oyc7XG4gICAgICAgICAgICBjYXNlICcmJzogcmV0dXJuICcmYW1wOyc7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogRXNjYXBlcyByZWd1bGFyIGV4cHJlc3Npb24gY2hhcmFjdGVycyBpbiBhIGdpdmVuIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXFxcXFxce1xcfVxcKlxcK1xcP1xcfFxcXlxcJFxcLlxcW1xcXVxcKFxcKV0vZywgJ1xcXFwkJicpO1xufVxuLyoqXG4gKiBSZW1vdmVzIGFsbCBvY2N1cnJlbmNlcyBvZiBuZWVkbGUgZnJvbSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgaGF5c3RhY2suXG4gKiBAcGFyYW0gaGF5c3RhY2sgc3RyaW5nIHRvIHRyaW1cbiAqIEBwYXJhbSBuZWVkbGUgdGhlIHRoaW5nIHRvIHRyaW0gKGRlZmF1bHQgaXMgYSBibGFuaylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0oaGF5c3RhY2ssIG5lZWRsZSA9ICcgJykge1xuICAgIGNvbnN0IHRyaW1tZWQgPSBsdHJpbShoYXlzdGFjaywgbmVlZGxlKTtcbiAgICByZXR1cm4gcnRyaW0odHJpbW1lZCwgbmVlZGxlKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBhbGwgb2NjdXJyZW5jZXMgb2YgbmVlZGxlIGZyb20gdGhlIGJlZ2lubmluZyBvZiBoYXlzdGFjay5cbiAqIEBwYXJhbSBoYXlzdGFjayBzdHJpbmcgdG8gdHJpbVxuICogQHBhcmFtIG5lZWRsZSB0aGUgdGhpbmcgdG8gdHJpbVxuICovXG5leHBvcnQgZnVuY3Rpb24gbHRyaW0oaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgIGlmICghaGF5c3RhY2sgfHwgIW5lZWRsZSkge1xuICAgICAgICByZXR1cm4gaGF5c3RhY2s7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRsZUxlbiA9IG5lZWRsZS5sZW5ndGg7XG4gICAgaWYgKG5lZWRsZUxlbiA9PT0gMCB8fCBoYXlzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGhheXN0YWNrO1xuICAgIH1cbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAoaGF5c3RhY2suaW5kZXhPZihuZWVkbGUsIG9mZnNldCkgPT09IG9mZnNldCkge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyBuZWVkbGVMZW47XG4gICAgfVxuICAgIHJldHVybiBoYXlzdGFjay5zdWJzdHJpbmcob2Zmc2V0KTtcbn1cbi8qKlxuICogUmVtb3ZlcyBhbGwgb2NjdXJyZW5jZXMgb2YgbmVlZGxlIGZyb20gdGhlIGVuZCBvZiBoYXlzdGFjay5cbiAqIEBwYXJhbSBoYXlzdGFjayBzdHJpbmcgdG8gdHJpbVxuICogQHBhcmFtIG5lZWRsZSB0aGUgdGhpbmcgdG8gdHJpbVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnRyaW0oaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgIGlmICghaGF5c3RhY2sgfHwgIW5lZWRsZSkge1xuICAgICAgICByZXR1cm4gaGF5c3RhY2s7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRsZUxlbiA9IG5lZWRsZS5sZW5ndGgsIGhheXN0YWNrTGVuID0gaGF5c3RhY2subGVuZ3RoO1xuICAgIGlmIChuZWVkbGVMZW4gPT09IDAgfHwgaGF5c3RhY2tMZW4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGhheXN0YWNrO1xuICAgIH1cbiAgICBsZXQgb2Zmc2V0ID0gaGF5c3RhY2tMZW4sIGlkeCA9IC0xO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlkeCA9IGhheXN0YWNrLmxhc3RJbmRleE9mKG5lZWRsZSwgb2Zmc2V0IC0gMSk7XG4gICAgICAgIGlmIChpZHggPT09IC0xIHx8IGlkeCArIG5lZWRsZUxlbiAhPT0gb2Zmc2V0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ID0gaWR4O1xuICAgIH1cbiAgICByZXR1cm4gaGF5c3RhY2suc3Vic3RyaW5nKDAsIG9mZnNldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydFNpbXBsZTJSZWdFeHBQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKC9bXFwtXFxcXFxce1xcfVxcK1xcP1xcfFxcXlxcJFxcLlxcLFxcW1xcXVxcKFxcKVxcI1xcc10vZywgJ1xcXFwkJicpLnJlcGxhY2UoL1tcXCpdL2csICcuKicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwV2lsZGNhcmRzKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKC9cXCovZywgJycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZ0V4cChzZWFyY2hTdHJpbmcsIGlzUmVnZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghc2VhcmNoU3RyaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSByZWdleCBmcm9tIGVtcHR5IHN0cmluZycpO1xuICAgIH1cbiAgICBpZiAoIWlzUmVnZXgpIHtcbiAgICAgICAgc2VhcmNoU3RyaW5nID0gZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyhzZWFyY2hTdHJpbmcpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy53aG9sZVdvcmQpIHtcbiAgICAgICAgaWYgKCEvXFxCLy50ZXN0KHNlYXJjaFN0cmluZy5jaGFyQXQoMCkpKSB7XG4gICAgICAgICAgICBzZWFyY2hTdHJpbmcgPSAnXFxcXGInICsgc2VhcmNoU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmICghL1xcQi8udGVzdChzZWFyY2hTdHJpbmcuY2hhckF0KHNlYXJjaFN0cmluZy5sZW5ndGggLSAxKSkpIHtcbiAgICAgICAgICAgIHNlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZyArICdcXFxcYic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1vZGlmaWVycyA9ICcnO1xuICAgIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgICAgICBtb2RpZmllcnMgKz0gJ2cnO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMubWF0Y2hDYXNlKSB7XG4gICAgICAgIG1vZGlmaWVycyArPSAnaSc7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm11bHRpbGluZSkge1xuICAgICAgICBtb2RpZmllcnMgKz0gJ20nO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy51bmljb2RlKSB7XG4gICAgICAgIG1vZGlmaWVycyArPSAndSc7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVnRXhwKHNlYXJjaFN0cmluZywgbW9kaWZpZXJzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWdFeHBMZWFkc1RvRW5kbGVzc0xvb3AocmVnZXhwKSB7XG4gICAgLy8gRXhpdCBlYXJseSBpZiBpdCdzIG9uZSBvZiB0aGVzZSBzcGVjaWFsIGNhc2VzIHdoaWNoIGFyZSBtZWFudCB0byBtYXRjaFxuICAgIC8vIGFnYWluc3QgYW4gZW1wdHkgc3RyaW5nXG4gICAgaWYgKHJlZ2V4cC5zb3VyY2UgPT09ICdeJyB8fCByZWdleHAuc291cmNlID09PSAnXiQnIHx8IHJlZ2V4cC5zb3VyY2UgPT09ICckJyB8fCByZWdleHAuc291cmNlID09PSAnXlxcXFxzKiQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gV2UgY2hlY2sgYWdhaW5zdCBhbiBlbXB0eSBzdHJpbmcuIElmIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gZG9lc24ndCBhZHZhbmNlXG4gICAgLy8gKGUuZy4gZW5kcyBpbiBhbiBlbmRsZXNzIGxvb3ApIGl0IHdpbGwgbWF0Y2ggYW4gZW1wdHkgc3RyaW5nLlxuICAgIGNvbnN0IG1hdGNoID0gcmVnZXhwLmV4ZWMoJycpO1xuICAgIHJldHVybiAhIShtYXRjaCAmJiByZWdleHAubGFzdEluZGV4ID09PSAwKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdExpbmVzKHN0cikge1xuICAgIHJldHVybiBzdHIuc3BsaXQoL1xcclxcbnxcXHJ8XFxuLyk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3BsaXRMaW5lc0luY2x1ZGVTZXBhcmF0b3JzKHN0cikge1xuICAgIHZhciBfYjtcbiAgICBjb25zdCBsaW5lc1dpdGhTZXBhcmF0b3JzID0gW107XG4gICAgY29uc3Qgc3BsaXRMaW5lc0FuZFNlcGFyYXRvcnMgPSBzdHIuc3BsaXQoLyhcXHJcXG58XFxyfFxcbikvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguY2VpbChzcGxpdExpbmVzQW5kU2VwYXJhdG9ycy5sZW5ndGggLyAyKTsgaSsrKSB7XG4gICAgICAgIGxpbmVzV2l0aFNlcGFyYXRvcnMucHVzaChzcGxpdExpbmVzQW5kU2VwYXJhdG9yc1syICogaV0gKyAoKF9iID0gc3BsaXRMaW5lc0FuZFNlcGFyYXRvcnNbMiAqIGkgKyAxXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzV2l0aFNlcGFyYXRvcnM7XG59XG4vKipcbiAqIFJldHVybnMgZmlyc3QgaW5kZXggb2YgdGhlIHN0cmluZyB0aGF0IGlzIG5vdCB3aGl0ZXNwYWNlLlxuICogSWYgc3RyaW5nIGlzIGVtcHR5IG9yIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMsIHJldHVybnMgLTFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0Tm9uV2hpdGVzcGFjZUluZGV4KHN0cikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjaENvZGUgIT09IDMyIC8qIENoYXJDb2RlLlNwYWNlICovICYmIGNoQ29kZSAhPT0gOSAvKiBDaGFyQ29kZS5UYWIgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbGVhZGluZyB3aGl0ZXNwYWNlIG9mIHRoZSBzdHJpbmcuXG4gKiBJZiB0aGUgc3RyaW5nIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMsIHJldHVybnMgZW50aXJlIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVhZGluZ1doaXRlc3BhY2Uoc3RyLCBzdGFydCA9IDAsIGVuZCA9IHN0ci5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBjb25zdCBjaENvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNoQ29kZSAhPT0gMzIgLyogQ2hhckNvZGUuU3BhY2UgKi8gJiYgY2hDb2RlICE9PSA5IC8qIENoYXJDb2RlLlRhYiAqLykge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGxhc3QgaW5kZXggb2YgdGhlIHN0cmluZyB0aGF0IGlzIG5vdCB3aGl0ZXNwYWNlLlxuICogSWYgc3RyaW5nIGlzIGVtcHR5IG9yIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMsIHJldHVybnMgLTFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxhc3ROb25XaGl0ZXNwYWNlSW5kZXgoc3RyLCBzdGFydEluZGV4ID0gc3RyLmxlbmd0aCAtIDEpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgY2hDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjaENvZGUgIT09IDMyIC8qIENoYXJDb2RlLlNwYWNlICovICYmIGNoQ29kZSAhPT0gOSAvKiBDaGFyQ29kZS5UYWIgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlU3Vic3RyaW5nKGEsIGIsIGFTdGFydCA9IDAsIGFFbmQgPSBhLmxlbmd0aCwgYlN0YXJ0ID0gMCwgYkVuZCA9IGIubGVuZ3RoKSB7XG4gICAgZm9yICg7IGFTdGFydCA8IGFFbmQgJiYgYlN0YXJ0IDwgYkVuZDsgYVN0YXJ0KyssIGJTdGFydCsrKSB7XG4gICAgICAgIGNvbnN0IGNvZGVBID0gYS5jaGFyQ29kZUF0KGFTdGFydCk7XG4gICAgICAgIGNvbnN0IGNvZGVCID0gYi5jaGFyQ29kZUF0KGJTdGFydCk7XG4gICAgICAgIGlmIChjb2RlQSA8IGNvZGVCKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29kZUEgPiBjb2RlQikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYUxlbiA9IGFFbmQgLSBhU3RhcnQ7XG4gICAgY29uc3QgYkxlbiA9IGJFbmQgLSBiU3RhcnQ7XG4gICAgaWYgKGFMZW4gPCBiTGVuKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUxlbiA+IGJMZW4pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVJZ25vcmVDYXNlKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVN1YnN0cmluZ0lnbm9yZUNhc2UoYSwgYiwgMCwgYS5sZW5ndGgsIDAsIGIubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlU3Vic3RyaW5nSWdub3JlQ2FzZShhLCBiLCBhU3RhcnQgPSAwLCBhRW5kID0gYS5sZW5ndGgsIGJTdGFydCA9IDAsIGJFbmQgPSBiLmxlbmd0aCkge1xuICAgIGZvciAoOyBhU3RhcnQgPCBhRW5kICYmIGJTdGFydCA8IGJFbmQ7IGFTdGFydCsrLCBiU3RhcnQrKykge1xuICAgICAgICBsZXQgY29kZUEgPSBhLmNoYXJDb2RlQXQoYVN0YXJ0KTtcbiAgICAgICAgbGV0IGNvZGVCID0gYi5jaGFyQ29kZUF0KGJTdGFydCk7XG4gICAgICAgIGlmIChjb2RlQSA9PT0gY29kZUIpIHtcbiAgICAgICAgICAgIC8vIGVxdWFsXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZUEgPj0gMTI4IHx8IGNvZGVCID49IDEyOCkge1xuICAgICAgICAgICAgLy8gbm90IEFTQ0lJIGxldHRlcnMgLT4gZmFsbGJhY2sgdG8gbG93ZXItY2FzaW5nIHN0cmluZ3NcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlU3Vic3RyaW5nKGEudG9Mb3dlckNhc2UoKSwgYi50b0xvd2VyQ2FzZSgpLCBhU3RhcnQsIGFFbmQsIGJTdGFydCwgYkVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWFwcGVyIGxvd2VyLWNhc2UgYXNjaWkgbGV0dGVyIG9udG8gdXBwZXItY2FzZSB2YXJpbmF0c1xuICAgICAgICAvLyBbOTctMTIyXSAobG93ZXIgYXNjaWkpIC0tPiBbNjUtOTBdICh1cHBlciBhc2NpaSlcbiAgICAgICAgaWYgKGlzTG93ZXJBc2NpaUxldHRlcihjb2RlQSkpIHtcbiAgICAgICAgICAgIGNvZGVBIC09IDMyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0xvd2VyQXNjaWlMZXR0ZXIoY29kZUIpKSB7XG4gICAgICAgICAgICBjb2RlQiAtPSAzMjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb21wYXJlIGJvdGggY29kZSBwb2ludHNcbiAgICAgICAgY29uc3QgZGlmZiA9IGNvZGVBIC0gY29kZUI7XG4gICAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZjtcbiAgICB9XG4gICAgY29uc3QgYUxlbiA9IGFFbmQgLSBhU3RhcnQ7XG4gICAgY29uc3QgYkxlbiA9IGJFbmQgLSBiU3RhcnQ7XG4gICAgaWYgKGFMZW4gPCBiTGVuKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUxlbiA+IGJMZW4pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXNjaWlEaWdpdChjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gNDggLyogQ2hhckNvZGUuRGlnaXQwICovICYmIGNvZGUgPD0gNTcgLyogQ2hhckNvZGUuRGlnaXQ5ICovO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG93ZXJBc2NpaUxldHRlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gOTcgLyogQ2hhckNvZGUuYSAqLyAmJiBjb2RlIDw9IDEyMiAvKiBDaGFyQ29kZS56ICovO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBwZXJBc2NpaUxldHRlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gNjUgLyogQ2hhckNvZGUuQSAqLyAmJiBjb2RlIDw9IDkwIC8qIENoYXJDb2RlLlogKi87XG59XG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzSWdub3JlQ2FzZShhLCBiKSB7XG4gICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBjb21wYXJlU3Vic3RyaW5nSWdub3JlQ2FzZShhLCBiKSA9PT0gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdGFydHNXaXRoSWdub3JlQ2FzZShzdHIsIGNhbmRpZGF0ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZUxlbmd0aCA9IGNhbmRpZGF0ZS5sZW5ndGg7XG4gICAgaWYgKGNhbmRpZGF0ZS5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhcmVTdWJzdHJpbmdJZ25vcmVDYXNlKHN0ciwgY2FuZGlkYXRlLCAwLCBjYW5kaWRhdGVMZW5ndGgpID09PSAwO1xufVxuLyoqXG4gKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBjb21tb24gcHJlZml4IG9mIHRoZSB0d28gc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vblByZWZpeExlbmd0aChhLCBiKSB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGEuY2hhckNvZGVBdChpKSAhPT0gYi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGVuO1xufVxuLyoqXG4gKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBjb21tb24gc3VmZml4IG9mIHRoZSB0d28gc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vblN1ZmZpeExlbmd0aChhLCBiKSB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBhTGFzdEluZGV4ID0gYS5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGJMYXN0SW5kZXggPSBiLmxlbmd0aCAtIDE7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChhLmNoYXJDb2RlQXQoYUxhc3RJbmRleCAtIGkpICE9PSBiLmNoYXJDb2RlQXQoYkxhc3RJbmRleCAtIGkpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGVuO1xufVxuLyoqXG4gKiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdXJyb2dhdGVfcGFpclxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNIaWdoU3Vycm9nYXRlKGNoYXJDb2RlKSB7XG4gICAgcmV0dXJuICgweEQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhEQkZGKTtcbn1cbi8qKlxuICogU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3Vycm9nYXRlX3BhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG93U3Vycm9nYXRlKGNoYXJDb2RlKSB7XG4gICAgcmV0dXJuICgweERDMDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhERkZGKTtcbn1cbi8qKlxuICogU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3Vycm9nYXRlX3BhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVDb2RlUG9pbnQoaGlnaFN1cnJvZ2F0ZSwgbG93U3Vycm9nYXRlKSB7XG4gICAgcmV0dXJuICgoaGlnaFN1cnJvZ2F0ZSAtIDB4RDgwMCkgPDwgMTApICsgKGxvd1N1cnJvZ2F0ZSAtIDB4REMwMCkgKyAweDEwMDAwO1xufVxuLyoqXG4gKiBnZXQgdGhlIGNvZGUgcG9pbnQgdGhhdCBiZWdpbnMgYXQgb2Zmc2V0IGBvZmZzZXRgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q29kZVBvaW50KHN0ciwgbGVuLCBvZmZzZXQpIHtcbiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgaWYgKGlzSGlnaFN1cnJvZ2F0ZShjaGFyQ29kZSkgJiYgb2Zmc2V0ICsgMSA8IGxlbikge1xuICAgICAgICBjb25zdCBuZXh0Q2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQgKyAxKTtcbiAgICAgICAgaWYgKGlzTG93U3Vycm9nYXRlKG5leHRDaGFyQ29kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wdXRlQ29kZVBvaW50KGNoYXJDb2RlLCBuZXh0Q2hhckNvZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFyQ29kZTtcbn1cbi8qKlxuICogZ2V0IHRoZSBjb2RlIHBvaW50IHRoYXQgZW5kcyByaWdodCBiZWZvcmUgb2Zmc2V0IGBvZmZzZXRgXG4gKi9cbmZ1bmN0aW9uIGdldFByZXZDb2RlUG9pbnQoc3RyLCBvZmZzZXQpIHtcbiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCAtIDEpO1xuICAgIGlmIChpc0xvd1N1cnJvZ2F0ZShjaGFyQ29kZSkgJiYgb2Zmc2V0ID4gMSkge1xuICAgICAgICBjb25zdCBwcmV2Q2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQgLSAyKTtcbiAgICAgICAgaWYgKGlzSGlnaFN1cnJvZ2F0ZShwcmV2Q2hhckNvZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZUNvZGVQb2ludChwcmV2Q2hhckNvZGUsIGNoYXJDb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhckNvZGU7XG59XG5leHBvcnQgY2xhc3MgQ29kZVBvaW50SXRlcmF0b3Ige1xuICAgIGdldCBvZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0ciwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB0aGlzLl9zdHIgPSBzdHI7XG4gICAgICAgIHRoaXMuX2xlbiA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IG9mZnNldDtcbiAgICB9XG4gICAgc2V0T2Zmc2V0KG9mZnNldCkge1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICAgIHByZXZDb2RlUG9pbnQoKSB7XG4gICAgICAgIGNvbnN0IGNvZGVQb2ludCA9IGdldFByZXZDb2RlUG9pbnQodGhpcy5fc3RyLCB0aGlzLl9vZmZzZXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgLT0gKGNvZGVQb2ludCA+PSA2NTUzNiAvKiBDb25zdGFudHMuVU5JQ09ERV9TVVBQTEVNRU5UQVJZX1BMQU5FX0JFR0lOICovID8gMiA6IDEpO1xuICAgICAgICByZXR1cm4gY29kZVBvaW50O1xuICAgIH1cbiAgICBuZXh0Q29kZVBvaW50KCkge1xuICAgICAgICBjb25zdCBjb2RlUG9pbnQgPSBnZXROZXh0Q29kZVBvaW50KHRoaXMuX3N0ciwgdGhpcy5fbGVuLCB0aGlzLl9vZmZzZXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgKz0gKGNvZGVQb2ludCA+PSA2NTUzNiAvKiBDb25zdGFudHMuVU5JQ09ERV9TVVBQTEVNRU5UQVJZX1BMQU5FX0JFR0lOICovID8gMiA6IDEpO1xuICAgICAgICByZXR1cm4gY29kZVBvaW50O1xuICAgIH1cbiAgICBlb2woKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fb2Zmc2V0ID49IHRoaXMuX2xlbik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEdyYXBoZW1lSXRlcmF0b3Ige1xuICAgIGdldCBvZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVyYXRvci5vZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0ciwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB0aGlzLl9pdGVyYXRvciA9IG5ldyBDb2RlUG9pbnRJdGVyYXRvcihzdHIsIG9mZnNldCk7XG4gICAgfVxuICAgIG5leHRHcmFwaGVtZUxlbmd0aCgpIHtcbiAgICAgICAgY29uc3QgZ3JhcGhlbWVCcmVha1RyZWUgPSBHcmFwaGVtZUJyZWFrVHJlZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgICBjb25zdCBpbml0aWFsT2Zmc2V0ID0gaXRlcmF0b3Iub2Zmc2V0O1xuICAgICAgICBsZXQgZ3JhcGhlbWVCcmVha1R5cGUgPSBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShpdGVyYXRvci5uZXh0Q29kZVBvaW50KCkpO1xuICAgICAgICB3aGlsZSAoIWl0ZXJhdG9yLmVvbCgpKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBpdGVyYXRvci5vZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCBuZXh0R3JhcGhlbWVCcmVha1R5cGUgPSBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShpdGVyYXRvci5uZXh0Q29kZVBvaW50KCkpO1xuICAgICAgICAgICAgaWYgKGJyZWFrQmV0d2VlbkdyYXBoZW1lQnJlYWtUeXBlKGdyYXBoZW1lQnJlYWtUeXBlLCBuZXh0R3JhcGhlbWVCcmVha1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gbW92ZSBpdGVyYXRvciBiYWNrXG4gICAgICAgICAgICAgICAgaXRlcmF0b3Iuc2V0T2Zmc2V0KG9mZnNldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncmFwaGVtZUJyZWFrVHlwZSA9IG5leHRHcmFwaGVtZUJyZWFrVHlwZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGl0ZXJhdG9yLm9mZnNldCAtIGluaXRpYWxPZmZzZXQpO1xuICAgIH1cbiAgICBwcmV2R3JhcGhlbWVMZW5ndGgoKSB7XG4gICAgICAgIGNvbnN0IGdyYXBoZW1lQnJlYWtUcmVlID0gR3JhcGhlbWVCcmVha1RyZWUuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICAgICAgY29uc3QgaW5pdGlhbE9mZnNldCA9IGl0ZXJhdG9yLm9mZnNldDtcbiAgICAgICAgbGV0IGdyYXBoZW1lQnJlYWtUeXBlID0gZ3JhcGhlbWVCcmVha1RyZWUuZ2V0R3JhcGhlbWVCcmVha1R5cGUoaXRlcmF0b3IucHJldkNvZGVQb2ludCgpKTtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLm9mZnNldCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGl0ZXJhdG9yLm9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZHcmFwaGVtZUJyZWFrVHlwZSA9IGdyYXBoZW1lQnJlYWtUcmVlLmdldEdyYXBoZW1lQnJlYWtUeXBlKGl0ZXJhdG9yLnByZXZDb2RlUG9pbnQoKSk7XG4gICAgICAgICAgICBpZiAoYnJlYWtCZXR3ZWVuR3JhcGhlbWVCcmVha1R5cGUocHJldkdyYXBoZW1lQnJlYWtUeXBlLCBncmFwaGVtZUJyZWFrVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIGl0ZXJhdG9yIGJhY2tcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5zZXRPZmZzZXQob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyYXBoZW1lQnJlYWtUeXBlID0gcHJldkdyYXBoZW1lQnJlYWtUeXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaW5pdGlhbE9mZnNldCAtIGl0ZXJhdG9yLm9mZnNldCk7XG4gICAgfVxuICAgIGVvbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZXJhdG9yLmVvbCgpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Q2hhckxlbmd0aChzdHIsIGluaXRpYWxPZmZzZXQpIHtcbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBHcmFwaGVtZUl0ZXJhdG9yKHN0ciwgaW5pdGlhbE9mZnNldCk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yLm5leHRHcmFwaGVtZUxlbmd0aCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByZXZDaGFyTGVuZ3RoKHN0ciwgaW5pdGlhbE9mZnNldCkge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gbmV3IEdyYXBoZW1lSXRlcmF0b3Ioc3RyLCBpbml0aWFsT2Zmc2V0KTtcbiAgICByZXR1cm4gaXRlcmF0b3IucHJldkdyYXBoZW1lTGVuZ3RoKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hhckNvbnRhaW5pbmdPZmZzZXQoc3RyLCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID4gMCAmJiBpc0xvd1N1cnJvZ2F0ZShzdHIuY2hhckNvZGVBdChvZmZzZXQpKSkge1xuICAgICAgICBvZmZzZXQtLTtcbiAgICB9XG4gICAgY29uc3QgZW5kT2Zmc2V0ID0gb2Zmc2V0ICsgbmV4dENoYXJMZW5ndGgoc3RyLCBvZmZzZXQpO1xuICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gZW5kT2Zmc2V0IC0gcHJldkNoYXJMZW5ndGgoc3RyLCBlbmRPZmZzZXQpO1xuICAgIHJldHVybiBbc3RhcnRPZmZzZXQsIGVuZE9mZnNldF07XG59XG5sZXQgQ09OVEFJTlNfUlRMID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gbWFrZUNvbnRhaW5zUnRsKCkge1xuICAgIC8vIEdlbmVyYXRlZCB1c2luZyBodHRwczovL2dpdGh1Yi5jb20vYWxleGRpbWEvdW5pY29kZS11dGlscy9ibG9iL21haW4vcnRsLXRlc3QuanNcbiAgICByZXR1cm4gLyg/OltcXHUwNUJFXFx1MDVDMFxcdTA1QzNcXHUwNUM2XFx1MDVEMC1cXHUwNUY0XFx1MDYwOFxcdTA2MEJcXHUwNjBEXFx1MDYxQi1cXHUwNjRBXFx1MDY2RC1cXHUwNjZGXFx1MDY3MS1cXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjEtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA3RkUtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4MzAtXFx1MDg1OFxcdTA4NUUtXFx1MDg4RVxcdTA4QTAtXFx1MDhDOVxcdTIwMEZcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGRDNEXFx1RkQ1MC1cXHVGREM3XFx1RkRGMC1cXHVGREZDXFx1RkU3MC1cXHVGRUZDXXxcXHVEODAyW1xcdURDMDAtXFx1REQxQlxcdUREMjAtXFx1REUwMFxcdURFMTAtXFx1REUzNVxcdURFNDAtXFx1REVFNFxcdURFRUItXFx1REYzNVxcdURGNDAtXFx1REZGRl18XFx1RDgwM1tcXHVEQzAwLVxcdUREMjNcXHVERTgwLVxcdURFQTlcXHVERUFELVxcdURGNDVcXHVERjUxLVxcdURGODFcXHVERjg2LVxcdURGRjZdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0NGXFx1REQwMC1cXHVERDQzXFx1REQ0Qi1cXHVERkZGXXxcXHVEODNCW1xcdURDMDAtXFx1REVCQl0pLztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGBzdHJgIGNvbnRhaW5zIGFueSBVbmljb2RlIGNoYXJhY3RlciB0aGF0IGlzIGNsYXNzaWZpZWQgYXMgXCJSXCIgb3IgXCJBTFwiLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNSVEwoc3RyKSB7XG4gICAgaWYgKCFDT05UQUlOU19SVEwpIHtcbiAgICAgICAgQ09OVEFJTlNfUlRMID0gbWFrZUNvbnRhaW5zUnRsKCk7XG4gICAgfVxuICAgIHJldHVybiBDT05UQUlOU19SVEwudGVzdChzdHIpO1xufVxuY29uc3QgSVNfQkFTSUNfQVNDSUkgPSAvXltcXHRcXG5cXHJcXHgyMC1cXHg3RV0qJC87XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgc3RyYCBjb250YWlucyBvbmx5IGJhc2ljIEFTQ0lJIGNoYXJhY3RlcnMgaW4gdGhlIHJhbmdlIDMyIC0gMTI2IChpbmNsdWRpbmcgMzIgYW5kIDEyNikgb3IgXFxuLCBcXHIsIFxcdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCYXNpY0FTQ0lJKHN0cikge1xuICAgIHJldHVybiBJU19CQVNJQ19BU0NJSS50ZXN0KHN0cik7XG59XG5leHBvcnQgY29uc3QgVU5VU1VBTF9MSU5FX1RFUk1JTkFUT1JTID0gL1tcXHUyMDI4XFx1MjAyOV0vOyAvLyBMSU5FIFNFUEFSQVRPUiAoTFMpIG9yIFBBUkFHUkFQSCBTRVBBUkFUT1IgKFBTKVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHN0cmAgY29udGFpbnMgdW51c3VhbCBsaW5lIHRlcm1pbmF0b3JzLCBsaWtlIExTIG9yIFBTXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1VudXN1YWxMaW5lVGVybWluYXRvcnMoc3RyKSB7XG4gICAgcmV0dXJuIFVOVVNVQUxfTElORV9URVJNSU5BVE9SUy50ZXN0KHN0cik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGdWxsV2lkdGhDaGFyYWN0ZXIoY2hhckNvZGUpIHtcbiAgICAvLyBEbyBhIGNoZWFwIHRyaWNrIHRvIGJldHRlciBzdXBwb3J0IHdyYXBwaW5nIG9mIHdpZGUgY2hhcmFjdGVycywgdHJlYXQgdGhlbSBhcyAyIGNvbHVtbnNcbiAgICAvLyBodHRwOi8vanJncmFwaGl4Lm5ldC9yZXNlYXJjaC91bmljb2RlX2Jsb2Nrcy5waHBcbiAgICAvLyAgICAgICAgICAyRTgwIC0gMkVGRiAgIENKSyBSYWRpY2FscyBTdXBwbGVtZW50XG4gICAgLy8gICAgICAgICAgMkYwMCAtIDJGREYgICBLYW5neGkgUmFkaWNhbHNcbiAgICAvLyAgICAgICAgICAyRkYwIC0gMkZGRiAgIElkZW9ncmFwaGljIERlc2NyaXB0aW9uIENoYXJhY3RlcnNcbiAgICAvLyAgICAgICAgICAzMDAwIC0gMzAzRiAgIENKSyBTeW1ib2xzIGFuZCBQdW5jdHVhdGlvblxuICAgIC8vICAgICAgICAgIDMwNDAgLSAzMDlGICAgSGlyYWdhbmFcbiAgICAvLyAgICAgICAgICAzMEEwIC0gMzBGRiAgIEthdGFrYW5hXG4gICAgLy8gICAgICAgICAgMzEwMCAtIDMxMkYgICBCb3BvbW9mb1xuICAgIC8vICAgICAgICAgIDMxMzAgLSAzMThGICAgSGFuZ3VsIENvbXBhdGliaWxpdHkgSmFtb1xuICAgIC8vICAgICAgICAgIDMxOTAgLSAzMTlGICAgS2FuYnVuXG4gICAgLy8gICAgICAgICAgMzFBMCAtIDMxQkYgICBCb3BvbW9mbyBFeHRlbmRlZFxuICAgIC8vICAgICAgICAgIDMxRjAgLSAzMUZGICAgS2F0YWthbmEgUGhvbmV0aWMgRXh0ZW5zaW9uc1xuICAgIC8vICAgICAgICAgIDMyMDAgLSAzMkZGICAgRW5jbG9zZWQgQ0pLIExldHRlcnMgYW5kIE1vbnRoc1xuICAgIC8vICAgICAgICAgIDMzMDAgLSAzM0ZGICAgQ0pLIENvbXBhdGliaWxpdHlcbiAgICAvLyAgICAgICAgICAzNDAwIC0gNERCRiAgIENKSyBVbmlmaWVkIElkZW9ncmFwaHMgRXh0ZW5zaW9uIEFcbiAgICAvLyAgICAgICAgICA0REMwIC0gNERGRiAgIFlpamluZyBIZXhhZ3JhbSBTeW1ib2xzXG4gICAgLy8gICAgICAgICAgNEUwMCAtIDlGRkYgICBDSksgVW5pZmllZCBJZGVvZ3JhcGhzXG4gICAgLy8gICAgICAgICAgQTAwMCAtIEE0OEYgICBZaSBTeWxsYWJsZXNcbiAgICAvLyAgICAgICAgICBBNDkwIC0gQTRDRiAgIFlpIFJhZGljYWxzXG4gICAgLy8gICAgICAgICAgQUMwMCAtIEQ3QUYgICBIYW5ndWwgU3lsbGFibGVzXG4gICAgLy8gW0lHTk9SRV0gRDgwMCAtIERCN0YgICBIaWdoIFN1cnJvZ2F0ZXNcbiAgICAvLyBbSUdOT1JFXSBEQjgwIC0gREJGRiAgIEhpZ2ggUHJpdmF0ZSBVc2UgU3Vycm9nYXRlc1xuICAgIC8vIFtJR05PUkVdIERDMDAgLSBERkZGICAgTG93IFN1cnJvZ2F0ZXNcbiAgICAvLyBbSUdOT1JFXSBFMDAwIC0gRjhGRiAgIFByaXZhdGUgVXNlIEFyZWFcbiAgICAvLyAgICAgICAgICBGOTAwIC0gRkFGRiAgIENKSyBDb21wYXRpYmlsaXR5IElkZW9ncmFwaHNcbiAgICAvLyBbSUdOT1JFXSBGQjAwIC0gRkI0RiAgIEFscGhhYmV0aWMgUHJlc2VudGF0aW9uIEZvcm1zXG4gICAgLy8gW0lHTk9SRV0gRkI1MCAtIEZERkYgICBBcmFiaWMgUHJlc2VudGF0aW9uIEZvcm1zLUFcbiAgICAvLyBbSUdOT1JFXSBGRTAwIC0gRkUwRiAgIFZhcmlhdGlvbiBTZWxlY3RvcnNcbiAgICAvLyBbSUdOT1JFXSBGRTIwIC0gRkUyRiAgIENvbWJpbmluZyBIYWxmIE1hcmtzXG4gICAgLy8gW0lHTk9SRV0gRkUzMCAtIEZFNEYgICBDSksgQ29tcGF0aWJpbGl0eSBGb3Jtc1xuICAgIC8vIFtJR05PUkVdIEZFNTAgLSBGRTZGICAgU21hbGwgRm9ybSBWYXJpYW50c1xuICAgIC8vIFtJR05PUkVdIEZFNzAgLSBGRUZGICAgQXJhYmljIFByZXNlbnRhdGlvbiBGb3Jtcy1CXG4gICAgLy8gICAgICAgICAgRkYwMCAtIEZGRUYgICBIYWxmd2lkdGggYW5kIEZ1bGx3aWR0aCBGb3Jtc1xuICAgIC8vICAgICAgICAgICAgICAgW2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hhbGZ3aWR0aF9hbmRfZnVsbHdpZHRoX2Zvcm1zXVxuICAgIC8vICAgICAgICAgICAgICAgb2Ygd2hpY2ggRkYwMSAtIEZGNUUgZnVsbHdpZHRoIEFTQ0lJIG9mIDIxIHRvIDdFXG4gICAgLy8gW0lHTk9SRV0gICAgYW5kIEZGNjUgLSBGRkRDIGhhbGZ3aWR0aCBvZiBLYXRha2FuYSBhbmQgSGFuZ3VsXG4gICAgLy8gW0lHTk9SRV0gRkZGMCAtIEZGRkYgICBTcGVjaWFsc1xuICAgIHJldHVybiAoKGNoYXJDb2RlID49IDB4MkU4MCAmJiBjaGFyQ29kZSA8PSAweEQ3QUYpXG4gICAgICAgIHx8IChjaGFyQ29kZSA+PSAweEY5MDAgJiYgY2hhckNvZGUgPD0gMHhGQUZGKVxuICAgICAgICB8fCAoY2hhckNvZGUgPj0gMHhGRjAxICYmIGNoYXJDb2RlIDw9IDB4RkY1RSkpO1xufVxuLyoqXG4gKiBBIGZhc3QgZnVuY3Rpb24gKHRoZXJlZm9yZSBpbXByZWNpc2UpIHRvIGNoZWNrIGlmIGNvZGUgcG9pbnRzIGFyZSBlbW9qaXMuXG4gKiBHZW5lcmF0ZWQgdXNpbmcgaHR0cHM6Ly9naXRodWIuY29tL2FsZXhkaW1hL3VuaWNvZGUtdXRpbHMvYmxvYi9tYWluL2Vtb2ppLXRlc3QuanNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1vamlJbXByZWNpc2UoeCkge1xuICAgIHJldHVybiAoKHggPj0gMHgxRjFFNiAmJiB4IDw9IDB4MUYxRkYpIHx8ICh4ID09PSA4OTg2KSB8fCAoeCA9PT0gODk4NykgfHwgKHggPT09IDkyMDApXG4gICAgICAgIHx8ICh4ID09PSA5MjAzKSB8fCAoeCA+PSA5NzI4ICYmIHggPD0gMTAxNzUpIHx8ICh4ID09PSAxMTA4OCkgfHwgKHggPT09IDExMDkzKVxuICAgICAgICB8fCAoeCA+PSAxMjc3NDQgJiYgeCA8PSAxMjg1OTEpIHx8ICh4ID49IDEyODY0MCAmJiB4IDw9IDEyODc2NClcbiAgICAgICAgfHwgKHggPj0gMTI4OTkyICYmIHggPD0gMTI5MDA4KSB8fCAoeCA+PSAxMjkyODAgJiYgeCA8PSAxMjk1MzUpXG4gICAgICAgIHx8ICh4ID49IDEyOTY0OCAmJiB4IDw9IDEyOTc4MikpO1xufVxuLy8gLS0gVVRGLTggQk9NXG5leHBvcnQgY29uc3QgVVRGOF9CT01fQ0hBUkFDVEVSID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NTI3OSAvKiBDaGFyQ29kZS5VVEY4X0JPTSAqLyk7XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRzV2l0aFVURjhCT00oc3RyKSB7XG4gICAgcmV0dXJuICEhKHN0ciAmJiBzdHIubGVuZ3RoID4gMCAmJiBzdHIuY2hhckNvZGVBdCgwKSA9PT0gNjUyNzkgLyogQ2hhckNvZGUuVVRGOF9CT00gKi8pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVXBwZXJjYXNlQ2hhcmFjdGVyKHRhcmdldCwgaWdub3JlRXNjYXBlZENoYXJzID0gZmFsc2UpIHtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpZ25vcmVFc2NhcGVkQ2hhcnMpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnJlcGxhY2UoL1xcXFwuL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldC50b0xvd2VyQ2FzZSgpICE9PSB0YXJnZXQ7XG59XG4vKipcbiAqIFByb2R1Y2VzICdhJy0neicsIGZvbGxvd2VkIGJ5ICdBJy0nWicuLi4gZm9sbG93ZWQgYnkgJ2EnLSd6JywgZXRjLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlTGV0dGVySGFzaChuKSB7XG4gICAgY29uc3QgTEVUVEVSU19DTlQgPSAoOTAgLyogQ2hhckNvZGUuWiAqLyAtIDY1IC8qIENoYXJDb2RlLkEgKi8gKyAxKTtcbiAgICBuID0gbiAlICgyICogTEVUVEVSU19DTlQpO1xuICAgIGlmIChuIDwgTEVUVEVSU19DTlQpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgLyogQ2hhckNvZGUuYSAqLyArIG4pO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSAvKiBDaGFyQ29kZS5BICovICsgbiAtIExFVFRFUlNfQ05UKTtcbn1cbmZ1bmN0aW9uIGJyZWFrQmV0d2VlbkdyYXBoZW1lQnJlYWtUeXBlKGJyZWFrVHlwZUEsIGJyZWFrVHlwZUIpIHtcbiAgICAvLyBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIyOS8jR3JhcGhlbWVfQ2x1c3Rlcl9Cb3VuZGFyeV9SdWxlc1xuICAgIC8vICEhISBMZXQncyBtYWtlIHRoZSBjb21tb24gY2FzZSBhIGJpdCBmYXN0ZXJcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5PdGhlciAqLykge1xuICAgICAgICAvLyBzZWUgaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljLzEzLjAuMC91Y2QvYXV4aWxpYXJ5L0dyYXBoZW1lQnJlYWtUZXN0LTEzLjAuMGQxMC5odG1sI3RhYmxlXG4gICAgICAgIHJldHVybiAoYnJlYWtUeXBlQiAhPT0gNSAvKiBHcmFwaGVtZUJyZWFrVHlwZS5FeHRlbmQgKi8gJiYgYnJlYWtUeXBlQiAhPT0gNyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5TcGFjaW5nTWFyayAqLyk7XG4gICAgfVxuICAgIC8vIERvIG5vdCBicmVhayBiZXR3ZWVuIGEgQ1IgYW5kIExGLiBPdGhlcndpc2UsIGJyZWFrIGJlZm9yZSBhbmQgYWZ0ZXIgY29udHJvbHMuXG4gICAgLy8gR0IzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSIMOXIExGXG4gICAgLy8gR0I0ICAgICAgICAgICAgICAgICAgICAgICAoQ29udHJvbCB8IENSIHwgTEYpIMO3XG4gICAgLy8gR0I1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIMO3IChDb250cm9sIHwgQ1IgfCBMRilcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5DUiAqLykge1xuICAgICAgICBpZiAoYnJlYWtUeXBlQiA9PT0gMyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5MRiAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjNcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gNCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5Db250cm9sICovIHx8IGJyZWFrVHlwZUEgPT09IDIgLyogR3JhcGhlbWVCcmVha1R5cGUuQ1IgKi8gfHwgYnJlYWtUeXBlQSA9PT0gMyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5MRiAqLykge1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gR0I0XG4gICAgfVxuICAgIGlmIChicmVha1R5cGVCID09PSA0IC8qIEdyYXBoZW1lQnJlYWtUeXBlLkNvbnRyb2wgKi8gfHwgYnJlYWtUeXBlQiA9PT0gMiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5DUiAqLyB8fCBicmVha1R5cGVCID09PSAzIC8qIEdyYXBoZW1lQnJlYWtUeXBlLkxGICovKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBHQjVcbiAgICB9XG4gICAgLy8gRG8gbm90IGJyZWFrIEhhbmd1bCBzeWxsYWJsZSBzZXF1ZW5jZXMuXG4gICAgLy8gR0I2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMIMOXIChMIHwgViB8IExWIHwgTFZUKVxuICAgIC8vIEdCNyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTFYgfCBWKSDDlyAoViB8IFQpXG4gICAgLy8gR0I4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKExWVCB8IFQpIMOXIFRcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gOCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5MICovKSB7XG4gICAgICAgIGlmIChicmVha1R5cGVCID09PSA4IC8qIEdyYXBoZW1lQnJlYWtUeXBlLkwgKi8gfHwgYnJlYWtUeXBlQiA9PT0gOSAvKiBHcmFwaGVtZUJyZWFrVHlwZS5WICovIHx8IGJyZWFrVHlwZUIgPT09IDExIC8qIEdyYXBoZW1lQnJlYWtUeXBlLkxWICovIHx8IGJyZWFrVHlwZUIgPT09IDEyIC8qIEdyYXBoZW1lQnJlYWtUeXBlLkxWVCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjZcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMTEgLyogR3JhcGhlbWVCcmVha1R5cGUuTFYgKi8gfHwgYnJlYWtUeXBlQSA9PT0gOSAvKiBHcmFwaGVtZUJyZWFrVHlwZS5WICovKSB7XG4gICAgICAgIGlmIChicmVha1R5cGVCID09PSA5IC8qIEdyYXBoZW1lQnJlYWtUeXBlLlYgKi8gfHwgYnJlYWtUeXBlQiA9PT0gMTAgLyogR3JhcGhlbWVCcmVha1R5cGUuVCAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjdcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMTIgLyogR3JhcGhlbWVCcmVha1R5cGUuTFZUICovIHx8IGJyZWFrVHlwZUEgPT09IDEwIC8qIEdyYXBoZW1lQnJlYWtUeXBlLlQgKi8pIHtcbiAgICAgICAgaWYgKGJyZWFrVHlwZUIgPT09IDEwIC8qIEdyYXBoZW1lQnJlYWtUeXBlLlQgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0I4XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRG8gbm90IGJyZWFrIGJlZm9yZSBleHRlbmRpbmcgY2hhcmFjdGVycyBvciBaV0ouXG4gICAgLy8gR0I5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIMOXIChFeHRlbmQgfCBaV0opXG4gICAgaWYgKGJyZWFrVHlwZUIgPT09IDUgLyogR3JhcGhlbWVCcmVha1R5cGUuRXh0ZW5kICovIHx8IGJyZWFrVHlwZUIgPT09IDEzIC8qIEdyYXBoZW1lQnJlYWtUeXBlLlpXSiAqLykge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEdCOVxuICAgIH1cbiAgICAvLyBUaGUgR0I5YSBhbmQgR0I5YiBydWxlcyBvbmx5IGFwcGx5IHRvIGV4dGVuZGVkIGdyYXBoZW1lIGNsdXN0ZXJzOlxuICAgIC8vIERvIG5vdCBicmVhayBiZWZvcmUgU3BhY2luZ01hcmtzLCBvciBhZnRlciBQcmVwZW5kIGNoYXJhY3RlcnMuXG4gICAgLy8gR0I5YSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIMOXIFNwYWNpbmdNYXJrXG4gICAgLy8gR0I5YiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmVwZW5kIMOXXG4gICAgaWYgKGJyZWFrVHlwZUIgPT09IDcgLyogR3JhcGhlbWVCcmVha1R5cGUuU3BhY2luZ01hcmsgKi8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjlhXG4gICAgfVxuICAgIGlmIChicmVha1R5cGVBID09PSAxIC8qIEdyYXBoZW1lQnJlYWtUeXBlLlByZXBlbmQgKi8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjliXG4gICAgfVxuICAgIC8vIERvIG5vdCBicmVhayB3aXRoaW4gZW1vamkgbW9kaWZpZXIgc2VxdWVuY2VzIG9yIGVtb2ppIHp3aiBzZXF1ZW5jZXMuXG4gICAgLy8gR0IxMSAgICBcXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfSBFeHRlbmQqIFpXSiDDlyBcXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfVxuICAgIGlmIChicmVha1R5cGVBID09PSAxMyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5aV0ogKi8gJiYgYnJlYWtUeXBlQiA9PT0gMTQgLyogR3JhcGhlbWVCcmVha1R5cGUuRXh0ZW5kZWRfUGljdG9ncmFwaGljICovKSB7XG4gICAgICAgIC8vIE5vdGU6IHdlIGFyZSBub3QgaW1wbGVtZW50aW5nIHRoZSBydWxlIGVudGlyZWx5IGhlcmUgdG8gYXZvaWQgaW50cm9kdWNpbmcgc3RhdGVzXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0IxMVxuICAgIH1cbiAgICAvLyBHQjEyICAgICAgICAgICAgICAgICAgICAgICAgICBzb3QgKFJJIFJJKSogUkkgw5cgUklcbiAgICAvLyBHQjEzICAgICAgICAgICAgICAgICAgICAgICAgW15SSV0gKFJJIFJJKSogUkkgw5cgUklcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gNiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5SZWdpb25hbF9JbmRpY2F0b3IgKi8gJiYgYnJlYWtUeXBlQiA9PT0gNiAvKiBHcmFwaGVtZUJyZWFrVHlwZS5SZWdpb25hbF9JbmRpY2F0b3IgKi8pIHtcbiAgICAgICAgLy8gTm90ZTogd2UgYXJlIG5vdCBpbXBsZW1lbnRpbmcgdGhlIHJ1bGUgZW50aXJlbHkgaGVyZSB0byBhdm9pZCBpbnRyb2R1Y2luZyBzdGF0ZXNcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjEyICYgR0IxM1xuICAgIH1cbiAgICAvLyBHQjk5OSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnkgw7cgQW55XG4gICAgcmV0dXJuIHRydWU7XG59XG5jbGFzcyBHcmFwaGVtZUJyZWFrVHJlZSB7XG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICBpZiAoIUdyYXBoZW1lQnJlYWtUcmVlLl9JTlNUQU5DRSkge1xuICAgICAgICAgICAgR3JhcGhlbWVCcmVha1RyZWUuX0lOU1RBTkNFID0gbmV3IEdyYXBoZW1lQnJlYWtUcmVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEdyYXBoZW1lQnJlYWtUcmVlLl9JTlNUQU5DRTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBnZXRHcmFwaGVtZUJyZWFrUmF3RGF0YSgpO1xuICAgIH1cbiAgICBnZXRHcmFwaGVtZUJyZWFrVHlwZShjb2RlUG9pbnQpIHtcbiAgICAgICAgLy8gISEhIExldCdzIG1ha2UgN2JpdCBBU0NJSSBhIGJpdCBmYXN0ZXI6IDAuLjMxXG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAzMikge1xuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PT0gMTAgLyogQ2hhckNvZGUuTGluZUZlZWQgKi8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMyAvKiBHcmFwaGVtZUJyZWFrVHlwZS5MRiAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT09IDEzIC8qIENoYXJDb2RlLkNhcnJpYWdlUmV0dXJuICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgLyogR3JhcGhlbWVCcmVha1R5cGUuQ1IgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gNCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5Db250cm9sICovO1xuICAgICAgICB9XG4gICAgICAgIC8vICEhISBMZXQncyBtYWtlIDdiaXQgQVNDSUkgYSBiaXQgZmFzdGVyOiAzMi4uMTI2XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAxMjcpIHtcbiAgICAgICAgICAgIHJldHVybiAwIC8qIEdyYXBoZW1lQnJlYWtUeXBlLk90aGVyICovO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9kYXRhO1xuICAgICAgICBjb25zdCBub2RlQ291bnQgPSBkYXRhLmxlbmd0aCAvIDM7XG4gICAgICAgIGxldCBub2RlSW5kZXggPSAxO1xuICAgICAgICB3aGlsZSAobm9kZUluZGV4IDw9IG5vZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA8IGRhdGFbMyAqIG5vZGVJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAvLyBnbyBsZWZ0XG4gICAgICAgICAgICAgICAgbm9kZUluZGV4ID0gMiAqIG5vZGVJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA+IGRhdGFbMyAqIG5vZGVJbmRleCArIDFdKSB7XG4gICAgICAgICAgICAgICAgLy8gZ28gcmlnaHRcbiAgICAgICAgICAgICAgICBub2RlSW5kZXggPSAyICogbm9kZUluZGV4ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGhpdFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhWzMgKiBub2RlSW5kZXggKyAyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMCAvKiBHcmFwaGVtZUJyZWFrVHlwZS5PdGhlciAqLztcbiAgICB9XG59XG5HcmFwaGVtZUJyZWFrVHJlZS5fSU5TVEFOQ0UgPSBudWxsO1xuZnVuY3Rpb24gZ2V0R3JhcGhlbWVCcmVha1Jhd0RhdGEoKSB7XG4gICAgLy8gZ2VuZXJhdGVkIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGV4ZGltYS91bmljb2RlLXV0aWxzL2Jsb2IvbWFpbi9ncmFwaGVtZS1icmVhay5qc1xuICAgIHJldHVybiBKU09OLnBhcnNlKCdbMCwwLDAsNTEyMjksNTEyNTUsMTIsNDQwNjEsNDQwODcsMTIsMTI3NDYyLDEyNzQ4Nyw2LDcwODMsNzA4NSw1LDQ3NjQ1LDQ3NjcxLDEyLDU0ODEzLDU0ODM5LDEyLDEyODY3OCwxMjg2NzgsMTQsMzI3MCwzMjcwLDUsOTkxOSw5OTIzLDE0LDQ1ODUzLDQ1ODc5LDEyLDQ5NDM3LDQ5NDYzLDEyLDUzMDIxLDUzMDQ3LDEyLDcxMjE2LDcxMjE4LDcsMTI4Mzk4LDEyODM5OSwxNCwxMjkzNjAsMTI5Mzc0LDE0LDI1MTksMjUxOSw1LDQ0NDgsNDUxOSw5LDk3NDIsOTc0MiwxNCwxMjMzNiwxMjMzNiwxNCw0NDk1Nyw0NDk4MywxMiw0Njc0OSw0Njc3NSwxMiw0ODU0MSw0ODU2NywxMiw1MDMzMyw1MDM1OSwxMiw1MjEyNSw1MjE1MSwxMiw1MzkxNyw1Mzk0MywxMiw2OTg4OCw2OTg5MCw1LDczMDE4LDczMDE4LDUsMTI3OTkwLDEyNzk5MCwxNCwxMjg1NTgsMTI4NTU5LDE0LDEyODc1OSwxMjg3NjAsMTQsMTI5NjUzLDEyOTY1NSwxNCwyMDI3LDIwMzUsNSwyODkxLDI4OTIsNywzNzYxLDM3NjEsNSw2NjgzLDY2ODMsNSw4MjkzLDgyOTMsNCw5ODI1LDk4MjYsMTQsOTk5OSw5OTk5LDE0LDQzNDUyLDQzNDUzLDUsNDQ1MDksNDQ1MzUsMTIsNDU0MDUsNDU0MzEsMTIsNDYzMDEsNDYzMjcsMTIsNDcxOTcsNDcyMjMsMTIsNDgwOTMsNDgxMTksMTIsNDg5ODksNDkwMTUsMTIsNDk4ODUsNDk5MTEsMTIsNTA3ODEsNTA4MDcsMTIsNTE2NzcsNTE3MDMsMTIsNTI1NzMsNTI1OTksMTIsNTM0NjksNTM0OTUsMTIsNTQzNjUsNTQzOTEsMTIsNjUyNzksNjUyNzksNCw3MDQ3MSw3MDQ3Miw3LDcyMTQ1LDcyMTQ3LDcsMTE5MTczLDExOTE3OSw1LDEyNzc5OSwxMjc4MTgsMTQsMTI4MjQwLDEyODI0NCwxNCwxMjg1MTIsMTI4NTEyLDE0LDEyODY1MiwxMjg2NTIsMTQsMTI4NzIxLDEyODcyMiwxNCwxMjkyOTIsMTI5MjkyLDE0LDEyOTQ0NSwxMjk0NTAsMTQsMTI5NzM0LDEyOTc0MywxNCwxNDc2LDE0NzcsNSwyMzY2LDIzNjgsNywyNzUwLDI3NTIsNywzMDc2LDMwNzYsNSwzNDE1LDM0MTUsNSw0MTQxLDQxNDQsNSw2MTA5LDYxMDksNSw2OTY0LDY5NjQsNSw3Mzk0LDc0MDAsNSw5MTk3LDkxOTgsMTQsOTc3MCw5NzcwLDE0LDk4NzcsOTg3NywxNCw5OTY4LDk5NjksMTQsMTAwODQsMTAwODQsMTQsNDMwNTIsNDMwNTIsNSw0MzcxMyw0MzcxMyw1LDQ0Mjg1LDQ0MzExLDEyLDQ0NzMzLDQ0NzU5LDEyLDQ1MTgxLDQ1MjA3LDEyLDQ1NjI5LDQ1NjU1LDEyLDQ2MDc3LDQ2MTAzLDEyLDQ2NTI1LDQ2NTUxLDEyLDQ2OTczLDQ2OTk5LDEyLDQ3NDIxLDQ3NDQ3LDEyLDQ3ODY5LDQ3ODk1LDEyLDQ4MzE3LDQ4MzQzLDEyLDQ4NzY1LDQ4NzkxLDEyLDQ5MjEzLDQ5MjM5LDEyLDQ5NjYxLDQ5Njg3LDEyLDUwMTA5LDUwMTM1LDEyLDUwNTU3LDUwNTgzLDEyLDUxMDA1LDUxMDMxLDEyLDUxNDUzLDUxNDc5LDEyLDUxOTAxLDUxOTI3LDEyLDUyMzQ5LDUyMzc1LDEyLDUyNzk3LDUyODIzLDEyLDUzMjQ1LDUzMjcxLDEyLDUzNjkzLDUzNzE5LDEyLDU0MTQxLDU0MTY3LDEyLDU0NTg5LDU0NjE1LDEyLDU1MDM3LDU1MDYzLDEyLDY5NTA2LDY5NTA5LDUsNzAxOTEsNzAxOTMsNSw3MDg0MSw3MDg0MSw3LDcxNDYzLDcxNDY3LDUsNzIzMzAsNzIzNDIsNSw5NDAzMSw5NDAzMSw1LDEyMzYyOCwxMjM2MzEsNSwxMjc3NjMsMTI3NzY1LDE0LDEyNzk0MSwxMjc5NDEsMTQsMTI4MDQzLDEyODA2MiwxNCwxMjgzMDIsMTI4MzE3LDE0LDEyODQ2NSwxMjg0NjcsMTQsMTI4NTM5LDEyODUzOSwxNCwxMjg2NDAsMTI4NjQwLDE0LDEyODY2MiwxMjg2NjIsMTQsMTI4NzAzLDEyODcwMywxNCwxMjg3NDUsMTI4NzQ1LDE0LDEyOTAwNCwxMjkwMDcsMTQsMTI5MzI5LDEyOTMzMCwxNCwxMjk0MDIsMTI5NDAyLDE0LDEyOTQ4MywxMjk0ODMsMTQsMTI5Njg2LDEyOTcwNCwxNCwxMzAwNDgsMTMxMDY5LDE0LDE3MywxNzMsNCwxNzU3LDE3NTcsMSwyMjAwLDIyMDcsNSwyNDM0LDI0MzUsNywyNjMxLDI2MzIsNSwyODE3LDI4MTcsNSwzMDA4LDMwMDgsNSwzMjAxLDMyMDEsNSwzMzg3LDMzODgsNSwzNTQyLDM1NDIsNSwzOTAyLDM5MDMsNyw0MTkwLDQxOTIsNSw2MDAyLDYwMDMsNSw2NDM5LDY0NDAsNSw2NzY1LDY3NzAsNyw3MDE5LDcwMjcsNSw3MTU0LDcxNTUsNyw4MjA1LDgyMDUsMTMsODUwNSw4NTA1LDE0LDk2NTQsOTY1NCwxNCw5NzU3LDk3NTcsMTQsOTc5Miw5NzkyLDE0LDk4NTIsOTg1MywxNCw5ODkwLDk4OTQsMTQsOTkzNyw5OTM3LDE0LDk5ODEsOTk4MSwxNCwxMDAzNSwxMDAzNiwxNCwxMTAzNSwxMTAzNiwxNCw0MjY1NCw0MjY1NSw1LDQzMzQ2LDQzMzQ3LDcsNDM1ODcsNDM1ODcsNSw0NDAwNiw0NDAwNyw3LDQ0MTczLDQ0MTk5LDEyLDQ0Mzk3LDQ0NDIzLDEyLDQ0NjIxLDQ0NjQ3LDEyLDQ0ODQ1LDQ0ODcxLDEyLDQ1MDY5LDQ1MDk1LDEyLDQ1MjkzLDQ1MzE5LDEyLDQ1NTE3LDQ1NTQzLDEyLDQ1NzQxLDQ1NzY3LDEyLDQ1OTY1LDQ1OTkxLDEyLDQ2MTg5LDQ2MjE1LDEyLDQ2NDEzLDQ2NDM5LDEyLDQ2NjM3LDQ2NjYzLDEyLDQ2ODYxLDQ2ODg3LDEyLDQ3MDg1LDQ3MTExLDEyLDQ3MzA5LDQ3MzM1LDEyLDQ3NTMzLDQ3NTU5LDEyLDQ3NzU3LDQ3NzgzLDEyLDQ3OTgxLDQ4MDA3LDEyLDQ4MjA1LDQ4MjMxLDEyLDQ4NDI5LDQ4NDU1LDEyLDQ4NjUzLDQ4Njc5LDEyLDQ4ODc3LDQ4OTAzLDEyLDQ5MTAxLDQ5MTI3LDEyLDQ5MzI1LDQ5MzUxLDEyLDQ5NTQ5LDQ5NTc1LDEyLDQ5NzczLDQ5Nzk5LDEyLDQ5OTk3LDUwMDIzLDEyLDUwMjIxLDUwMjQ3LDEyLDUwNDQ1LDUwNDcxLDEyLDUwNjY5LDUwNjk1LDEyLDUwODkzLDUwOTE5LDEyLDUxMTE3LDUxMTQzLDEyLDUxMzQxLDUxMzY3LDEyLDUxNTY1LDUxNTkxLDEyLDUxNzg5LDUxODE1LDEyLDUyMDEzLDUyMDM5LDEyLDUyMjM3LDUyMjYzLDEyLDUyNDYxLDUyNDg3LDEyLDUyNjg1LDUyNzExLDEyLDUyOTA5LDUyOTM1LDEyLDUzMTMzLDUzMTU5LDEyLDUzMzU3LDUzMzgzLDEyLDUzNTgxLDUzNjA3LDEyLDUzODA1LDUzODMxLDEyLDU0MDI5LDU0MDU1LDEyLDU0MjUzLDU0Mjc5LDEyLDU0NDc3LDU0NTAzLDEyLDU0NzAxLDU0NzI3LDEyLDU0OTI1LDU0OTUxLDEyLDU1MTQ5LDU1MTc1LDEyLDY4MTAxLDY4MTAyLDUsNjk3NjIsNjk3NjIsNyw3MDA2Nyw3MDA2OSw3LDcwMzcxLDcwMzc4LDUsNzA3MjAsNzA3MjEsNyw3MTA4Nyw3MTA4Nyw1LDcxMzQxLDcxMzQxLDUsNzE5OTUsNzE5OTYsNSw3MjI0OSw3MjI0OSw3LDcyODUwLDcyODcxLDUsNzMxMDksNzMxMDksNSwxMTg1NzYsMTE4NTk4LDUsMTIxNTA1LDEyMTUxOSw1LDEyNzI0NSwxMjcyNDcsMTQsMTI3NTY4LDEyNzU2OSwxNCwxMjc3NzcsMTI3Nzc3LDE0LDEyNzg3MiwxMjc4OTEsMTQsMTI3OTU2LDEyNzk2NywxNCwxMjgwMTUsMTI4MDE2LDE0LDEyODExMCwxMjgxNzIsMTQsMTI4MjU5LDEyODI1OSwxNCwxMjgzNjcsMTI4MzY4LDE0LDEyODQyNCwxMjg0MjQsMTQsMTI4NDg4LDEyODQ4OCwxNCwxMjg1MzAsMTI4NTMyLDE0LDEyODU1MCwxMjg1NTEsMTQsMTI4NTY2LDEyODU2NiwxNCwxMjg2NDcsMTI4NjQ3LDE0LDEyODY1NiwxMjg2NTYsMTQsMTI4NjY3LDEyODY3MywxNCwxMjg2OTEsMTI4NjkzLDE0LDEyODcxNSwxMjg3MTUsMTQsMTI4NzI4LDEyODczMiwxNCwxMjg3NTIsMTI4NzUyLDE0LDEyODc2NSwxMjg3NjcsMTQsMTI5MDk2LDEyOTEwMywxNCwxMjkzMTEsMTI5MzExLDE0LDEyOTM0NCwxMjkzNDksMTQsMTI5Mzk0LDEyOTM5NCwxNCwxMjk0MTMsMTI5NDI1LDE0LDEyOTQ2NiwxMjk0NzEsMTQsMTI5NTExLDEyOTUzNSwxNCwxMjk2NjQsMTI5NjY2LDE0LDEyOTcxOSwxMjk3MjIsMTQsMTI5NzYwLDEyOTc2NywxNCw5MTc1MzYsOTE3NjMxLDUsMTMsMTMsMiwxMTYwLDExNjEsNSwxNTY0LDE1NjQsNCwxODA3LDE4MDcsMSwyMDg1LDIwODcsNSwyMzA3LDIzMDcsNywyMzgyLDIzODMsNywyNDk3LDI1MDAsNSwyNTYzLDI1NjMsNywyNjc3LDI2NzcsNSwyNzYzLDI3NjQsNywyODc5LDI4NzksNSwyOTE0LDI5MTUsNSwzMDIxLDMwMjEsNSwzMTQyLDMxNDQsNSwzMjYzLDMyNjMsNSwzMjg1LDMyODYsNSwzMzk4LDM0MDAsNywzNTMwLDM1MzAsNSwzNjMzLDM2MzMsNSwzODY0LDM4NjUsNSwzOTc0LDM5NzUsNSw0MTU1LDQxNTYsNyw0MjI5LDQyMzAsNSw1OTA5LDU5MDksNyw2MDc4LDYwODUsNyw2Mjc3LDYyNzgsNSw2NDUxLDY0NTYsNyw2NzQ0LDY3NTAsNSw2ODQ2LDY4NDYsNSw2OTcyLDY5NzIsNSw3MDc0LDcwNzcsNSw3MTQ2LDcxNDgsNyw3MjIyLDcyMjMsNSw3NDE2LDc0MTcsNSw4MjM0LDgyMzgsNCw4NDE3LDg0MTcsNSw5MDAwLDkwMDAsMTQsOTIwMyw5MjAzLDE0LDk3MzAsOTczMSwxNCw5NzQ4LDk3NDksMTQsOTc2Miw5NzYzLDE0LDk3NzYsOTc4MywxNCw5ODAwLDk4MTEsMTQsOTgzMSw5ODMxLDE0LDk4NzIsOTg3MywxNCw5ODgyLDk4ODIsMTQsOTkwMCw5OTAzLDE0LDk5MjksOTkzMywxNCw5OTQxLDk5NjAsMTQsOTk3NCw5OTc0LDE0LDk5ODksOTk4OSwxNCwxMDAwNiwxMDAwNiwxNCwxMDA2MiwxMDA2MiwxNCwxMDE2MCwxMDE2MCwxNCwxMTY0NywxMTY0Nyw1LDEyOTUzLDEyOTUzLDE0LDQzMDE5LDQzMDE5LDUsNDMyMzIsNDMyNDksNSw0MzQ0Myw0MzQ0Myw1LDQzNTY3LDQzNTY4LDcsNDM2OTYsNDM2OTYsNSw0Mzc2NSw0Mzc2NSw3LDQ0MDEzLDQ0MDEzLDUsNDQxMTcsNDQxNDMsMTIsNDQyMjksNDQyNTUsMTIsNDQzNDEsNDQzNjcsMTIsNDQ0NTMsNDQ0NzksMTIsNDQ1NjUsNDQ1OTEsMTIsNDQ2NzcsNDQ3MDMsMTIsNDQ3ODksNDQ4MTUsMTIsNDQ5MDEsNDQ5MjcsMTIsNDUwMTMsNDUwMzksMTIsNDUxMjUsNDUxNTEsMTIsNDUyMzcsNDUyNjMsMTIsNDUzNDksNDUzNzUsMTIsNDU0NjEsNDU0ODcsMTIsNDU1NzMsNDU1OTksMTIsNDU2ODUsNDU3MTEsMTIsNDU3OTcsNDU4MjMsMTIsNDU5MDksNDU5MzUsMTIsNDYwMjEsNDYwNDcsMTIsNDYxMzMsNDYxNTksMTIsNDYyNDUsNDYyNzEsMTIsNDYzNTcsNDYzODMsMTIsNDY0NjksNDY0OTUsMTIsNDY1ODEsNDY2MDcsMTIsNDY2OTMsNDY3MTksMTIsNDY4MDUsNDY4MzEsMTIsNDY5MTcsNDY5NDMsMTIsNDcwMjksNDcwNTUsMTIsNDcxNDEsNDcxNjcsMTIsNDcyNTMsNDcyNzksMTIsNDczNjUsNDczOTEsMTIsNDc0NzcsNDc1MDMsMTIsNDc1ODksNDc2MTUsMTIsNDc3MDEsNDc3MjcsMTIsNDc4MTMsNDc4MzksMTIsNDc5MjUsNDc5NTEsMTIsNDgwMzcsNDgwNjMsMTIsNDgxNDksNDgxNzUsMTIsNDgyNjEsNDgyODcsMTIsNDgzNzMsNDgzOTksMTIsNDg0ODUsNDg1MTEsMTIsNDg1OTcsNDg2MjMsMTIsNDg3MDksNDg3MzUsMTIsNDg4MjEsNDg4NDcsMTIsNDg5MzMsNDg5NTksMTIsNDkwNDUsNDkwNzEsMTIsNDkxNTcsNDkxODMsMTIsNDkyNjksNDkyOTUsMTIsNDkzODEsNDk0MDcsMTIsNDk0OTMsNDk1MTksMTIsNDk2MDUsNDk2MzEsMTIsNDk3MTcsNDk3NDMsMTIsNDk4MjksNDk4NTUsMTIsNDk5NDEsNDk5NjcsMTIsNTAwNTMsNTAwNzksMTIsNTAxNjUsNTAxOTEsMTIsNTAyNzcsNTAzMDMsMTIsNTAzODksNTA0MTUsMTIsNTA1MDEsNTA1MjcsMTIsNTA2MTMsNTA2MzksMTIsNTA3MjUsNTA3NTEsMTIsNTA4MzcsNTA4NjMsMTIsNTA5NDksNTA5NzUsMTIsNTEwNjEsNTEwODcsMTIsNTExNzMsNTExOTksMTIsNTEyODUsNTEzMTEsMTIsNTEzOTcsNTE0MjMsMTIsNTE1MDksNTE1MzUsMTIsNTE2MjEsNTE2NDcsMTIsNTE3MzMsNTE3NTksMTIsNTE4NDUsNTE4NzEsMTIsNTE5NTcsNTE5ODMsMTIsNTIwNjksNTIwOTUsMTIsNTIxODEsNTIyMDcsMTIsNTIyOTMsNTIzMTksMTIsNTI0MDUsNTI0MzEsMTIsNTI1MTcsNTI1NDMsMTIsNTI2MjksNTI2NTUsMTIsNTI3NDEsNTI3NjcsMTIsNTI4NTMsNTI4NzksMTIsNTI5NjUsNTI5OTEsMTIsNTMwNzcsNTMxMDMsMTIsNTMxODksNTMyMTUsMTIsNTMzMDEsNTMzMjcsMTIsNTM0MTMsNTM0MzksMTIsNTM1MjUsNTM1NTEsMTIsNTM2MzcsNTM2NjMsMTIsNTM3NDksNTM3NzUsMTIsNTM4NjEsNTM4ODcsMTIsNTM5NzMsNTM5OTksMTIsNTQwODUsNTQxMTEsMTIsNTQxOTcsNTQyMjMsMTIsNTQzMDksNTQzMzUsMTIsNTQ0MjEsNTQ0NDcsMTIsNTQ1MzMsNTQ1NTksMTIsNTQ2NDUsNTQ2NzEsMTIsNTQ3NTcsNTQ3ODMsMTIsNTQ4NjksNTQ4OTUsMTIsNTQ5ODEsNTUwMDcsMTIsNTUwOTMsNTUxMTksMTIsNTUyNDMsNTUyOTEsMTAsNjYwNDUsNjYwNDUsNSw2ODMyNSw2ODMyNiw1LDY5Njg4LDY5NzAyLDUsNjk4MTcsNjk4MTgsNSw2OTk1Nyw2OTk1OCw3LDcwMDg5LDcwMDkyLDUsNzAxOTgsNzAxOTksNSw3MDQ2Miw3MDQ2Miw1LDcwNTAyLDcwNTA4LDUsNzA3NTAsNzA3NTAsNSw3MDg0Niw3MDg0Niw3LDcxMTAwLDcxMTAxLDUsNzEyMzAsNzEyMzAsNyw3MTM1MSw3MTM1MSw1LDcxNzM3LDcxNzM4LDUsNzIwMDAsNzIwMDAsNyw3MjE2MCw3MjE2MCw1LDcyMjczLDcyMjc4LDUsNzI3NTIsNzI3NTgsNSw3Mjg4Miw3Mjg4Myw1LDczMDMxLDczMDMxLDUsNzM0NjEsNzM0NjIsNyw5NDE5Miw5NDE5Myw3LDExOTE0OSwxMTkxNDksNywxMjE0MDMsMTIxNDUyLDUsMTIyOTE1LDEyMjkxNiw1LDEyNjk4MCwxMjY5ODAsMTQsMTI3MzU4LDEyNzM1OSwxNCwxMjc1MzUsMTI3NTM1LDE0LDEyNzc1OSwxMjc3NTksMTQsMTI3NzcxLDEyNzc3MSwxNCwxMjc3OTIsMTI3NzkzLDE0LDEyNzgyNSwxMjc4NjcsMTQsMTI3ODk3LDEyNzg5OSwxNCwxMjc5NDUsMTI3OTQ1LDE0LDEyNzk4NSwxMjc5ODYsMTQsMTI4MDAwLDEyODAwNywxNCwxMjgwMjEsMTI4MDIxLDE0LDEyODA2NiwxMjgxMDAsMTQsMTI4MTg0LDEyODIzNSwxNCwxMjgyNDksMTI4MjUyLDE0LDEyODI2NiwxMjgyNzYsMTQsMTI4MzM1LDEyODMzNSwxNCwxMjgzNzksMTI4MzkwLDE0LDEyODQwNywxMjg0MTksMTQsMTI4NDQ0LDEyODQ0NCwxNCwxMjg0ODEsMTI4NDgxLDE0LDEyODQ5OSwxMjg0OTksMTQsMTI4NTI2LDEyODUyNiwxNCwxMjg1MzYsMTI4NTM2LDE0LDEyODU0MywxMjg1NDMsMTQsMTI4NTU2LDEyODU1NiwxNCwxMjg1NjQsMTI4NTY0LDE0LDEyODU3NywxMjg1ODAsMTQsMTI4NjQzLDEyODY0NSwxNCwxMjg2NDksMTI4NjQ5LDE0LDEyODY1NCwxMjg2NTQsMTQsMTI4NjYwLDEyODY2MCwxNCwxMjg2NjQsMTI4NjY0LDE0LDEyODY3NSwxMjg2NzUsMTQsMTI4Njg2LDEyODY4OSwxNCwxMjg2OTUsMTI4Njk2LDE0LDEyODcwNSwxMjg3MDksMTQsMTI4NzE3LDEyODcxOSwxNCwxMjg3MjUsMTI4NzI1LDE0LDEyODczNiwxMjg3NDEsMTQsMTI4NzQ3LDEyODc0OCwxNCwxMjg3NTUsMTI4NzU1LDE0LDEyODc2MiwxMjg3NjIsMTQsMTI4OTgxLDEyODk5MSwxNCwxMjkwMDksMTI5MDIzLDE0LDEyOTE2MCwxMjkxNjcsMTQsMTI5Mjk2LDEyOTMwNCwxNCwxMjkzMjAsMTI5MzI3LDE0LDEyOTM0MCwxMjkzNDIsMTQsMTI5MzU2LDEyOTM1NiwxNCwxMjkzODgsMTI5MzkyLDE0LDEyOTM5OSwxMjk0MDAsMTQsMTI5NDA0LDEyOTQwNywxNCwxMjk0MzIsMTI5NDQyLDE0LDEyOTQ1NCwxMjk0NTUsMTQsMTI5NDczLDEyOTQ3NCwxNCwxMjk0ODUsMTI5NDg3LDE0LDEyOTY0OCwxMjk2NTEsMTQsMTI5NjU5LDEyOTY2MCwxNCwxMjk2NzEsMTI5Njc5LDE0LDEyOTcwOSwxMjk3MTEsMTQsMTI5NzI4LDEyOTczMCwxNCwxMjk3NTEsMTI5NzUzLDE0LDEyOTc3NiwxMjk3ODIsMTQsOTE3NTA1LDkxNzUwNSw0LDkxNzc2MCw5MTc5OTksNSwxMCwxMCwzLDEyNywxNTksNCw3NjgsODc5LDUsMTQ3MSwxNDcxLDUsMTUzNiwxNTQxLDEsMTY0OCwxNjQ4LDUsMTc2NywxNzY4LDUsMTg0MCwxODY2LDUsMjA3MCwyMDczLDUsMjEzNywyMTM5LDUsMjI3NCwyMjc0LDEsMjM2MywyMzYzLDcsMjM3NywyMzgwLDcsMjQwMiwyNDAzLDUsMjQ5NCwyNDk0LDUsMjUwNywyNTA4LDcsMjU1OCwyNTU4LDUsMjYyMiwyNjI0LDcsMjY0MSwyNjQxLDUsMjY5MSwyNjkxLDcsMjc1OSwyNzYwLDUsMjc4NiwyNzg3LDUsMjg3NiwyODc2LDUsMjg4MSwyODg0LDUsMjkwMSwyOTAyLDUsMzAwNiwzMDA2LDUsMzAxNCwzMDE2LDcsMzA3MiwzMDcyLDUsMzEzNCwzMTM2LDUsMzE1NywzMTU4LDUsMzI2MCwzMjYwLDUsMzI2NiwzMjY2LDUsMzI3NCwzMjc1LDcsMzMyOCwzMzI5LDUsMzM5MSwzMzkyLDcsMzQwNSwzNDA1LDUsMzQ1NywzNDU3LDUsMzUzNiwzNTM3LDcsMzU1MSwzNTUxLDUsMzYzNiwzNjQyLDUsMzc2NCwzNzcyLDUsMzg5NSwzODk1LDUsMzk2NywzOTY3LDcsMzk5Myw0MDI4LDUsNDE0Niw0MTUxLDUsNDE4Miw0MTgzLDcsNDIyNiw0MjI2LDUsNDI1Myw0MjUzLDUsNDk1Nyw0OTU5LDUsNTk0MCw1OTQwLDcsNjA3MCw2MDcwLDcsNjA4Nyw2MDg4LDcsNjE1OCw2MTU4LDQsNjQzMiw2NDM0LDUsNjQ0OCw2NDQ5LDcsNjY3OSw2NjgwLDUsNjc0Miw2NzQyLDUsNjc1NCw2NzU0LDUsNjc4Myw2NzgzLDUsNjkxMiw2OTE1LDUsNjk2Niw2OTcwLDUsNjk3OCw2OTc4LDUsNzA0Miw3MDQyLDcsNzA4MCw3MDgxLDUsNzE0Myw3MTQzLDcsNzE1MCw3MTUwLDcsNzIxMiw3MjE5LDUsNzM4MCw3MzkyLDUsNzQxMiw3NDEyLDUsODIwMyw4MjAzLDQsODIzMiw4MjMyLDQsODI2NSw4MjY1LDE0LDg0MDAsODQxMiw1LDg0MjEsODQzMiw1LDg2MTcsODYxOCwxNCw5MTY3LDkxNjcsMTQsOTIwMCw5MjAwLDE0LDk0MTAsOTQxMCwxNCw5NzIzLDk3MjYsMTQsOTczMyw5NzMzLDE0LDk3NDUsOTc0NSwxNCw5NzUyLDk3NTIsMTQsOTc2MCw5NzYwLDE0LDk3NjYsOTc2NiwxNCw5Nzc0LDk3NzQsMTQsOTc4Niw5Nzg2LDE0LDk3OTQsOTc5NCwxNCw5ODIzLDk4MjMsMTQsOTgyOCw5ODI4LDE0LDk4MzMsOTg1MCwxNCw5ODU1LDk4NTUsMTQsOTg3NSw5ODc1LDE0LDk4ODAsOTg4MCwxNCw5ODg1LDk4ODcsMTQsOTg5Niw5ODk3LDE0LDk5MDYsOTkxNiwxNCw5OTI2LDk5MjcsMTQsOTkzNSw5OTM1LDE0LDk5MzksOTkzOSwxNCw5OTYyLDk5NjIsMTQsOTk3Miw5OTcyLDE0LDk5NzgsOTk3OCwxNCw5OTg2LDk5ODYsMTQsOTk5Nyw5OTk3LDE0LDEwMDAyLDEwMDAyLDE0LDEwMDE3LDEwMDE3LDE0LDEwMDU1LDEwMDU1LDE0LDEwMDcxLDEwMDcxLDE0LDEwMTMzLDEwMTM1LDE0LDEwNTQ4LDEwNTQ5LDE0LDExMDkzLDExMDkzLDE0LDEyMzMwLDEyMzMzLDUsMTI0NDEsMTI0NDIsNSw0MjYwOCw0MjYxMCw1LDQzMDEwLDQzMDEwLDUsNDMwNDUsNDMwNDYsNSw0MzE4OCw0MzIwMyw3LDQzMzAyLDQzMzA5LDUsNDMzOTIsNDMzOTQsNSw0MzQ0Niw0MzQ0OSw1LDQzNDkzLDQzNDkzLDUsNDM1NzEsNDM1NzIsNyw0MzU5Nyw0MzU5Nyw3LDQzNzAzLDQzNzA0LDUsNDM3NTYsNDM3NTcsNSw0NDAwMyw0NDAwNCw3LDQ0MDA5LDQ0MDEwLDcsNDQwMzMsNDQwNTksMTIsNDQwODksNDQxMTUsMTIsNDQxNDUsNDQxNzEsMTIsNDQyMDEsNDQyMjcsMTIsNDQyNTcsNDQyODMsMTIsNDQzMTMsNDQzMzksMTIsNDQzNjksNDQzOTUsMTIsNDQ0MjUsNDQ0NTEsMTIsNDQ0ODEsNDQ1MDcsMTIsNDQ1MzcsNDQ1NjMsMTIsNDQ1OTMsNDQ2MTksMTIsNDQ2NDksNDQ2NzUsMTIsNDQ3MDUsNDQ3MzEsMTIsNDQ3NjEsNDQ3ODcsMTIsNDQ4MTcsNDQ4NDMsMTIsNDQ4NzMsNDQ4OTksMTIsNDQ5MjksNDQ5NTUsMTIsNDQ5ODUsNDUwMTEsMTIsNDUwNDEsNDUwNjcsMTIsNDUwOTcsNDUxMjMsMTIsNDUxNTMsNDUxNzksMTIsNDUyMDksNDUyMzUsMTIsNDUyNjUsNDUyOTEsMTIsNDUzMjEsNDUzNDcsMTIsNDUzNzcsNDU0MDMsMTIsNDU0MzMsNDU0NTksMTIsNDU0ODksNDU1MTUsMTIsNDU1NDUsNDU1NzEsMTIsNDU2MDEsNDU2MjcsMTIsNDU2NTcsNDU2ODMsMTIsNDU3MTMsNDU3MzksMTIsNDU3NjksNDU3OTUsMTIsNDU4MjUsNDU4NTEsMTIsNDU4ODEsNDU5MDcsMTIsNDU5MzcsNDU5NjMsMTIsNDU5OTMsNDYwMTksMTIsNDYwNDksNDYwNzUsMTIsNDYxMDUsNDYxMzEsMTIsNDYxNjEsNDYxODcsMTIsNDYyMTcsNDYyNDMsMTIsNDYyNzMsNDYyOTksMTIsNDYzMjksNDYzNTUsMTIsNDYzODUsNDY0MTEsMTIsNDY0NDEsNDY0NjcsMTIsNDY0OTcsNDY1MjMsMTIsNDY1NTMsNDY1NzksMTIsNDY2MDksNDY2MzUsMTIsNDY2NjUsNDY2OTEsMTIsNDY3MjEsNDY3NDcsMTIsNDY3NzcsNDY4MDMsMTIsNDY4MzMsNDY4NTksMTIsNDY4ODksNDY5MTUsMTIsNDY5NDUsNDY5NzEsMTIsNDcwMDEsNDcwMjcsMTIsNDcwNTcsNDcwODMsMTIsNDcxMTMsNDcxMzksMTIsNDcxNjksNDcxOTUsMTIsNDcyMjUsNDcyNTEsMTIsNDcyODEsNDczMDcsMTIsNDczMzcsNDczNjMsMTIsNDczOTMsNDc0MTksMTIsNDc0NDksNDc0NzUsMTIsNDc1MDUsNDc1MzEsMTIsNDc1NjEsNDc1ODcsMTIsNDc2MTcsNDc2NDMsMTIsNDc2NzMsNDc2OTksMTIsNDc3MjksNDc3NTUsMTIsNDc3ODUsNDc4MTEsMTIsNDc4NDEsNDc4NjcsMTIsNDc4OTcsNDc5MjMsMTIsNDc5NTMsNDc5NzksMTIsNDgwMDksNDgwMzUsMTIsNDgwNjUsNDgwOTEsMTIsNDgxMjEsNDgxNDcsMTIsNDgxNzcsNDgyMDMsMTIsNDgyMzMsNDgyNTksMTIsNDgyODksNDgzMTUsMTIsNDgzNDUsNDgzNzEsMTIsNDg0MDEsNDg0MjcsMTIsNDg0NTcsNDg0ODMsMTIsNDg1MTMsNDg1MzksMTIsNDg1NjksNDg1OTUsMTIsNDg2MjUsNDg2NTEsMTIsNDg2ODEsNDg3MDcsMTIsNDg3MzcsNDg3NjMsMTIsNDg3OTMsNDg4MTksMTIsNDg4NDksNDg4NzUsMTIsNDg5MDUsNDg5MzEsMTIsNDg5NjEsNDg5ODcsMTIsNDkwMTcsNDkwNDMsMTIsNDkwNzMsNDkwOTksMTIsNDkxMjksNDkxNTUsMTIsNDkxODUsNDkyMTEsMTIsNDkyNDEsNDkyNjcsMTIsNDkyOTcsNDkzMjMsMTIsNDkzNTMsNDkzNzksMTIsNDk0MDksNDk0MzUsMTIsNDk0NjUsNDk0OTEsMTIsNDk1MjEsNDk1NDcsMTIsNDk1NzcsNDk2MDMsMTIsNDk2MzMsNDk2NTksMTIsNDk2ODksNDk3MTUsMTIsNDk3NDUsNDk3NzEsMTIsNDk4MDEsNDk4MjcsMTIsNDk4NTcsNDk4ODMsMTIsNDk5MTMsNDk5MzksMTIsNDk5NjksNDk5OTUsMTIsNTAwMjUsNTAwNTEsMTIsNTAwODEsNTAxMDcsMTIsNTAxMzcsNTAxNjMsMTIsNTAxOTMsNTAyMTksMTIsNTAyNDksNTAyNzUsMTIsNTAzMDUsNTAzMzEsMTIsNTAzNjEsNTAzODcsMTIsNTA0MTcsNTA0NDMsMTIsNTA0NzMsNTA0OTksMTIsNTA1MjksNTA1NTUsMTIsNTA1ODUsNTA2MTEsMTIsNTA2NDEsNTA2NjcsMTIsNTA2OTcsNTA3MjMsMTIsNTA3NTMsNTA3NzksMTIsNTA4MDksNTA4MzUsMTIsNTA4NjUsNTA4OTEsMTIsNTA5MjEsNTA5NDcsMTIsNTA5NzcsNTEwMDMsMTIsNTEwMzMsNTEwNTksMTIsNTEwODksNTExMTUsMTIsNTExNDUsNTExNzEsMTIsNTEyMDEsNTEyMjcsMTIsNTEyNTcsNTEyODMsMTIsNTEzMTMsNTEzMzksMTIsNTEzNjksNTEzOTUsMTIsNTE0MjUsNTE0NTEsMTIsNTE0ODEsNTE1MDcsMTIsNTE1MzcsNTE1NjMsMTIsNTE1OTMsNTE2MTksMTIsNTE2NDksNTE2NzUsMTIsNTE3MDUsNTE3MzEsMTIsNTE3NjEsNTE3ODcsMTIsNTE4MTcsNTE4NDMsMTIsNTE4NzMsNTE4OTksMTIsNTE5MjksNTE5NTUsMTIsNTE5ODUsNTIwMTEsMTIsNTIwNDEsNTIwNjcsMTIsNTIwOTcsNTIxMjMsMTIsNTIxNTMsNTIxNzksMTIsNTIyMDksNTIyMzUsMTIsNTIyNjUsNTIyOTEsMTIsNTIzMjEsNTIzNDcsMTIsNTIzNzcsNTI0MDMsMTIsNTI0MzMsNTI0NTksMTIsNTI0ODksNTI1MTUsMTIsNTI1NDUsNTI1NzEsMTIsNTI2MDEsNTI2MjcsMTIsNTI2NTcsNTI2ODMsMTIsNTI3MTMsNTI3MzksMTIsNTI3NjksNTI3OTUsMTIsNTI4MjUsNTI4NTEsMTIsNTI4ODEsNTI5MDcsMTIsNTI5MzcsNTI5NjMsMTIsNTI5OTMsNTMwMTksMTIsNTMwNDksNTMwNzUsMTIsNTMxMDUsNTMxMzEsMTIsNTMxNjEsNTMxODcsMTIsNTMyMTcsNTMyNDMsMTIsNTMyNzMsNTMyOTksMTIsNTMzMjksNTMzNTUsMTIsNTMzODUsNTM0MTEsMTIsNTM0NDEsNTM0NjcsMTIsNTM0OTcsNTM1MjMsMTIsNTM1NTMsNTM1NzksMTIsNTM2MDksNTM2MzUsMTIsNTM2NjUsNTM2OTEsMTIsNTM3MjEsNTM3NDcsMTIsNTM3NzcsNTM4MDMsMTIsNTM4MzMsNTM4NTksMTIsNTM4ODksNTM5MTUsMTIsNTM5NDUsNTM5NzEsMTIsNTQwMDEsNTQwMjcsMTIsNTQwNTcsNTQwODMsMTIsNTQxMTMsNTQxMzksMTIsNTQxNjksNTQxOTUsMTIsNTQyMjUsNTQyNTEsMTIsNTQyODEsNTQzMDcsMTIsNTQzMzcsNTQzNjMsMTIsNTQzOTMsNTQ0MTksMTIsNTQ0NDksNTQ0NzUsMTIsNTQ1MDUsNTQ1MzEsMTIsNTQ1NjEsNTQ1ODcsMTIsNTQ2MTcsNTQ2NDMsMTIsNTQ2NzMsNTQ2OTksMTIsNTQ3MjksNTQ3NTUsMTIsNTQ3ODUsNTQ4MTEsMTIsNTQ4NDEsNTQ4NjcsMTIsNTQ4OTcsNTQ5MjMsMTIsNTQ5NTMsNTQ5NzksMTIsNTUwMDksNTUwMzUsMTIsNTUwNjUsNTUwOTEsMTIsNTUxMjEsNTUxNDcsMTIsNTUxNzcsNTUyMDMsMTIsNjUwMjQsNjUwMzksNSw2NTUyMCw2NTUyOCw0LDY2NDIyLDY2NDI2LDUsNjgxNTIsNjgxNTQsNSw2OTI5MSw2OTI5Miw1LDY5NjMzLDY5NjMzLDUsNjk3NDcsNjk3NDgsNSw2OTgxMSw2OTgxNCw1LDY5ODI2LDY5ODI2LDUsNjk5MzIsNjk5MzIsNyw3MDAxNiw3MDAxNyw1LDcwMDc5LDcwMDgwLDcsNzAwOTUsNzAwOTUsNSw3MDE5Niw3MDE5Niw1LDcwMzY3LDcwMzY3LDUsNzA0MDIsNzA0MDMsNyw3MDQ2NCw3MDQ2NCw1LDcwNDg3LDcwNDg3LDUsNzA3MDksNzA3MTEsNyw3MDcyNSw3MDcyNSw3LDcwODMzLDcwODM0LDcsNzA4NDMsNzA4NDQsNyw3MDg0OSw3MDg0OSw3LDcxMDkwLDcxMDkzLDUsNzExMDMsNzExMDQsNSw3MTIyNyw3MTIyOCw3LDcxMzM5LDcxMzM5LDUsNzEzNDQsNzEzNDksNSw3MTQ1OCw3MTQ2MSw1LDcxNzI3LDcxNzM1LDUsNzE5ODUsNzE5ODksNyw3MTk5OCw3MTk5OCw1LDcyMDAyLDcyMDAyLDcsNzIxNTQsNzIxNTUsNSw3MjE5Myw3MjIwMiw1LDcyMjUxLDcyMjU0LDUsNzIyODEsNzIyODMsNSw3MjM0NCw3MjM0NSw1LDcyNzY2LDcyNzY2LDcsNzI4NzQsNzI4ODAsNSw3Mjg4NSw3Mjg4Niw1LDczMDIzLDczMDI5LDUsNzMxMDQsNzMxMDUsNSw3MzExMSw3MzExMSw1LDkyOTEyLDkyOTE2LDUsOTQwOTUsOTQwOTgsNSwxMTM4MjQsMTEzODI3LDQsMTE5MTQyLDExOTE0Miw3LDExOTE1NSwxMTkxNjIsNCwxMTkzNjIsMTE5MzY0LDUsMTIxNDc2LDEyMTQ3Niw1LDEyMjg4OCwxMjI5MDQsNSwxMjMxODQsMTIzMTkwLDUsMTI1MjUyLDEyNTI1OCw1LDEyNzE4MywxMjcxODMsMTQsMTI3MzQwLDEyNzM0MywxNCwxMjczNzcsMTI3Mzg2LDE0LDEyNzQ5MSwxMjc1MDMsMTQsMTI3NTQ4LDEyNzU1MSwxNCwxMjc3NDQsMTI3NzU2LDE0LDEyNzc2MSwxMjc3NjEsMTQsMTI3NzY5LDEyNzc2OSwxNCwxMjc3NzMsMTI3Nzc0LDE0LDEyNzc4MCwxMjc3ODgsMTQsMTI3Nzk2LDEyNzc5NywxNCwxMjc4MjAsMTI3ODIzLDE0LDEyNzg2OSwxMjc4NjksMTQsMTI3ODk0LDEyNzg5NSwxNCwxMjc5MDIsMTI3OTAzLDE0LDEyNzk0MywxMjc5NDMsMTQsMTI3OTQ3LDEyNzk1MCwxNCwxMjc5NzIsMTI3OTcyLDE0LDEyNzk4OCwxMjc5ODgsMTQsMTI3OTkyLDEyNzk5NCwxNCwxMjgwMDksMTI4MDExLDE0LDEyODAxOSwxMjgwMTksMTQsMTI4MDIzLDEyODA0MSwxNCwxMjgwNjQsMTI4MDY0LDE0LDEyODEwMiwxMjgxMDcsMTQsMTI4MTc0LDEyODE4MSwxNCwxMjgyMzgsMTI4MjM4LDE0LDEyODI0NiwxMjgyNDcsMTQsMTI4MjU0LDEyODI1NCwxNCwxMjgyNjQsMTI4MjY0LDE0LDEyODI3OCwxMjgyOTksMTQsMTI4MzI5LDEyODMzMCwxNCwxMjgzNDgsMTI4MzU5LDE0LDEyODM3MSwxMjgzNzcsMTQsMTI4MzkyLDEyODM5MywxNCwxMjg0MDEsMTI4NDA0LDE0LDEyODQyMSwxMjg0MjEsMTQsMTI4NDMzLDEyODQzNCwxNCwxMjg0NTAsMTI4NDUyLDE0LDEyODQ3NiwxMjg0NzgsMTQsMTI4NDgzLDEyODQ4MywxNCwxMjg0OTUsMTI4NDk1LDE0LDEyODUwNiwxMjg1MDYsMTQsMTI4NTE5LDEyODUyMCwxNCwxMjg1MjgsMTI4NTI4LDE0LDEyODUzNCwxMjg1MzQsMTQsMTI4NTM4LDEyODUzOCwxNCwxMjg1NDAsMTI4NTQyLDE0LDEyODU0NCwxMjg1NDksMTQsMTI4NTUyLDEyODU1NSwxNCwxMjg1NTcsMTI4NTU3LDE0LDEyODU2MCwxMjg1NjMsMTQsMTI4NTY1LDEyODU2NSwxNCwxMjg1NjcsMTI4NTc2LDE0LDEyODU4MSwxMjg1OTEsMTQsMTI4NjQxLDEyODY0MiwxNCwxMjg2NDYsMTI4NjQ2LDE0LDEyODY0OCwxMjg2NDgsMTQsMTI4NjUwLDEyODY1MSwxNCwxMjg2NTMsMTI4NjUzLDE0LDEyODY1NSwxMjg2NTUsMTQsMTI4NjU3LDEyODY1OSwxNCwxMjg2NjEsMTI4NjYxLDE0LDEyODY2MywxMjg2NjMsMTQsMTI4NjY1LDEyODY2NiwxNCwxMjg2NzQsMTI4Njc0LDE0LDEyODY3NiwxMjg2NzcsMTQsMTI4Njc5LDEyODY4NSwxNCwxMjg2OTAsMTI4NjkwLDE0LDEyODY5NCwxMjg2OTQsMTQsMTI4Njk3LDEyODcwMiwxNCwxMjg3MDQsMTI4NzA0LDE0LDEyODcxMCwxMjg3MTQsMTQsMTI4NzE2LDEyODcxNiwxNCwxMjg3MjAsMTI4NzIwLDE0LDEyODcyMywxMjg3MjQsMTQsMTI4NzI2LDEyODcyNywxNCwxMjg3MzMsMTI4NzM1LDE0LDEyODc0MiwxMjg3NDQsMTQsMTI4NzQ2LDEyODc0NiwxNCwxMjg3NDksMTI4NzUxLDE0LDEyODc1MywxMjg3NTQsMTQsMTI4NzU2LDEyODc1OCwxNCwxMjg3NjEsMTI4NzYxLDE0LDEyODc2MywxMjg3NjQsMTQsMTI4ODg0LDEyODg5NSwxNCwxMjg5OTIsMTI5MDAzLDE0LDEyOTAwOCwxMjkwMDgsMTQsMTI5MDM2LDEyOTAzOSwxNCwxMjkxMTQsMTI5MTE5LDE0LDEyOTE5OCwxMjkyNzksMTQsMTI5MjkzLDEyOTI5NSwxNCwxMjkzMDUsMTI5MzEwLDE0LDEyOTMxMiwxMjkzMTksMTQsMTI5MzI4LDEyOTMyOCwxNCwxMjkzMzEsMTI5MzM4LDE0LDEyOTM0MywxMjkzNDMsMTQsMTI5MzUxLDEyOTM1NSwxNCwxMjkzNTcsMTI5MzU5LDE0LDEyOTM3NSwxMjkzODcsMTQsMTI5MzkzLDEyOTM5MywxNCwxMjkzOTUsMTI5Mzk4LDE0LDEyOTQwMSwxMjk0MDEsMTQsMTI5NDAzLDEyOTQwMywxNCwxMjk0MDgsMTI5NDEyLDE0LDEyOTQyNiwxMjk0MzEsMTQsMTI5NDQzLDEyOTQ0NCwxNCwxMjk0NTEsMTI5NDUzLDE0LDEyOTQ1NiwxMjk0NjUsMTQsMTI5NDcyLDEyOTQ3MiwxNCwxMjk0NzUsMTI5NDgyLDE0LDEyOTQ4NCwxMjk0ODQsMTQsMTI5NDg4LDEyOTUxMCwxNCwxMjk1MzYsMTI5NjQ3LDE0LDEyOTY1MiwxMjk2NTIsMTQsMTI5NjU2LDEyOTY1OCwxNCwxMjk2NjEsMTI5NjYzLDE0LDEyOTY2NywxMjk2NzAsMTQsMTI5NjgwLDEyOTY4NSwxNCwxMjk3MDUsMTI5NzA4LDE0LDEyOTcxMiwxMjk3MTgsMTQsMTI5NzIzLDEyOTcyNywxNCwxMjk3MzEsMTI5NzMzLDE0LDEyOTc0NCwxMjk3NTAsMTQsMTI5NzU0LDEyOTc1OSwxNCwxMjk3NjgsMTI5Nzc1LDE0LDEyOTc4MywxMjk3OTEsMTQsOTE3NTA0LDkxNzUwNCw0LDkxNzUwNiw5MTc1MzUsNCw5MTc2MzIsOTE3NzU5LDQsOTE4MDAwLDkyMTU5OSw0LDAsOSw0LDExLDEyLDQsMTQsMzEsNCwxNjksMTY5LDE0LDE3NCwxNzQsMTQsMTE1NSwxMTU5LDUsMTQyNSwxNDY5LDUsMTQ3MywxNDc0LDUsMTQ3OSwxNDc5LDUsMTU1MiwxNTYyLDUsMTYxMSwxNjMxLDUsMTc1MCwxNzU2LDUsMTc1OSwxNzY0LDUsMTc3MCwxNzczLDUsMTgwOSwxODA5LDUsMTk1OCwxOTY4LDUsMjA0NSwyMDQ1LDUsMjA3NSwyMDgzLDUsMjA4OSwyMDkzLDUsMjE5MiwyMTkzLDEsMjI1MCwyMjczLDUsMjI3NSwyMzA2LDUsMjM2MiwyMzYyLDUsMjM2NCwyMzY0LDUsMjM2OSwyMzc2LDUsMjM4MSwyMzgxLDUsMjM4NSwyMzkxLDUsMjQzMywyNDMzLDUsMjQ5MiwyNDkyLDUsMjQ5NSwyNDk2LDcsMjUwMywyNTA0LDcsMjUwOSwyNTA5LDUsMjUzMCwyNTMxLDUsMjU2MSwyNTYyLDUsMjYyMCwyNjIwLDUsMjYyNSwyNjI2LDUsMjYzNSwyNjM3LDUsMjY3MiwyNjczLDUsMjY4OSwyNjkwLDUsMjc0OCwyNzQ4LDUsMjc1MywyNzU3LDUsMjc2MSwyNzYxLDcsMjc2NSwyNzY1LDUsMjgxMCwyODE1LDUsMjgxOCwyODE5LDcsMjg3OCwyODc4LDUsMjg4MCwyODgwLDcsMjg4NywyODg4LDcsMjg5MywyODkzLDUsMjkwMywyOTAzLDUsMjk0NiwyOTQ2LDUsMzAwNywzMDA3LDcsMzAwOSwzMDEwLDcsMzAxOCwzMDIwLDcsMzAzMSwzMDMxLDUsMzA3MywzMDc1LDcsMzEzMiwzMTMyLDUsMzEzNywzMTQwLDcsMzE0NiwzMTQ5LDUsMzE3MCwzMTcxLDUsMzIwMiwzMjAzLDcsMzI2MiwzMjYyLDcsMzI2NCwzMjY1LDcsMzI2NywzMjY4LDcsMzI3MSwzMjcyLDcsMzI3NiwzMjc3LDUsMzI5OCwzMjk5LDUsMzMzMCwzMzMxLDcsMzM5MCwzMzkwLDUsMzM5MywzMzk2LDUsMzQwMiwzNDA0LDcsMzQwNiwzNDA2LDEsMzQyNiwzNDI3LDUsMzQ1OCwzNDU5LDcsMzUzNSwzNTM1LDUsMzUzOCwzNTQwLDUsMzU0NCwzNTUwLDcsMzU3MCwzNTcxLDcsMzYzNSwzNjM1LDcsMzY1NSwzNjYyLDUsMzc2MywzNzYzLDcsMzc4NCwzNzg5LDUsMzg5MywzODkzLDUsMzg5NywzODk3LDUsMzk1MywzOTY2LDUsMzk2OCwzOTcyLDUsMzk4MSwzOTkxLDUsNDAzOCw0MDM4LDUsNDE0NSw0MTQ1LDcsNDE1Myw0MTU0LDUsNDE1Nyw0MTU4LDUsNDE4NCw0MTg1LDUsNDIwOSw0MjEyLDUsNDIyOCw0MjI4LDcsNDIzNyw0MjM3LDUsNDM1Miw0NDQ3LDgsNDUyMCw0NjA3LDEwLDU5MDYsNTkwOCw1LDU5MzgsNTkzOSw1LDU5NzAsNTk3MSw1LDYwNjgsNjA2OSw1LDYwNzEsNjA3Nyw1LDYwODYsNjA4Niw1LDYwODksNjA5OSw1LDYxNTUsNjE1Nyw1LDYxNTksNjE1OSw1LDYzMTMsNjMxMyw1LDY0MzUsNjQzOCw3LDY0NDEsNjQ0Myw3LDY0NTAsNjQ1MCw1LDY0NTcsNjQ1OSw1LDY2ODEsNjY4Miw3LDY3NDEsNjc0MSw3LDY3NDMsNjc0Myw3LDY3NTIsNjc1Miw1LDY3NTcsNjc2NCw1LDY3NzEsNjc4MCw1LDY4MzIsNjg0NSw1LDY4NDcsNjg2Miw1LDY5MTYsNjkxNiw3LDY5NjUsNjk2NSw1LDY5NzEsNjk3MSw3LDY5NzMsNjk3Nyw3LDY5NzksNjk4MCw3LDcwNDAsNzA0MSw1LDcwNzMsNzA3Myw3LDcwNzgsNzA3OSw3LDcwODIsNzA4Miw3LDcxNDIsNzE0Miw1LDcxNDQsNzE0NSw1LDcxNDksNzE0OSw1LDcxNTEsNzE1Myw1LDcyMDQsNzIxMSw3LDcyMjAsNzIyMSw3LDczNzYsNzM3OCw1LDczOTMsNzM5Myw3LDc0MDUsNzQwNSw1LDc0MTUsNzQxNSw3LDc2MTYsNzY3OSw1LDgyMDQsODIwNCw1LDgyMDYsODIwNyw0LDgyMzMsODIzMyw0LDgyNTIsODI1MiwxNCw4Mjg4LDgyOTIsNCw4Mjk0LDgzMDMsNCw4NDEzLDg0MTYsNSw4NDE4LDg0MjAsNSw4NDgyLDg0ODIsMTQsODU5Niw4NjAxLDE0LDg5ODYsODk4NywxNCw5MDk2LDkwOTYsMTQsOTE5Myw5MTk2LDE0LDkxOTksOTE5OSwxNCw5MjAxLDkyMDIsMTQsOTIwOCw5MjEwLDE0LDk2NDIsOTY0MywxNCw5NjY0LDk2NjQsMTQsOTcyOCw5NzI5LDE0LDk3MzIsOTczMiwxNCw5NzM1LDk3NDEsMTQsOTc0Myw5NzQ0LDE0LDk3NDYsOTc0NiwxNCw5NzUwLDk3NTEsMTQsOTc1Myw5NzU2LDE0LDk3NTgsOTc1OSwxNCw5NzYxLDk3NjEsMTQsOTc2NCw5NzY1LDE0LDk3NjcsOTc2OSwxNCw5NzcxLDk3NzMsMTQsOTc3NSw5Nzc1LDE0LDk3ODQsOTc4NSwxNCw5Nzg3LDk3OTEsMTQsOTc5Myw5NzkzLDE0LDk3OTUsOTc5OSwxNCw5ODEyLDk4MjIsMTQsOTgyNCw5ODI0LDE0LDk4MjcsOTgyNywxNCw5ODI5LDk4MzAsMTQsOTgzMiw5ODMyLDE0LDk4NTEsOTg1MSwxNCw5ODU0LDk4NTQsMTQsOTg1Niw5ODYxLDE0LDk4NzQsOTg3NCwxNCw5ODc2LDk4NzYsMTQsOTg3OCw5ODc5LDE0LDk4ODEsOTg4MSwxNCw5ODgzLDk4ODQsMTQsOTg4OCw5ODg5LDE0LDk4OTUsOTg5NSwxNCw5ODk4LDk4OTksMTQsOTkwNCw5OTA1LDE0LDk5MTcsOTkxOCwxNCw5OTI0LDk5MjUsMTQsOTkyOCw5OTI4LDE0LDk5MzQsOTkzNCwxNCw5OTM2LDk5MzYsMTQsOTkzOCw5OTM4LDE0LDk5NDAsOTk0MCwxNCw5OTYxLDk5NjEsMTQsOTk2Myw5OTY3LDE0LDk5NzAsOTk3MSwxNCw5OTczLDk5NzMsMTQsOTk3NSw5OTc3LDE0LDk5NzksOTk4MCwxNCw5OTgyLDk5ODUsMTQsOTk4Nyw5OTg4LDE0LDk5OTIsOTk5NiwxNCw5OTk4LDk5OTgsMTQsMTAwMDAsMTAwMDEsMTQsMTAwMDQsMTAwMDQsMTQsMTAwMTMsMTAwMTMsMTQsMTAwMjQsMTAwMjQsMTQsMTAwNTIsMTAwNTIsMTQsMTAwNjAsMTAwNjAsMTQsMTAwNjcsMTAwNjksMTQsMTAwODMsMTAwODMsMTQsMTAwODUsMTAwODcsMTQsMTAxNDUsMTAxNDUsMTQsMTAxNzUsMTAxNzUsMTQsMTEwMTMsMTEwMTUsMTQsMTEwODgsMTEwODgsMTQsMTE1MDMsMTE1MDUsNSwxMTc0NCwxMTc3NSw1LDEyMzM0LDEyMzM1LDUsMTIzNDksMTIzNDksMTQsMTI5NTEsMTI5NTEsMTQsNDI2MDcsNDI2MDcsNSw0MjYxMiw0MjYyMSw1LDQyNzM2LDQyNzM3LDUsNDMwMTQsNDMwMTQsNSw0MzA0Myw0MzA0NCw3LDQzMDQ3LDQzMDQ3LDcsNDMxMzYsNDMxMzcsNyw0MzIwNCw0MzIwNSw1LDQzMjYzLDQzMjYzLDUsNDMzMzUsNDMzNDUsNSw0MzM2MCw0MzM4OCw4LDQzMzk1LDQzMzk1LDcsNDM0NDQsNDM0NDUsNyw0MzQ1MCw0MzQ1MSw3LDQzNDU0LDQzNDU2LDcsNDM1NjEsNDM1NjYsNSw0MzU2OSw0MzU3MCw1LDQzNTczLDQzNTc0LDUsNDM1OTYsNDM1OTYsNSw0MzY0NCw0MzY0NCw1LDQzNjk4LDQzNzAwLDUsNDM3MTAsNDM3MTEsNSw0Mzc1NSw0Mzc1NSw3LDQzNzU4LDQzNzU5LDcsNDM3NjYsNDM3NjYsNSw0NDAwNSw0NDAwNSw1LDQ0MDA4LDQ0MDA4LDUsNDQwMTIsNDQwMTIsNyw0NDAzMiw0NDAzMiwxMSw0NDA2MCw0NDA2MCwxMSw0NDA4OCw0NDA4OCwxMSw0NDExNiw0NDExNiwxMSw0NDE0NCw0NDE0NCwxMSw0NDE3Miw0NDE3MiwxMSw0NDIwMCw0NDIwMCwxMSw0NDIyOCw0NDIyOCwxMSw0NDI1Niw0NDI1NiwxMSw0NDI4NCw0NDI4NCwxMSw0NDMxMiw0NDMxMiwxMSw0NDM0MCw0NDM0MCwxMSw0NDM2OCw0NDM2OCwxMSw0NDM5Niw0NDM5NiwxMSw0NDQyNCw0NDQyNCwxMSw0NDQ1Miw0NDQ1MiwxMSw0NDQ4MCw0NDQ4MCwxMSw0NDUwOCw0NDUwOCwxMSw0NDUzNiw0NDUzNiwxMSw0NDU2NCw0NDU2NCwxMSw0NDU5Miw0NDU5MiwxMSw0NDYyMCw0NDYyMCwxMSw0NDY0OCw0NDY0OCwxMSw0NDY3Niw0NDY3NiwxMSw0NDcwNCw0NDcwNCwxMSw0NDczMiw0NDczMiwxMSw0NDc2MCw0NDc2MCwxMSw0NDc4OCw0NDc4OCwxMSw0NDgxNiw0NDgxNiwxMSw0NDg0NCw0NDg0NCwxMSw0NDg3Miw0NDg3MiwxMSw0NDkwMCw0NDkwMCwxMSw0NDkyOCw0NDkyOCwxMSw0NDk1Niw0NDk1NiwxMSw0NDk4NCw0NDk4NCwxMSw0NTAxMiw0NTAxMiwxMSw0NTA0MCw0NTA0MCwxMSw0NTA2OCw0NTA2OCwxMSw0NTA5Niw0NTA5NiwxMSw0NTEyNCw0NTEyNCwxMSw0NTE1Miw0NTE1MiwxMSw0NTE4MCw0NTE4MCwxMSw0NTIwOCw0NTIwOCwxMSw0NTIzNiw0NTIzNiwxMSw0NTI2NCw0NTI2NCwxMSw0NTI5Miw0NTI5MiwxMSw0NTMyMCw0NTMyMCwxMSw0NTM0OCw0NTM0OCwxMSw0NTM3Niw0NTM3NiwxMSw0NTQwNCw0NTQwNCwxMSw0NTQzMiw0NTQzMiwxMSw0NTQ2MCw0NTQ2MCwxMSw0NTQ4OCw0NTQ4OCwxMSw0NTUxNiw0NTUxNiwxMSw0NTU0NCw0NTU0NCwxMSw0NTU3Miw0NTU3MiwxMSw0NTYwMCw0NTYwMCwxMSw0NTYyOCw0NTYyOCwxMSw0NTY1Niw0NTY1NiwxMSw0NTY4NCw0NTY4NCwxMSw0NTcxMiw0NTcxMiwxMSw0NTc0MCw0NTc0MCwxMSw0NTc2OCw0NTc2OCwxMSw0NTc5Niw0NTc5NiwxMSw0NTgyNCw0NTgyNCwxMSw0NTg1Miw0NTg1MiwxMSw0NTg4MCw0NTg4MCwxMSw0NTkwOCw0NTkwOCwxMSw0NTkzNiw0NTkzNiwxMSw0NTk2NCw0NTk2NCwxMSw0NTk5Miw0NTk5MiwxMSw0NjAyMCw0NjAyMCwxMSw0NjA0OCw0NjA0OCwxMSw0NjA3Niw0NjA3NiwxMSw0NjEwNCw0NjEwNCwxMSw0NjEzMiw0NjEzMiwxMSw0NjE2MCw0NjE2MCwxMSw0NjE4OCw0NjE4OCwxMSw0NjIxNiw0NjIxNiwxMSw0NjI0NCw0NjI0NCwxMSw0NjI3Miw0NjI3MiwxMSw0NjMwMCw0NjMwMCwxMSw0NjMyOCw0NjMyOCwxMSw0NjM1Niw0NjM1NiwxMSw0NjM4NCw0NjM4NCwxMSw0NjQxMiw0NjQxMiwxMSw0NjQ0MCw0NjQ0MCwxMSw0NjQ2OCw0NjQ2OCwxMSw0NjQ5Niw0NjQ5NiwxMSw0NjUyNCw0NjUyNCwxMSw0NjU1Miw0NjU1MiwxMSw0NjU4MCw0NjU4MCwxMSw0NjYwOCw0NjYwOCwxMSw0NjYzNiw0NjYzNiwxMSw0NjY2NCw0NjY2NCwxMSw0NjY5Miw0NjY5MiwxMSw0NjcyMCw0NjcyMCwxMSw0Njc0OCw0Njc0OCwxMSw0Njc3Niw0Njc3NiwxMSw0NjgwNCw0NjgwNCwxMSw0NjgzMiw0NjgzMiwxMSw0Njg2MCw0Njg2MCwxMSw0Njg4OCw0Njg4OCwxMSw0NjkxNiw0NjkxNiwxMSw0Njk0NCw0Njk0NCwxMSw0Njk3Miw0Njk3MiwxMSw0NzAwMCw0NzAwMCwxMSw0NzAyOCw0NzAyOCwxMSw0NzA1Niw0NzA1NiwxMSw0NzA4NCw0NzA4NCwxMSw0NzExMiw0NzExMiwxMSw0NzE0MCw0NzE0MCwxMSw0NzE2OCw0NzE2OCwxMSw0NzE5Niw0NzE5NiwxMSw0NzIyNCw0NzIyNCwxMSw0NzI1Miw0NzI1MiwxMSw0NzI4MCw0NzI4MCwxMSw0NzMwOCw0NzMwOCwxMSw0NzMzNiw0NzMzNiwxMSw0NzM2NCw0NzM2NCwxMSw0NzM5Miw0NzM5MiwxMSw0NzQyMCw0NzQyMCwxMSw0NzQ0OCw0NzQ0OCwxMSw0NzQ3Niw0NzQ3NiwxMSw0NzUwNCw0NzUwNCwxMSw0NzUzMiw0NzUzMiwxMSw0NzU2MCw0NzU2MCwxMSw0NzU4OCw0NzU4OCwxMSw0NzYxNiw0NzYxNiwxMSw0NzY0NCw0NzY0NCwxMSw0NzY3Miw0NzY3MiwxMSw0NzcwMCw0NzcwMCwxMSw0NzcyOCw0NzcyOCwxMSw0Nzc1Niw0Nzc1NiwxMSw0Nzc4NCw0Nzc4NCwxMSw0NzgxMiw0NzgxMiwxMSw0Nzg0MCw0Nzg0MCwxMSw0Nzg2OCw0Nzg2OCwxMSw0Nzg5Niw0Nzg5NiwxMSw0NzkyNCw0NzkyNCwxMSw0Nzk1Miw0Nzk1MiwxMSw0Nzk4MCw0Nzk4MCwxMSw0ODAwOCw0ODAwOCwxMSw0ODAzNiw0ODAzNiwxMSw0ODA2NCw0ODA2NCwxMSw0ODA5Miw0ODA5MiwxMSw0ODEyMCw0ODEyMCwxMSw0ODE0OCw0ODE0OCwxMSw0ODE3Niw0ODE3NiwxMSw0ODIwNCw0ODIwNCwxMSw0ODIzMiw0ODIzMiwxMSw0ODI2MCw0ODI2MCwxMSw0ODI4OCw0ODI4OCwxMSw0ODMxNiw0ODMxNiwxMSw0ODM0NCw0ODM0NCwxMSw0ODM3Miw0ODM3MiwxMSw0ODQwMCw0ODQwMCwxMSw0ODQyOCw0ODQyOCwxMSw0ODQ1Niw0ODQ1NiwxMSw0ODQ4NCw0ODQ4NCwxMSw0ODUxMiw0ODUxMiwxMSw0ODU0MCw0ODU0MCwxMSw0ODU2OCw0ODU2OCwxMSw0ODU5Niw0ODU5NiwxMSw0ODYyNCw0ODYyNCwxMSw0ODY1Miw0ODY1MiwxMSw0ODY4MCw0ODY4MCwxMSw0ODcwOCw0ODcwOCwxMSw0ODczNiw0ODczNiwxMSw0ODc2NCw0ODc2NCwxMSw0ODc5Miw0ODc5MiwxMSw0ODgyMCw0ODgyMCwxMSw0ODg0OCw0ODg0OCwxMSw0ODg3Niw0ODg3NiwxMSw0ODkwNCw0ODkwNCwxMSw0ODkzMiw0ODkzMiwxMSw0ODk2MCw0ODk2MCwxMSw0ODk4OCw0ODk4OCwxMSw0OTAxNiw0OTAxNiwxMSw0OTA0NCw0OTA0NCwxMSw0OTA3Miw0OTA3MiwxMSw0OTEwMCw0OTEwMCwxMSw0OTEyOCw0OTEyOCwxMSw0OTE1Niw0OTE1NiwxMSw0OTE4NCw0OTE4NCwxMSw0OTIxMiw0OTIxMiwxMSw0OTI0MCw0OTI0MCwxMSw0OTI2OCw0OTI2OCwxMSw0OTI5Niw0OTI5NiwxMSw0OTMyNCw0OTMyNCwxMSw0OTM1Miw0OTM1MiwxMSw0OTM4MCw0OTM4MCwxMSw0OTQwOCw0OTQwOCwxMSw0OTQzNiw0OTQzNiwxMSw0OTQ2NCw0OTQ2NCwxMSw0OTQ5Miw0OTQ5MiwxMSw0OTUyMCw0OTUyMCwxMSw0OTU0OCw0OTU0OCwxMSw0OTU3Niw0OTU3NiwxMSw0OTYwNCw0OTYwNCwxMSw0OTYzMiw0OTYzMiwxMSw0OTY2MCw0OTY2MCwxMSw0OTY4OCw0OTY4OCwxMSw0OTcxNiw0OTcxNiwxMSw0OTc0NCw0OTc0NCwxMSw0OTc3Miw0OTc3MiwxMSw0OTgwMCw0OTgwMCwxMSw0OTgyOCw0OTgyOCwxMSw0OTg1Niw0OTg1NiwxMSw0OTg4NCw0OTg4NCwxMSw0OTkxMiw0OTkxMiwxMSw0OTk0MCw0OTk0MCwxMSw0OTk2OCw0OTk2OCwxMSw0OTk5Niw0OTk5NiwxMSw1MDAyNCw1MDAyNCwxMSw1MDA1Miw1MDA1MiwxMSw1MDA4MCw1MDA4MCwxMSw1MDEwOCw1MDEwOCwxMSw1MDEzNiw1MDEzNiwxMSw1MDE2NCw1MDE2NCwxMSw1MDE5Miw1MDE5MiwxMSw1MDIyMCw1MDIyMCwxMSw1MDI0OCw1MDI0OCwxMSw1MDI3Niw1MDI3NiwxMSw1MDMwNCw1MDMwNCwxMSw1MDMzMiw1MDMzMiwxMSw1MDM2MCw1MDM2MCwxMSw1MDM4OCw1MDM4OCwxMSw1MDQxNiw1MDQxNiwxMSw1MDQ0NCw1MDQ0NCwxMSw1MDQ3Miw1MDQ3MiwxMSw1MDUwMCw1MDUwMCwxMSw1MDUyOCw1MDUyOCwxMSw1MDU1Niw1MDU1NiwxMSw1MDU4NCw1MDU4NCwxMSw1MDYxMiw1MDYxMiwxMSw1MDY0MCw1MDY0MCwxMSw1MDY2OCw1MDY2OCwxMSw1MDY5Niw1MDY5NiwxMSw1MDcyNCw1MDcyNCwxMSw1MDc1Miw1MDc1MiwxMSw1MDc4MCw1MDc4MCwxMSw1MDgwOCw1MDgwOCwxMSw1MDgzNiw1MDgzNiwxMSw1MDg2NCw1MDg2NCwxMSw1MDg5Miw1MDg5MiwxMSw1MDkyMCw1MDkyMCwxMSw1MDk0OCw1MDk0OCwxMSw1MDk3Niw1MDk3NiwxMSw1MTAwNCw1MTAwNCwxMSw1MTAzMiw1MTAzMiwxMSw1MTA2MCw1MTA2MCwxMSw1MTA4OCw1MTA4OCwxMSw1MTExNiw1MTExNiwxMSw1MTE0NCw1MTE0NCwxMSw1MTE3Miw1MTE3MiwxMSw1MTIwMCw1MTIwMCwxMSw1MTIyOCw1MTIyOCwxMSw1MTI1Niw1MTI1NiwxMSw1MTI4NCw1MTI4NCwxMSw1MTMxMiw1MTMxMiwxMSw1MTM0MCw1MTM0MCwxMSw1MTM2OCw1MTM2OCwxMSw1MTM5Niw1MTM5NiwxMSw1MTQyNCw1MTQyNCwxMSw1MTQ1Miw1MTQ1MiwxMSw1MTQ4MCw1MTQ4MCwxMSw1MTUwOCw1MTUwOCwxMSw1MTUzNiw1MTUzNiwxMSw1MTU2NCw1MTU2NCwxMSw1MTU5Miw1MTU5MiwxMSw1MTYyMCw1MTYyMCwxMSw1MTY0OCw1MTY0OCwxMSw1MTY3Niw1MTY3NiwxMSw1MTcwNCw1MTcwNCwxMSw1MTczMiw1MTczMiwxMSw1MTc2MCw1MTc2MCwxMSw1MTc4OCw1MTc4OCwxMSw1MTgxNiw1MTgxNiwxMSw1MTg0NCw1MTg0NCwxMSw1MTg3Miw1MTg3MiwxMSw1MTkwMCw1MTkwMCwxMSw1MTkyOCw1MTkyOCwxMSw1MTk1Niw1MTk1NiwxMSw1MTk4NCw1MTk4NCwxMSw1MjAxMiw1MjAxMiwxMSw1MjA0MCw1MjA0MCwxMSw1MjA2OCw1MjA2OCwxMSw1MjA5Niw1MjA5NiwxMSw1MjEyNCw1MjEyNCwxMSw1MjE1Miw1MjE1MiwxMSw1MjE4MCw1MjE4MCwxMSw1MjIwOCw1MjIwOCwxMSw1MjIzNiw1MjIzNiwxMSw1MjI2NCw1MjI2NCwxMSw1MjI5Miw1MjI5MiwxMSw1MjMyMCw1MjMyMCwxMSw1MjM0OCw1MjM0OCwxMSw1MjM3Niw1MjM3NiwxMSw1MjQwNCw1MjQwNCwxMSw1MjQzMiw1MjQzMiwxMSw1MjQ2MCw1MjQ2MCwxMSw1MjQ4OCw1MjQ4OCwxMSw1MjUxNiw1MjUxNiwxMSw1MjU0NCw1MjU0NCwxMSw1MjU3Miw1MjU3MiwxMSw1MjYwMCw1MjYwMCwxMSw1MjYyOCw1MjYyOCwxMSw1MjY1Niw1MjY1NiwxMSw1MjY4NCw1MjY4NCwxMSw1MjcxMiw1MjcxMiwxMSw1Mjc0MCw1Mjc0MCwxMSw1Mjc2OCw1Mjc2OCwxMSw1Mjc5Niw1Mjc5NiwxMSw1MjgyNCw1MjgyNCwxMSw1Mjg1Miw1Mjg1MiwxMSw1Mjg4MCw1Mjg4MCwxMSw1MjkwOCw1MjkwOCwxMSw1MjkzNiw1MjkzNiwxMSw1Mjk2NCw1Mjk2NCwxMSw1Mjk5Miw1Mjk5MiwxMSw1MzAyMCw1MzAyMCwxMSw1MzA0OCw1MzA0OCwxMSw1MzA3Niw1MzA3NiwxMSw1MzEwNCw1MzEwNCwxMSw1MzEzMiw1MzEzMiwxMSw1MzE2MCw1MzE2MCwxMSw1MzE4OCw1MzE4OCwxMSw1MzIxNiw1MzIxNiwxMSw1MzI0NCw1MzI0NCwxMSw1MzI3Miw1MzI3MiwxMSw1MzMwMCw1MzMwMCwxMSw1MzMyOCw1MzMyOCwxMSw1MzM1Niw1MzM1NiwxMSw1MzM4NCw1MzM4NCwxMSw1MzQxMiw1MzQxMiwxMSw1MzQ0MCw1MzQ0MCwxMSw1MzQ2OCw1MzQ2OCwxMSw1MzQ5Niw1MzQ5NiwxMSw1MzUyNCw1MzUyNCwxMSw1MzU1Miw1MzU1MiwxMSw1MzU4MCw1MzU4MCwxMSw1MzYwOCw1MzYwOCwxMSw1MzYzNiw1MzYzNiwxMSw1MzY2NCw1MzY2NCwxMSw1MzY5Miw1MzY5MiwxMSw1MzcyMCw1MzcyMCwxMSw1Mzc0OCw1Mzc0OCwxMSw1Mzc3Niw1Mzc3NiwxMSw1MzgwNCw1MzgwNCwxMSw1MzgzMiw1MzgzMiwxMSw1Mzg2MCw1Mzg2MCwxMSw1Mzg4OCw1Mzg4OCwxMSw1MzkxNiw1MzkxNiwxMSw1Mzk0NCw1Mzk0NCwxMSw1Mzk3Miw1Mzk3MiwxMSw1NDAwMCw1NDAwMCwxMSw1NDAyOCw1NDAyOCwxMSw1NDA1Niw1NDA1NiwxMSw1NDA4NCw1NDA4NCwxMSw1NDExMiw1NDExMiwxMSw1NDE0MCw1NDE0MCwxMSw1NDE2OCw1NDE2OCwxMSw1NDE5Niw1NDE5NiwxMSw1NDIyNCw1NDIyNCwxMSw1NDI1Miw1NDI1MiwxMSw1NDI4MCw1NDI4MCwxMSw1NDMwOCw1NDMwOCwxMSw1NDMzNiw1NDMzNiwxMSw1NDM2NCw1NDM2NCwxMSw1NDM5Miw1NDM5MiwxMSw1NDQyMCw1NDQyMCwxMSw1NDQ0OCw1NDQ0OCwxMSw1NDQ3Niw1NDQ3NiwxMSw1NDUwNCw1NDUwNCwxMSw1NDUzMiw1NDUzMiwxMSw1NDU2MCw1NDU2MCwxMSw1NDU4OCw1NDU4OCwxMSw1NDYxNiw1NDYxNiwxMSw1NDY0NCw1NDY0NCwxMSw1NDY3Miw1NDY3MiwxMSw1NDcwMCw1NDcwMCwxMSw1NDcyOCw1NDcyOCwxMSw1NDc1Niw1NDc1NiwxMSw1NDc4NCw1NDc4NCwxMSw1NDgxMiw1NDgxMiwxMSw1NDg0MCw1NDg0MCwxMSw1NDg2OCw1NDg2OCwxMSw1NDg5Niw1NDg5NiwxMSw1NDkyNCw1NDkyNCwxMSw1NDk1Miw1NDk1MiwxMSw1NDk4MCw1NDk4MCwxMSw1NTAwOCw1NTAwOCwxMSw1NTAzNiw1NTAzNiwxMSw1NTA2NCw1NTA2NCwxMSw1NTA5Miw1NTA5MiwxMSw1NTEyMCw1NTEyMCwxMSw1NTE0OCw1NTE0OCwxMSw1NTE3Niw1NTE3NiwxMSw1NTIxNiw1NTIzOCw5LDY0Mjg2LDY0Mjg2LDUsNjUwNTYsNjUwNzEsNSw2NTQzOCw2NTQzOSw1LDY1NTI5LDY1NTMxLDQsNjYyNzIsNjYyNzIsNSw2ODA5Nyw2ODA5OSw1LDY4MTA4LDY4MTExLDUsNjgxNTksNjgxNTksNSw2ODkwMCw2ODkwMyw1LDY5NDQ2LDY5NDU2LDUsNjk2MzIsNjk2MzIsNyw2OTYzNCw2OTYzNCw3LDY5NzQ0LDY5NzQ0LDUsNjk3NTksNjk3NjEsNSw2OTgwOCw2OTgxMCw3LDY5ODE1LDY5ODE2LDcsNjk4MjEsNjk4MjEsMSw2OTgzNyw2OTgzNywxLDY5OTI3LDY5OTMxLDUsNjk5MzMsNjk5NDAsNSw3MDAwMyw3MDAwMyw1LDcwMDE4LDcwMDE4LDcsNzAwNzAsNzAwNzgsNSw3MDA4Miw3MDA4MywxLDcwMDk0LDcwMDk0LDcsNzAxODgsNzAxOTAsNyw3MDE5NCw3MDE5NSw3LDcwMTk3LDcwMTk3LDcsNzAyMDYsNzAyMDYsNSw3MDM2OCw3MDM3MCw3LDcwNDAwLDcwNDAxLDUsNzA0NTksNzA0NjAsNSw3MDQ2Myw3MDQ2Myw3LDcwNDY1LDcwNDY4LDcsNzA0NzUsNzA0NzcsNyw3MDQ5OCw3MDQ5OSw3LDcwNTEyLDcwNTE2LDUsNzA3MTIsNzA3MTksNSw3MDcyMiw3MDcyNCw1LDcwNzI2LDcwNzI2LDUsNzA4MzIsNzA4MzIsNSw3MDgzNSw3MDg0MCw1LDcwODQyLDcwODQyLDUsNzA4NDUsNzA4NDUsNSw3MDg0Nyw3MDg0OCw1LDcwODUwLDcwODUxLDUsNzEwODgsNzEwODksNyw3MTA5Niw3MTA5OSw3LDcxMTAyLDcxMTAyLDcsNzExMzIsNzExMzMsNSw3MTIxOSw3MTIyNiw1LDcxMjI5LDcxMjI5LDUsNzEyMzEsNzEyMzIsNSw3MTM0MCw3MTM0MCw3LDcxMzQyLDcxMzQzLDcsNzEzNTAsNzEzNTAsNyw3MTQ1Myw3MTQ1NSw1LDcxNDYyLDcxNDYyLDcsNzE3MjQsNzE3MjYsNyw3MTczNiw3MTczNiw3LDcxOTg0LDcxOTg0LDUsNzE5OTEsNzE5OTIsNyw3MTk5Nyw3MTk5Nyw3LDcxOTk5LDcxOTk5LDEsNzIwMDEsNzIwMDEsMSw3MjAwMyw3MjAwMyw1LDcyMTQ4LDcyMTUxLDUsNzIxNTYsNzIxNTksNyw3MjE2NCw3MjE2NCw3LDcyMjQzLDcyMjQ4LDUsNzIyNTAsNzIyNTAsMSw3MjI2Myw3MjI2Myw1LDcyMjc5LDcyMjgwLDcsNzIzMjQsNzIzMjksMSw3MjM0Myw3MjM0Myw3LDcyNzUxLDcyNzUxLDcsNzI3NjAsNzI3NjUsNSw3Mjc2Nyw3Mjc2Nyw1LDcyODczLDcyODczLDcsNzI4ODEsNzI4ODEsNyw3Mjg4NCw3Mjg4NCw3LDczMDA5LDczMDE0LDUsNzMwMjAsNzMwMjEsNSw3MzAzMCw3MzAzMCwxLDczMDk4LDczMTAyLDcsNzMxMDcsNzMxMDgsNyw3MzExMCw3MzExMCw3LDczNDU5LDczNDYwLDUsNzg4OTYsNzg5MDQsNCw5Mjk3Niw5Mjk4Miw1LDk0MDMzLDk0MDg3LDcsOTQxODAsOTQxODAsNSwxMTM4MjEsMTEzODIyLDUsMTE4NTI4LDExODU3Myw1LDExOTE0MSwxMTkxNDEsNSwxMTkxNDMsMTE5MTQ1LDUsMTE5MTUwLDExOTE1NCw1LDExOTE2MywxMTkxNzAsNSwxMTkyMTAsMTE5MjEzLDUsMTIxMzQ0LDEyMTM5OCw1LDEyMTQ2MSwxMjE0NjEsNSwxMjE0OTksMTIxNTAzLDUsMTIyODgwLDEyMjg4Niw1LDEyMjkwNywxMjI5MTMsNSwxMjI5MTgsMTIyOTIyLDUsMTIzNTY2LDEyMzU2Niw1LDEyNTEzNiwxMjUxNDIsNSwxMjY5NzYsMTI2OTc5LDE0LDEyNjk4MSwxMjcxODIsMTQsMTI3MTg0LDEyNzIzMSwxNCwxMjcyNzksMTI3Mjc5LDE0LDEyNzM0NCwxMjczNDUsMTQsMTI3Mzc0LDEyNzM3NCwxNCwxMjc0MDUsMTI3NDYxLDE0LDEyNzQ4OSwxMjc0OTAsMTQsMTI3NTE0LDEyNzUxNCwxNCwxMjc1MzgsMTI3NTQ2LDE0LDEyNzU2MSwxMjc1NjcsMTQsMTI3NTcwLDEyNzc0MywxNCwxMjc3NTcsMTI3NzU4LDE0LDEyNzc2MCwxMjc3NjAsMTQsMTI3NzYyLDEyNzc2MiwxNCwxMjc3NjYsMTI3NzY4LDE0LDEyNzc3MCwxMjc3NzAsMTQsMTI3NzcyLDEyNzc3MiwxNCwxMjc3NzUsMTI3Nzc2LDE0LDEyNzc3OCwxMjc3NzksMTQsMTI3Nzg5LDEyNzc5MSwxNCwxMjc3OTQsMTI3Nzk1LDE0LDEyNzc5OCwxMjc3OTgsMTQsMTI3ODE5LDEyNzgxOSwxNCwxMjc4MjQsMTI3ODI0LDE0LDEyNzg2OCwxMjc4NjgsMTQsMTI3ODcwLDEyNzg3MSwxNCwxMjc4OTIsMTI3ODkzLDE0LDEyNzg5NiwxMjc4OTYsMTQsMTI3OTAwLDEyNzkwMSwxNCwxMjc5MDQsMTI3OTQwLDE0LDEyNzk0MiwxMjc5NDIsMTQsMTI3OTQ0LDEyNzk0NCwxNCwxMjc5NDYsMTI3OTQ2LDE0LDEyNzk1MSwxMjc5NTUsMTQsMTI3OTY4LDEyNzk3MSwxNCwxMjc5NzMsMTI3OTg0LDE0LDEyNzk4NywxMjc5ODcsMTQsMTI3OTg5LDEyNzk4OSwxNCwxMjc5OTEsMTI3OTkxLDE0LDEyNzk5NSwxMjc5OTksNSwxMjgwMDgsMTI4MDA4LDE0LDEyODAxMiwxMjgwMTQsMTQsMTI4MDE3LDEyODAxOCwxNCwxMjgwMjAsMTI4MDIwLDE0LDEyODAyMiwxMjgwMjIsMTQsMTI4MDQyLDEyODA0MiwxNCwxMjgwNjMsMTI4MDYzLDE0LDEyODA2NSwxMjgwNjUsMTQsMTI4MTAxLDEyODEwMSwxNCwxMjgxMDgsMTI4MTA5LDE0LDEyODE3MywxMjgxNzMsMTQsMTI4MTgyLDEyODE4MywxNCwxMjgyMzYsMTI4MjM3LDE0LDEyODIzOSwxMjgyMzksMTQsMTI4MjQ1LDEyODI0NSwxNCwxMjgyNDgsMTI4MjQ4LDE0LDEyODI1MywxMjgyNTMsMTQsMTI4MjU1LDEyODI1OCwxNCwxMjgyNjAsMTI4MjYzLDE0LDEyODI2NSwxMjgyNjUsMTQsMTI4Mjc3LDEyODI3NywxNCwxMjgzMDAsMTI4MzAxLDE0LDEyODMyNiwxMjgzMjgsMTQsMTI4MzMxLDEyODMzNCwxNCwxMjgzMzYsMTI4MzQ3LDE0LDEyODM2MCwxMjgzNjYsMTQsMTI4MzY5LDEyODM3MCwxNCwxMjgzNzgsMTI4Mzc4LDE0LDEyODM5MSwxMjgzOTEsMTQsMTI4Mzk0LDEyODM5NywxNCwxMjg0MDAsMTI4NDAwLDE0LDEyODQwNSwxMjg0MDYsMTQsMTI4NDIwLDEyODQyMCwxNCwxMjg0MjIsMTI4NDIzLDE0LDEyODQyNSwxMjg0MzIsMTQsMTI4NDM1LDEyODQ0MywxNCwxMjg0NDUsMTI4NDQ5LDE0LDEyODQ1MywxMjg0NjQsMTQsMTI4NDY4LDEyODQ3NSwxNCwxMjg0NzksMTI4NDgwLDE0LDEyODQ4MiwxMjg0ODIsMTQsMTI4NDg0LDEyODQ4NywxNCwxMjg0ODksMTI4NDk0LDE0LDEyODQ5NiwxMjg0OTgsMTQsMTI4NTAwLDEyODUwNSwxNCwxMjg1MDcsMTI4NTExLDE0LDEyODUxMywxMjg1MTgsMTQsMTI4NTIxLDEyODUyNSwxNCwxMjg1MjcsMTI4NTI3LDE0LDEyODUyOSwxMjg1MjksMTQsMTI4NTMzLDEyODUzMywxNCwxMjg1MzUsMTI4NTM1LDE0LDEyODUzNywxMjg1MzcsMTRdJyk7XG59XG4vLyNlbmRyZWdpb25cbi8qKlxuICogQ29tcHV0ZXMgdGhlIG9mZnNldCBhZnRlciBwZXJmb3JtaW5nIGEgbGVmdCBkZWxldGUgb24gdGhlIGdpdmVuIHN0cmluZyxcbiAqIHdoaWxlIGNvbnNpZGVyaW5nIHVuaWNvZGUgZ3JhcGhlbWUvZW1vamkgcnVsZXMuXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExlZnREZWxldGVPZmZzZXQob2Zmc2V0LCBzdHIpIHtcbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gZGVsZXRlIGVtb2ppIHBhcnQuXG4gICAgY29uc3QgZW1vamlPZmZzZXQgPSBnZXRPZmZzZXRCZWZvcmVMYXN0RW1vamlDb21wb25lbnQob2Zmc2V0LCBzdHIpO1xuICAgIGlmIChlbW9qaU9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBlbW9qaU9mZnNldDtcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHNraXAgYSBzaW5nbGUgY29kZSBwb2ludC5cbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBDb2RlUG9pbnRJdGVyYXRvcihzdHIsIG9mZnNldCk7XG4gICAgaXRlcmF0b3IucHJldkNvZGVQb2ludCgpO1xuICAgIHJldHVybiBpdGVyYXRvci5vZmZzZXQ7XG59XG5mdW5jdGlvbiBnZXRPZmZzZXRCZWZvcmVMYXN0RW1vamlDb21wb25lbnQoaW5pdGlhbE9mZnNldCwgc3RyKSB7XG4gICAgLy8gU2VlIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHI1MS90cjUxLTE0Lmh0bWwjRUJORl9hbmRfUmVnZXggZm9yIHRoZVxuICAgIC8vIHN0cnVjdHVyZSBvZiBlbW9qaXMuXG4gICAgY29uc3QgaXRlcmF0b3IgPSBuZXcgQ29kZVBvaW50SXRlcmF0b3Ioc3RyLCBpbml0aWFsT2Zmc2V0KTtcbiAgICBsZXQgY29kZVBvaW50ID0gaXRlcmF0b3IucHJldkNvZGVQb2ludCgpO1xuICAgIC8vIFNraXAgbW9kaWZpZXJzXG4gICAgd2hpbGUgKChpc0Vtb2ppTW9kaWZpZXIoY29kZVBvaW50KSB8fCBjb2RlUG9pbnQgPT09IDY1MDM5IC8qIENvZGVQb2ludC5lbW9qaVZhcmlhbnRTZWxlY3RvciAqLyB8fCBjb2RlUG9pbnQgPT09IDg0MTkgLyogQ29kZVBvaW50LmVuY2xvc2luZ0tleUNhcCAqLykpIHtcbiAgICAgICAgaWYgKGl0ZXJhdG9yLm9mZnNldCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gQ2Fubm90IHNraXAgbW9kaWZpZXIsIG5vIHByZWNlZGluZyBlbW9qaSBiYXNlLlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb2RlUG9pbnQgPSBpdGVyYXRvci5wcmV2Q29kZVBvaW50KCk7XG4gICAgfVxuICAgIC8vIEV4cGVjdCBiYXNlIGVtb2ppXG4gICAgaWYgKCFpc0Vtb2ppSW1wcmVjaXNlKGNvZGVQb2ludCkpIHtcbiAgICAgICAgLy8gVW5leHBlY3RlZCBjb2RlIHBvaW50LCBub3QgYSB2YWxpZCBlbW9qaS5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IHJlc3VsdE9mZnNldCA9IGl0ZXJhdG9yLm9mZnNldDtcbiAgICBpZiAocmVzdWx0T2Zmc2V0ID4gMCkge1xuICAgICAgICAvLyBTa2lwIG9wdGlvbmFsIFpXSiBjb2RlIHBvaW50cyB0aGF0IGNvbWJpbmUgbXVsdGlwbGUgZW1vamlzLlxuICAgICAgICAvLyBJbiB0aGVvcnksIHdlIHNob3VsZCBjaGVjayBpZiB0aGF0IFpXSiBhY3R1YWxseSBjb21iaW5lcyBtdWx0aXBsZSBlbW9qaXNcbiAgICAgICAgLy8gdG8gcHJldmVudCBkZWxldGluZyBaV0pzIGluIHNpdHVhdGlvbnMgd2UgZGlkbid0IGFjY291bnQgZm9yLlxuICAgICAgICBjb25zdCBvcHRpb25hbFp3akNvZGVQb2ludCA9IGl0ZXJhdG9yLnByZXZDb2RlUG9pbnQoKTtcbiAgICAgICAgaWYgKG9wdGlvbmFsWndqQ29kZVBvaW50ID09PSA4MjA1IC8qIENvZGVQb2ludC56d2ogKi8pIHtcbiAgICAgICAgICAgIHJlc3VsdE9mZnNldCA9IGl0ZXJhdG9yLm9mZnNldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xufVxuZnVuY3Rpb24gaXNFbW9qaU1vZGlmaWVyKGNvZGVQb2ludCkge1xuICAgIHJldHVybiAweDFGM0ZCIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHgxRjNGRjtcbn1cbmV4cG9ydCBjb25zdCBub0JyZWFrV2hpdGVzcGFjZSA9ICdcXHhhMCc7XG5leHBvcnQgY2xhc3MgQW1iaWd1b3VzQ2hhcmFjdGVycyB7XG4gICAgc3RhdGljIGdldEluc3RhbmNlKGxvY2FsZXMpIHtcbiAgICAgICAgcmV0dXJuIF9hLmNhY2hlLmdldChBcnJheS5mcm9tKGxvY2FsZXMpKTtcbiAgICB9XG4gICAgc3RhdGljIGdldExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBfYS5fbG9jYWxlcy52YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29uZnVzYWJsZURpY3Rpb25hcnkpIHtcbiAgICAgICAgdGhpcy5jb25mdXNhYmxlRGljdGlvbmFyeSA9IGNvbmZ1c2FibGVEaWN0aW9uYXJ5O1xuICAgIH1cbiAgICBpc0FtYmlndW91cyhjb2RlUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZnVzYWJsZURpY3Rpb25hcnkuaGFzKGNvZGVQb2ludCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5vbiBiYXNpYyBBU0NJSSBjb2RlIHBvaW50IHRoYXQgdGhlIGdpdmVuIGNvZGUgcG9pbnQgY2FuIGJlIGNvbmZ1c2VkLFxuICAgICAqIG9yIHVuZGVmaW5lZCBpZiBzdWNoIGNvZGUgcG9pbnQgZG9lcyBub3RlIGV4aXN0LlxuICAgICAqL1xuICAgIGdldFByaW1hcnlDb25mdXNhYmxlKGNvZGVQb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25mdXNhYmxlRGljdGlvbmFyeS5nZXQoY29kZVBvaW50KTtcbiAgICB9XG4gICAgZ2V0Q29uZnVzYWJsZUNvZGVQb2ludHMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KHRoaXMuY29uZnVzYWJsZURpY3Rpb25hcnkua2V5cygpKTtcbiAgICB9XG59XG5fYSA9IEFtYmlndW91c0NoYXJhY3RlcnM7XG5BbWJpZ3VvdXNDaGFyYWN0ZXJzLmFtYmlndW91c0NoYXJhY3RlckRhdGEgPSBuZXcgTGF6eSgoKSA9PiB7XG4gICAgLy8gR2VuZXJhdGVkIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9oZWRpZXQvdnNjb2RlLXVuaWNvZGUtZGF0YVxuICAgIC8vIFN0b3JlZCBhcyBrZXkxLCB2YWx1ZTEsIGtleTIsIHZhbHVlMiwgLi4uXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoJ3tcXFwiX2NvbW1vblxcXCI6WzgyMzIsMzIsODIzMywzMiw1NzYwLDMyLDgxOTIsMzIsODE5MywzMiw4MTk0LDMyLDgxOTUsMzIsODE5NiwzMiw4MTk3LDMyLDgxOTgsMzIsODIwMCwzMiw4MjAxLDMyLDgyMDIsMzIsODI4NywzMiw4MTk5LDMyLDgyMzksMzIsMjA0Miw5NSw2NTEwMSw5NSw2NTEwMiw5NSw2NTEwMyw5NSw4MjA4LDQ1LDgyMDksNDUsODIxMCw0NSw2NTExMiw0NSwxNzQ4LDQ1LDgyNTksNDUsNzI3LDQ1LDg3MjIsNDUsMTAxMzQsNDUsMTE0NTAsNDUsMTU0OSw0NCwxNjQzLDQ0LDgyMTgsNDQsMTg0LDQ0LDQyMjMzLDQ0LDg5NCw1OSwyMzA3LDU4LDI2OTEsNTgsMTQxNyw1OCwxNzk1LDU4LDE3OTYsNTgsNTg2OCw1OCw2NTA3Miw1OCw2MTQ3LDU4LDYxNTMsNTgsODI4Miw1OCwxNDc1LDU4LDc2MCw1OCw0Mjg4OSw1OCw4NzU4LDU4LDcyMCw1OCw0MjIzNyw1OCw0NTEsMzMsMTE2MDEsMzMsNjYwLDYzLDU3Nyw2MywyNDI5LDYzLDUwMzgsNjMsNDI3MzEsNjMsMTE5MTQ5LDQ2LDgyMjgsNDYsMTc5Myw0NiwxNzk0LDQ2LDQyNTEwLDQ2LDY4MTc2LDQ2LDE2MzIsNDYsMTc3Niw0Niw0MjIzMiw0NiwxMzczLDk2LDY1Mjg3LDk2LDgyMTksOTYsODI0Miw5NiwxMzcwLDk2LDE1MjMsOTYsODE3NSw5Niw2NTM0NCw5Niw5MDAsOTYsODE4OSw5Niw4MTI1LDk2LDgxMjcsOTYsODE5MCw5Niw2OTcsOTYsODg0LDk2LDcxMiw5Niw3MTQsOTYsNzE1LDk2LDc1Niw5Niw2OTksOTYsNzAxLDk2LDcwMCw5Niw3MDIsOTYsNDI4OTIsOTYsMTQ5Nyw5NiwyMDM2LDk2LDIwMzcsOTYsNTE5NCw5Niw1ODM2LDk2LDk0MDMzLDk2LDk0MDM0LDk2LDY1MzM5LDkxLDEwMDg4LDQwLDEwMDk4LDQwLDEyMzA4LDQwLDY0ODMwLDQwLDY1MzQxLDkzLDEwMDg5LDQxLDEwMDk5LDQxLDEyMzA5LDQxLDY0ODMxLDQxLDEwMTAwLDEyMywxMTkwNjAsMTIzLDEwMTAxLDEyNSw2NTM0Miw5NCw4MjcwLDQyLDE2NDUsNDIsODcyNyw0Miw2NjMzNSw0Miw1OTQxLDQ3LDgyNTcsNDcsODcyNSw0Nyw4MjYwLDQ3LDk1ODUsNDcsMTAxODcsNDcsMTA3NDQsNDcsMTE5MzU0LDQ3LDEyNzU1LDQ3LDEyMzM5LDQ3LDExNDYyLDQ3LDIwMDMxLDQ3LDEyMDM1LDQ3LDY1MzQwLDkyLDY1MTI4LDkyLDg3MjYsOTIsMTAxODksOTIsMTA3NDEsOTIsMTA3NDUsOTIsMTE5MzExLDkyLDExOTM1NSw5MiwxMjc1Niw5MiwyMDAyMiw5MiwxMjAzNCw5Miw0Mjg3MiwzOCw3MDgsOTQsNzEwLDk0LDU4NjksNDMsMTAxMzMsNDMsNjYyMDMsNDMsODI0OSw2MCwxMDA5NCw2MCw3MDYsNjAsMTE5MzUwLDYwLDUxNzYsNjAsNTgxMCw2MCw1MTIwLDYxLDExODQwLDYxLDEyNDQ4LDYxLDQyMjM5LDYxLDgyNTAsNjIsMTAwOTUsNjIsNzA3LDYyLDExOTM1MSw2Miw1MTcxLDYyLDk0MDE1LDYyLDgyNzUsMTI2LDczMiwxMjYsODEyOCwxMjYsODc2NCwxMjYsNjUzNzIsMTI0LDY1MjkzLDQ1LDEyMDc4NCw1MCwxMjA3OTQsNTAsMTIwODA0LDUwLDEyMDgxNCw1MCwxMjA4MjQsNTAsMTMwMDM0LDUwLDQyODQyLDUwLDQyMyw1MCwxMDAwLDUwLDQyNTY0LDUwLDUzMTEsNTAsNDI3MzUsNTAsMTE5MzAyLDUxLDEyMDc4NSw1MSwxMjA3OTUsNTEsMTIwODA1LDUxLDEyMDgxNSw1MSwxMjA4MjUsNTEsMTMwMDM1LDUxLDQyOTIzLDUxLDU0MCw1MSw0MzksNTEsNDI4NTgsNTEsMTE0NjgsNTEsMTI0OCw1MSw5NDAxMSw1MSw3MTg4Miw1MSwxMjA3ODYsNTIsMTIwNzk2LDUyLDEyMDgwNiw1MiwxMjA4MTYsNTIsMTIwODI2LDUyLDEzMDAzNiw1Miw1MDcwLDUyLDcxODU1LDUyLDEyMDc4Nyw1MywxMjA3OTcsNTMsMTIwODA3LDUzLDEyMDgxNyw1MywxMjA4MjcsNTMsMTMwMDM3LDUzLDQ0NCw1Myw3MTg2Nyw1MywxMjA3ODgsNTQsMTIwNzk4LDU0LDEyMDgwOCw1NCwxMjA4MTgsNTQsMTIwODI4LDU0LDEzMDAzOCw1NCwxMTQ3NCw1NCw1MTAyLDU0LDcxODkzLDU0LDExOTMxNCw1NSwxMjA3ODksNTUsMTIwNzk5LDU1LDEyMDgwOSw1NSwxMjA4MTksNTUsMTIwODI5LDU1LDEzMDAzOSw1NSw2Njc3MCw1NSw3MTg3OCw1NSwyODE5LDU2LDI1MzgsNTYsMjY2Niw1NiwxMjUxMzEsNTYsMTIwNzkwLDU2LDEyMDgwMCw1NiwxMjA4MTAsNTYsMTIwODIwLDU2LDEyMDgzMCw1NiwxMzAwNDAsNTYsNTQ3LDU2LDU0Niw1Niw2NjMzMCw1NiwyNjYzLDU3LDI5MjAsNTcsMjU0MSw1NywzNDM3LDU3LDEyMDc5MSw1NywxMjA4MDEsNTcsMTIwODExLDU3LDEyMDgyMSw1NywxMjA4MzEsNTcsMTMwMDQxLDU3LDQyODYyLDU3LDExNDY2LDU3LDcxODg0LDU3LDcxODUyLDU3LDcxODk0LDU3LDkwODIsOTcsNjUzNDUsOTcsMTE5ODM0LDk3LDExOTg4Niw5NywxMTk5MzgsOTcsMTE5OTkwLDk3LDEyMDA0Miw5NywxMjAwOTQsOTcsMTIwMTQ2LDk3LDEyMDE5OCw5NywxMjAyNTAsOTcsMTIwMzAyLDk3LDEyMDM1NCw5NywxMjA0MDYsOTcsMTIwNDU4LDk3LDU5Myw5Nyw5NDUsOTcsMTIwNTE0LDk3LDEyMDU3Miw5NywxMjA2MzAsOTcsMTIwNjg4LDk3LDEyMDc0Niw5Nyw2NTMxMyw2NSwxMTk4MDgsNjUsMTE5ODYwLDY1LDExOTkxMiw2NSwxMTk5NjQsNjUsMTIwMDE2LDY1LDEyMDA2OCw2NSwxMjAxMjAsNjUsMTIwMTcyLDY1LDEyMDIyNCw2NSwxMjAyNzYsNjUsMTIwMzI4LDY1LDEyMDM4MCw2NSwxMjA0MzIsNjUsOTEzLDY1LDEyMDQ4OCw2NSwxMjA1NDYsNjUsMTIwNjA0LDY1LDEyMDY2Miw2NSwxMjA3MjAsNjUsNTAzNCw2NSw1NTczLDY1LDQyMjIyLDY1LDk0MDE2LDY1LDY2MjA4LDY1LDExOTgzNSw5OCwxMTk4ODcsOTgsMTE5OTM5LDk4LDExOTk5MSw5OCwxMjAwNDMsOTgsMTIwMDk1LDk4LDEyMDE0Nyw5OCwxMjAxOTksOTgsMTIwMjUxLDk4LDEyMDMwMyw5OCwxMjAzNTUsOTgsMTIwNDA3LDk4LDEyMDQ1OSw5OCwzODgsOTgsNTA3MSw5OCw1MjM0LDk4LDU1NTEsOTgsNjUzMTQsNjYsODQ5Miw2NiwxMTk4MDksNjYsMTE5ODYxLDY2LDExOTkxMyw2NiwxMjAwMTcsNjYsMTIwMDY5LDY2LDEyMDEyMSw2NiwxMjAxNzMsNjYsMTIwMjI1LDY2LDEyMDI3Nyw2NiwxMjAzMjksNjYsMTIwMzgxLDY2LDEyMDQzMyw2Niw0MjkzMiw2Niw5MTQsNjYsMTIwNDg5LDY2LDEyMDU0Nyw2NiwxMjA2MDUsNjYsMTIwNjYzLDY2LDEyMDcyMSw2Niw1MTA4LDY2LDU2MjMsNjYsNDIxOTIsNjYsNjYxNzgsNjYsNjYyMDksNjYsNjYzMDUsNjYsNjUzNDcsOTksODU3Myw5OSwxMTk4MzYsOTksMTE5ODg4LDk5LDExOTk0MCw5OSwxMTk5OTIsOTksMTIwMDQ0LDk5LDEyMDA5Niw5OSwxMjAxNDgsOTksMTIwMjAwLDk5LDEyMDI1Miw5OSwxMjAzMDQsOTksMTIwMzU2LDk5LDEyMDQwOCw5OSwxMjA0NjAsOTksNzQyOCw5OSwxMDEwLDk5LDExNDI5LDk5LDQzOTUxLDk5LDY2NjIxLDk5LDEyODg0NCw2Nyw3MTkyMiw2Nyw3MTkxMyw2Nyw2NTMxNSw2Nyw4NTU3LDY3LDg0NTAsNjcsODQ5Myw2NywxMTk4MTAsNjcsMTE5ODYyLDY3LDExOTkxNCw2NywxMTk5NjYsNjcsMTIwMDE4LDY3LDEyMDE3NCw2NywxMjAyMjYsNjcsMTIwMjc4LDY3LDEyMDMzMCw2NywxMjAzODIsNjcsMTIwNDM0LDY3LDEwMTcsNjcsMTE0MjgsNjcsNTA4Nyw2Nyw0MjIwMiw2Nyw2NjIxMCw2Nyw2NjMwNiw2Nyw2NjU4MSw2Nyw2Njg0NCw2Nyw4NTc0LDEwMCw4NTE4LDEwMCwxMTk4MzcsMTAwLDExOTg4OSwxMDAsMTE5OTQxLDEwMCwxMTk5OTMsMTAwLDEyMDA0NSwxMDAsMTIwMDk3LDEwMCwxMjAxNDksMTAwLDEyMDIwMSwxMDAsMTIwMjUzLDEwMCwxMjAzMDUsMTAwLDEyMDM1NywxMDAsMTIwNDA5LDEwMCwxMjA0NjEsMTAwLDEyODEsMTAwLDUwOTUsMTAwLDUyMzEsMTAwLDQyMTk0LDEwMCw4NTU4LDY4LDg1MTcsNjgsMTE5ODExLDY4LDExOTg2Myw2OCwxMTk5MTUsNjgsMTE5OTY3LDY4LDEyMDAxOSw2OCwxMjAwNzEsNjgsMTIwMTIzLDY4LDEyMDE3NSw2OCwxMjAyMjcsNjgsMTIwMjc5LDY4LDEyMDMzMSw2OCwxMjAzODMsNjgsMTIwNDM1LDY4LDUwMjQsNjgsNTU5OCw2OCw1NjEwLDY4LDQyMTk1LDY4LDg0OTQsMTAxLDY1MzQ5LDEwMSw4NDk1LDEwMSw4NTE5LDEwMSwxMTk4MzgsMTAxLDExOTg5MCwxMDEsMTE5OTQyLDEwMSwxMjAwNDYsMTAxLDEyMDA5OCwxMDEsMTIwMTUwLDEwMSwxMjAyMDIsMTAxLDEyMDI1NCwxMDEsMTIwMzA2LDEwMSwxMjAzNTgsMTAxLDEyMDQxMCwxMDEsMTIwNDYyLDEwMSw0MzgyNiwxMDEsMTIxMywxMDEsODk1OSw2OSw2NTMxNyw2OSw4NDk2LDY5LDExOTgxMiw2OSwxMTk4NjQsNjksMTE5OTE2LDY5LDEyMDAyMCw2OSwxMjAwNzIsNjksMTIwMTI0LDY5LDEyMDE3Niw2OSwxMjAyMjgsNjksMTIwMjgwLDY5LDEyMDMzMiw2OSwxMjAzODQsNjksMTIwNDM2LDY5LDkxNyw2OSwxMjA0OTIsNjksMTIwNTUwLDY5LDEyMDYwOCw2OSwxMjA2NjYsNjksMTIwNzI0LDY5LDExNTc3LDY5LDUwMzYsNjksNDIyMjQsNjksNzE4NDYsNjksNzE4NTQsNjksNjYxODIsNjksMTE5ODM5LDEwMiwxMTk4OTEsMTAyLDExOTk0MywxMDIsMTE5OTk1LDEwMiwxMjAwNDcsMTAyLDEyMDA5OSwxMDIsMTIwMTUxLDEwMiwxMjAyMDMsMTAyLDEyMDI1NSwxMDIsMTIwMzA3LDEwMiwxMjAzNTksMTAyLDEyMDQxMSwxMDIsMTIwNDYzLDEwMiw0MzgyOSwxMDIsNDI5MDUsMTAyLDM4MywxMDIsNzgzNywxMDIsMTQxMiwxMDIsMTE5MzE1LDcwLDg0OTcsNzAsMTE5ODEzLDcwLDExOTg2NSw3MCwxMTk5MTcsNzAsMTIwMDIxLDcwLDEyMDA3Myw3MCwxMjAxMjUsNzAsMTIwMTc3LDcwLDEyMDIyOSw3MCwxMjAyODEsNzAsMTIwMzMzLDcwLDEyMDM4NSw3MCwxMjA0MzcsNzAsNDI5MDQsNzAsOTg4LDcwLDEyMDc3OCw3MCw1NTU2LDcwLDQyMjA1LDcwLDcxODc0LDcwLDcxODQyLDcwLDY2MTgzLDcwLDY2MjEzLDcwLDY2ODUzLDcwLDY1MzUxLDEwMyw4NDU4LDEwMywxMTk4NDAsMTAzLDExOTg5MiwxMDMsMTE5OTQ0LDEwMywxMjAwNDgsMTAzLDEyMDEwMCwxMDMsMTIwMTUyLDEwMywxMjAyMDQsMTAzLDEyMDI1NiwxMDMsMTIwMzA4LDEwMywxMjAzNjAsMTAzLDEyMDQxMiwxMDMsMTIwNDY0LDEwMyw2MDksMTAzLDc1NTUsMTAzLDM5NywxMDMsMTQwOSwxMDMsMTE5ODE0LDcxLDExOTg2Niw3MSwxMTk5MTgsNzEsMTE5OTcwLDcxLDEyMDAyMiw3MSwxMjAwNzQsNzEsMTIwMTI2LDcxLDEyMDE3OCw3MSwxMjAyMzAsNzEsMTIwMjgyLDcxLDEyMDMzNCw3MSwxMjAzODYsNzEsMTIwNDM4LDcxLDEyOTIsNzEsNTA1Niw3MSw1MTA3LDcxLDQyMTk4LDcxLDY1MzUyLDEwNCw4NDYyLDEwNCwxMTk4NDEsMTA0LDExOTk0NSwxMDQsMTE5OTk3LDEwNCwxMjAwNDksMTA0LDEyMDEwMSwxMDQsMTIwMTUzLDEwNCwxMjAyMDUsMTA0LDEyMDI1NywxMDQsMTIwMzA5LDEwNCwxMjAzNjEsMTA0LDEyMDQxMywxMDQsMTIwNDY1LDEwNCwxMjExLDEwNCwxMzkyLDEwNCw1MDU4LDEwNCw2NTMyMCw3Miw4NDU5LDcyLDg0NjAsNzIsODQ2MSw3MiwxMTk4MTUsNzIsMTE5ODY3LDcyLDExOTkxOSw3MiwxMjAwMjMsNzIsMTIwMTc5LDcyLDEyMDIzMSw3MiwxMjAyODMsNzIsMTIwMzM1LDcyLDEyMDM4Nyw3MiwxMjA0MzksNzIsOTE5LDcyLDEyMDQ5NCw3MiwxMjA1NTIsNzIsMTIwNjEwLDcyLDEyMDY2OCw3MiwxMjA3MjYsNzIsMTE0MDYsNzIsNTA1MSw3Miw1NTAwLDcyLDQyMjE1LDcyLDY2MjU1LDcyLDczMSwxMDUsOTA3NSwxMDUsNjUzNTMsMTA1LDg1NjAsMTA1LDg1MDUsMTA1LDg1MjAsMTA1LDExOTg0MiwxMDUsMTE5ODk0LDEwNSwxMTk5NDYsMTA1LDExOTk5OCwxMDUsMTIwMDUwLDEwNSwxMjAxMDIsMTA1LDEyMDE1NCwxMDUsMTIwMjA2LDEwNSwxMjAyNTgsMTA1LDEyMDMxMCwxMDUsMTIwMzYyLDEwNSwxMjA0MTQsMTA1LDEyMDQ2NiwxMDUsMTIwNDg0LDEwNSw2MTgsMTA1LDYxNywxMDUsOTUzLDEwNSw4MTI2LDEwNSw4OTAsMTA1LDEyMDUyMiwxMDUsMTIwNTgwLDEwNSwxMjA2MzgsMTA1LDEyMDY5NiwxMDUsMTIwNzU0LDEwNSwxMTEwLDEwNSw0MjU2NywxMDUsMTIzMSwxMDUsNDM4OTMsMTA1LDUwMjksMTA1LDcxODc1LDEwNSw2NTM1NCwxMDYsODUyMSwxMDYsMTE5ODQzLDEwNiwxMTk4OTUsMTA2LDExOTk0NywxMDYsMTE5OTk5LDEwNiwxMjAwNTEsMTA2LDEyMDEwMywxMDYsMTIwMTU1LDEwNiwxMjAyMDcsMTA2LDEyMDI1OSwxMDYsMTIwMzExLDEwNiwxMjAzNjMsMTA2LDEyMDQxNSwxMDYsMTIwNDY3LDEwNiwxMDExLDEwNiwxMTEyLDEwNiw2NTMyMiw3NCwxMTk4MTcsNzQsMTE5ODY5LDc0LDExOTkyMSw3NCwxMTk5NzMsNzQsMTIwMDI1LDc0LDEyMDA3Nyw3NCwxMjAxMjksNzQsMTIwMTgxLDc0LDEyMDIzMyw3NCwxMjAyODUsNzQsMTIwMzM3LDc0LDEyMDM4OSw3NCwxMjA0NDEsNzQsNDI5MzAsNzQsODk1LDc0LDEwMzIsNzQsNTAzNSw3NCw1MjYxLDc0LDQyMjAxLDc0LDExOTg0NCwxMDcsMTE5ODk2LDEwNywxMTk5NDgsMTA3LDEyMDAwMCwxMDcsMTIwMDUyLDEwNywxMjAxMDQsMTA3LDEyMDE1NiwxMDcsMTIwMjA4LDEwNywxMjAyNjAsMTA3LDEyMDMxMiwxMDcsMTIwMzY0LDEwNywxMjA0MTYsMTA3LDEyMDQ2OCwxMDcsODQ5MCw3NSw2NTMyMyw3NSwxMTk4MTgsNzUsMTE5ODcwLDc1LDExOTkyMiw3NSwxMTk5NzQsNzUsMTIwMDI2LDc1LDEyMDA3OCw3NSwxMjAxMzAsNzUsMTIwMTgyLDc1LDEyMDIzNCw3NSwxMjAyODYsNzUsMTIwMzM4LDc1LDEyMDM5MCw3NSwxMjA0NDIsNzUsOTIyLDc1LDEyMDQ5Nyw3NSwxMjA1NTUsNzUsMTIwNjEzLDc1LDEyMDY3MSw3NSwxMjA3MjksNzUsMTE0MTIsNzUsNTA5NCw3NSw1ODQ1LDc1LDQyMTk5LDc1LDY2ODQwLDc1LDE0NzIsMTA4LDg3MzksNzMsOTIxMyw3Myw2NTUxMiw3MywxNjMzLDEwOCwxNzc3LDczLDY2MzM2LDEwOCwxMjUxMjcsMTA4LDEyMDc4Myw3MywxMjA3OTMsNzMsMTIwODAzLDczLDEyMDgxMyw3MywxMjA4MjMsNzMsMTMwMDMzLDczLDY1MzIxLDczLDg1NDQsNzMsODQ2NCw3Myw4NDY1LDczLDExOTgxNiw3MywxMTk4NjgsNzMsMTE5OTIwLDczLDEyMDAyNCw3MywxMjAxMjgsNzMsMTIwMTgwLDczLDEyMDIzMiw3MywxMjAyODQsNzMsMTIwMzM2LDczLDEyMDM4OCw3MywxMjA0NDAsNzMsNjUzNTYsMTA4LDg1NzIsNzMsODQ2NywxMDgsMTE5ODQ1LDEwOCwxMTk4OTcsMTA4LDExOTk0OSwxMDgsMTIwMDAxLDEwOCwxMjAwNTMsMTA4LDEyMDEwNSw3MywxMjAxNTcsNzMsMTIwMjA5LDczLDEyMDI2MSw3MywxMjAzMTMsNzMsMTIwMzY1LDczLDEyMDQxNyw3MywxMjA0NjksNzMsNDQ4LDczLDEyMDQ5Niw3MywxMjA1NTQsNzMsMTIwNjEyLDczLDEyMDY3MCw3MywxMjA3MjgsNzMsMTE0MTAsNzMsMTAzMCw3MywxMjE2LDczLDE0OTMsMTA4LDE1MDMsMTA4LDE1NzUsMTA4LDEyNjQ2NCwxMDgsMTI2NTkyLDEwOCw2NTE2NiwxMDgsNjUxNjUsMTA4LDE5OTQsMTA4LDExNTk5LDczLDU4MjUsNzMsNDIyMjYsNzMsOTM5OTIsNzMsNjYxODYsMTI0LDY2MzEzLDEyNCwxMTkzMzgsNzYsODU1Niw3Niw4NDY2LDc2LDExOTgxOSw3NiwxMTk4NzEsNzYsMTE5OTIzLDc2LDEyMDAyNyw3NiwxMjAwNzksNzYsMTIwMTMxLDc2LDEyMDE4Myw3NiwxMjAyMzUsNzYsMTIwMjg3LDc2LDEyMDMzOSw3NiwxMjAzOTEsNzYsMTIwNDQzLDc2LDExNDcyLDc2LDUwODYsNzYsNTI5MCw3Niw0MjIwOSw3Niw5Mzk3NCw3Niw3MTg0Myw3Niw3MTg1OCw3Niw2NjU4Nyw3Niw2Njg1NCw3Niw2NTMyNSw3Nyw4NTU5LDc3LDg0OTksNzcsMTE5ODIwLDc3LDExOTg3Miw3NywxMTk5MjQsNzcsMTIwMDI4LDc3LDEyMDA4MCw3NywxMjAxMzIsNzcsMTIwMTg0LDc3LDEyMDIzNiw3NywxMjAyODgsNzcsMTIwMzQwLDc3LDEyMDM5Miw3NywxMjA0NDQsNzcsOTI0LDc3LDEyMDQ5OSw3NywxMjA1NTcsNzcsMTIwNjE1LDc3LDEyMDY3Myw3NywxMjA3MzEsNzcsMTAxOCw3NywxMTQxNiw3Nyw1MDQ3LDc3LDU2MTYsNzcsNTg0Niw3Nyw0MjIwNyw3Nyw2NjIyNCw3Nyw2NjMyMSw3NywxMTk4NDcsMTEwLDExOTg5OSwxMTAsMTE5OTUxLDExMCwxMjAwMDMsMTEwLDEyMDA1NSwxMTAsMTIwMTA3LDExMCwxMjAxNTksMTEwLDEyMDIxMSwxMTAsMTIwMjYzLDExMCwxMjAzMTUsMTEwLDEyMDM2NywxMTAsMTIwNDE5LDExMCwxMjA0NzEsMTEwLDE0MDAsMTEwLDE0MDQsMTEwLDY1MzI2LDc4LDg0NjksNzgsMTE5ODIxLDc4LDExOTg3Myw3OCwxMTk5MjUsNzgsMTE5OTc3LDc4LDEyMDAyOSw3OCwxMjAwODEsNzgsMTIwMTg1LDc4LDEyMDIzNyw3OCwxMjAyODksNzgsMTIwMzQxLDc4LDEyMDM5Myw3OCwxMjA0NDUsNzgsOTI1LDc4LDEyMDUwMCw3OCwxMjA1NTgsNzgsMTIwNjE2LDc4LDEyMDY3NCw3OCwxMjA3MzIsNzgsMTE0MTgsNzgsNDIyMDgsNzgsNjY4MzUsNzgsMzA3NCwxMTEsMzIwMiwxMTEsMzMzMCwxMTEsMzQ1OCwxMTEsMjQwNiwxMTEsMjY2MiwxMTEsMjc5MCwxMTEsMzA0NiwxMTEsMzE3NCwxMTEsMzMwMiwxMTEsMzQzMCwxMTEsMzY2NCwxMTEsMzc5MiwxMTEsNDE2MCwxMTEsMTYzNywxMTEsMTc4MSwxMTEsNjUzNTksMTExLDg1MDAsMTExLDExOTg0OCwxMTEsMTE5OTAwLDExMSwxMTk5NTIsMTExLDEyMDA1NiwxMTEsMTIwMTA4LDExMSwxMjAxNjAsMTExLDEyMDIxMiwxMTEsMTIwMjY0LDExMSwxMjAzMTYsMTExLDEyMDM2OCwxMTEsMTIwNDIwLDExMSwxMjA0NzIsMTExLDc0MzksMTExLDc0NDEsMTExLDQzODM3LDExMSw5NTksMTExLDEyMDUyOCwxMTEsMTIwNTg2LDExMSwxMjA2NDQsMTExLDEyMDcwMiwxMTEsMTIwNzYwLDExMSw5NjMsMTExLDEyMDUzMiwxMTEsMTIwNTkwLDExMSwxMjA2NDgsMTExLDEyMDcwNiwxMTEsMTIwNzY0LDExMSwxMTQyMywxMTEsNDM1MSwxMTEsMTQxMywxMTEsMTUwNSwxMTEsMTYwNywxMTEsMTI2NTAwLDExMSwxMjY1NjQsMTExLDEyNjU5NiwxMTEsNjUyNTksMTExLDY1MjYwLDExMSw2NTI1OCwxMTEsNjUyNTcsMTExLDE3MjYsMTExLDY0NDI4LDExMSw2NDQyOSwxMTEsNjQ0MjcsMTExLDY0NDI2LDExMSwxNzI5LDExMSw2NDQyNCwxMTEsNjQ0MjUsMTExLDY0NDIzLDExMSw2NDQyMiwxMTEsMTc0OSwxMTEsMzM2MCwxMTEsNDEyNSwxMTEsNjY3OTQsMTExLDcxODgwLDExMSw3MTg5NSwxMTEsNjY2MDQsMTExLDE5ODQsNzksMjUzNCw3OSwyOTE4LDc5LDEyMjk1LDc5LDcwODY0LDc5LDcxOTA0LDc5LDEyMDc4Miw3OSwxMjA3OTIsNzksMTIwODAyLDc5LDEyMDgxMiw3OSwxMjA4MjIsNzksMTMwMDMyLDc5LDY1MzI3LDc5LDExOTgyMiw3OSwxMTk4NzQsNzksMTE5OTI2LDc5LDExOTk3OCw3OSwxMjAwMzAsNzksMTIwMDgyLDc5LDEyMDEzNCw3OSwxMjAxODYsNzksMTIwMjM4LDc5LDEyMDI5MCw3OSwxMjAzNDIsNzksMTIwMzk0LDc5LDEyMDQ0Niw3OSw5MjcsNzksMTIwNTAyLDc5LDEyMDU2MCw3OSwxMjA2MTgsNzksMTIwNjc2LDc5LDEyMDczNCw3OSwxMTQyMiw3OSwxMzY1LDc5LDExNjA0LDc5LDQ4MTYsNzksMjg0OCw3OSw2Njc1NCw3OSw0MjIyNyw3OSw3MTg2MSw3OSw2NjE5NCw3OSw2NjIxOSw3OSw2NjU2NCw3OSw2NjgzOCw3OSw5MDc2LDExMiw2NTM2MCwxMTIsMTE5ODQ5LDExMiwxMTk5MDEsMTEyLDExOTk1MywxMTIsMTIwMDA1LDExMiwxMjAwNTcsMTEyLDEyMDEwOSwxMTIsMTIwMTYxLDExMiwxMjAyMTMsMTEyLDEyMDI2NSwxMTIsMTIwMzE3LDExMiwxMjAzNjksMTEyLDEyMDQyMSwxMTIsMTIwNDczLDExMiw5NjEsMTEyLDEyMDUzMCwxMTIsMTIwNTQ0LDExMiwxMjA1ODgsMTEyLDEyMDYwMiwxMTIsMTIwNjQ2LDExMiwxMjA2NjAsMTEyLDEyMDcwNCwxMTIsMTIwNzE4LDExMiwxMjA3NjIsMTEyLDEyMDc3NiwxMTIsMTE0MjcsMTEyLDY1MzI4LDgwLDg0NzMsODAsMTE5ODIzLDgwLDExOTg3NSw4MCwxMTk5MjcsODAsMTE5OTc5LDgwLDEyMDAzMSw4MCwxMjAwODMsODAsMTIwMTg3LDgwLDEyMDIzOSw4MCwxMjAyOTEsODAsMTIwMzQzLDgwLDEyMDM5NSw4MCwxMjA0NDcsODAsOTI5LDgwLDEyMDUwNCw4MCwxMjA1NjIsODAsMTIwNjIwLDgwLDEyMDY3OCw4MCwxMjA3MzYsODAsMTE0MjYsODAsNTA5MCw4MCw1MjI5LDgwLDQyMTkzLDgwLDY2MTk3LDgwLDExOTg1MCwxMTMsMTE5OTAyLDExMywxMTk5NTQsMTEzLDEyMDAwNiwxMTMsMTIwMDU4LDExMywxMjAxMTAsMTEzLDEyMDE2MiwxMTMsMTIwMjE0LDExMywxMjAyNjYsMTEzLDEyMDMxOCwxMTMsMTIwMzcwLDExMywxMjA0MjIsMTEzLDEyMDQ3NCwxMTMsMTMwNywxMTMsMTM3OSwxMTMsMTM4MiwxMTMsODQ3NCw4MSwxMTk4MjQsODEsMTE5ODc2LDgxLDExOTkyOCw4MSwxMTk5ODAsODEsMTIwMDMyLDgxLDEyMDA4NCw4MSwxMjAxODgsODEsMTIwMjQwLDgxLDEyMDI5Miw4MSwxMjAzNDQsODEsMTIwMzk2LDgxLDEyMDQ0OCw4MSwxMTYwNSw4MSwxMTk4NTEsMTE0LDExOTkwMywxMTQsMTE5OTU1LDExNCwxMjAwMDcsMTE0LDEyMDA1OSwxMTQsMTIwMTExLDExNCwxMjAxNjMsMTE0LDEyMDIxNSwxMTQsMTIwMjY3LDExNCwxMjAzMTksMTE0LDEyMDM3MSwxMTQsMTIwNDIzLDExNCwxMjA0NzUsMTE0LDQzODQ3LDExNCw0Mzg0OCwxMTQsNzQ2MiwxMTQsMTEzOTcsMTE0LDQzOTA1LDExNCwxMTkzMTgsODIsODQ3NSw4Miw4NDc2LDgyLDg0NzcsODIsMTE5ODI1LDgyLDExOTg3Nyw4MiwxMTk5MjksODIsMTIwMDMzLDgyLDEyMDE4OSw4MiwxMjAyNDEsODIsMTIwMjkzLDgyLDEyMDM0NSw4MiwxMjAzOTcsODIsMTIwNDQ5LDgyLDQyMiw4Miw1MDI1LDgyLDUwNzQsODIsNjY3NDAsODIsNTUxMSw4Miw0MjIxMSw4Miw5NDAwNSw4Miw2NTM2MywxMTUsMTE5ODUyLDExNSwxMTk5MDQsMTE1LDExOTk1NiwxMTUsMTIwMDA4LDExNSwxMjAwNjAsMTE1LDEyMDExMiwxMTUsMTIwMTY0LDExNSwxMjAyMTYsMTE1LDEyMDI2OCwxMTUsMTIwMzIwLDExNSwxMjAzNzIsMTE1LDEyMDQyNCwxMTUsMTIwNDc2LDExNSw0MjgwMSwxMTUsNDQ1LDExNSwxMTA5LDExNSw0Mzk0NiwxMTUsNzE4NzMsMTE1LDY2NjMyLDExNSw2NTMzMSw4MywxMTk4MjYsODMsMTE5ODc4LDgzLDExOTkzMCw4MywxMTk5ODIsODMsMTIwMDM0LDgzLDEyMDA4Niw4MywxMjAxMzgsODMsMTIwMTkwLDgzLDEyMDI0Miw4MywxMjAyOTQsODMsMTIwMzQ2LDgzLDEyMDM5OCw4MywxMjA0NTAsODMsMTAyOSw4MywxMzU5LDgzLDUwNzcsODMsNTA4Miw4Myw0MjIxMCw4Myw5NDAxMCw4Myw2NjE5OCw4Myw2NjU5Miw4MywxMTk4NTMsMTE2LDExOTkwNSwxMTYsMTE5OTU3LDExNiwxMjAwMDksMTE2LDEyMDA2MSwxMTYsMTIwMTEzLDExNiwxMjAxNjUsMTE2LDEyMDIxNywxMTYsMTIwMjY5LDExNiwxMjAzMjEsMTE2LDEyMDM3MywxMTYsMTIwNDI1LDExNiwxMjA0NzcsMTE2LDg4NjgsODQsMTAyMDEsODQsMTI4ODcyLDg0LDY1MzMyLDg0LDExOTgyNyw4NCwxMTk4NzksODQsMTE5OTMxLDg0LDExOTk4Myw4NCwxMjAwMzUsODQsMTIwMDg3LDg0LDEyMDEzOSw4NCwxMjAxOTEsODQsMTIwMjQzLDg0LDEyMDI5NSw4NCwxMjAzNDcsODQsMTIwMzk5LDg0LDEyMDQ1MSw4NCw5MzIsODQsMTIwNTA3LDg0LDEyMDU2NSw4NCwxMjA2MjMsODQsMTIwNjgxLDg0LDEyMDczOSw4NCwxMTQzMCw4NCw1MDI2LDg0LDQyMTk2LDg0LDkzOTYyLDg0LDcxODY4LDg0LDY2MTk5LDg0LDY2MjI1LDg0LDY2MzI1LDg0LDExOTg1NCwxMTcsMTE5OTA2LDExNywxMTk5NTgsMTE3LDEyMDAxMCwxMTcsMTIwMDYyLDExNywxMjAxMTQsMTE3LDEyMDE2NiwxMTcsMTIwMjE4LDExNywxMjAyNzAsMTE3LDEyMDMyMiwxMTcsMTIwMzc0LDExNywxMjA0MjYsMTE3LDEyMDQ3OCwxMTcsNDI5MTEsMTE3LDc0NTIsMTE3LDQzODU0LDExNyw0Mzg1OCwxMTcsNjUxLDExNyw5NjUsMTE3LDEyMDUzNCwxMTcsMTIwNTkyLDExNywxMjA2NTAsMTE3LDEyMDcwOCwxMTcsMTIwNzY2LDExNywxNDA1LDExNyw2NjgwNiwxMTcsNzE4OTYsMTE3LDg3NDYsODUsODg5OSw4NSwxMTk4MjgsODUsMTE5ODgwLDg1LDExOTkzMiw4NSwxMTk5ODQsODUsMTIwMDM2LDg1LDEyMDA4OCw4NSwxMjAxNDAsODUsMTIwMTkyLDg1LDEyMDI0NCw4NSwxMjAyOTYsODUsMTIwMzQ4LDg1LDEyMDQwMCw4NSwxMjA0NTIsODUsMTM1Nyw4NSw0NjA4LDg1LDY2NzY2LDg1LDUxOTYsODUsNDIyMjgsODUsOTQwMTgsODUsNzE4NjQsODUsODc0NCwxMTgsODg5NywxMTgsNjUzNjYsMTE4LDg1NjQsMTE4LDExOTg1NSwxMTgsMTE5OTA3LDExOCwxMTk5NTksMTE4LDEyMDAxMSwxMTgsMTIwMDYzLDExOCwxMjAxMTUsMTE4LDEyMDE2NywxMTgsMTIwMjE5LDExOCwxMjAyNzEsMTE4LDEyMDMyMywxMTgsMTIwMzc1LDExOCwxMjA0MjcsMTE4LDEyMDQ3OSwxMTgsNzQ1NiwxMTgsOTU3LDExOCwxMjA1MjYsMTE4LDEyMDU4NCwxMTgsMTIwNjQyLDExOCwxMjA3MDAsMTE4LDEyMDc1OCwxMTgsMTE0MSwxMTgsMTQ5NiwxMTgsNzE0MzAsMTE4LDQzOTQ1LDExOCw3MTg3MiwxMTgsMTE5MzA5LDg2LDE2MzksODYsMTc4Myw4Niw4NTQ4LDg2LDExOTgyOSw4NiwxMTk4ODEsODYsMTE5OTMzLDg2LDExOTk4NSw4NiwxMjAwMzcsODYsMTIwMDg5LDg2LDEyMDE0MSw4NiwxMjAxOTMsODYsMTIwMjQ1LDg2LDEyMDI5Nyw4NiwxMjAzNDksODYsMTIwNDAxLDg2LDEyMDQ1Myw4NiwxMTQwLDg2LDExNTc2LDg2LDUwODEsODYsNTE2Nyw4Niw0MjcxOSw4Niw0MjIxNCw4Niw5Mzk2MCw4Niw3MTg0MCw4Niw2Njg0NSw4Niw2MjMsMTE5LDExOTg1NiwxMTksMTE5OTA4LDExOSwxMTk5NjAsMTE5LDEyMDAxMiwxMTksMTIwMDY0LDExOSwxMjAxMTYsMTE5LDEyMDE2OCwxMTksMTIwMjIwLDExOSwxMjAyNzIsMTE5LDEyMDMyNCwxMTksMTIwMzc2LDExOSwxMjA0MjgsMTE5LDEyMDQ4MCwxMTksNzQ1NywxMTksMTEyMSwxMTksMTMwOSwxMTksMTM3NywxMTksNzE0MzQsMTE5LDcxNDM4LDExOSw3MTQzOSwxMTksNDM5MDcsMTE5LDcxOTE5LDg3LDcxOTEwLDg3LDExOTgzMCw4NywxMTk4ODIsODcsMTE5OTM0LDg3LDExOTk4Niw4NywxMjAwMzgsODcsMTIwMDkwLDg3LDEyMDE0Miw4NywxMjAxOTQsODcsMTIwMjQ2LDg3LDEyMDI5OCw4NywxMjAzNTAsODcsMTIwNDAyLDg3LDEyMDQ1NCw4NywxMzA4LDg3LDUwNDMsODcsNTA3Niw4Nyw0MjIxOCw4Nyw1NzQyLDEyMCwxMDUzOSwxMjAsMTA1NDAsMTIwLDEwNzk5LDEyMCw2NTM2OCwxMjAsODU2OSwxMjAsMTE5ODU3LDEyMCwxMTk5MDksMTIwLDExOTk2MSwxMjAsMTIwMDEzLDEyMCwxMjAwNjUsMTIwLDEyMDExNywxMjAsMTIwMTY5LDEyMCwxMjAyMjEsMTIwLDEyMDI3MywxMjAsMTIwMzI1LDEyMCwxMjAzNzcsMTIwLDEyMDQyOSwxMjAsMTIwNDgxLDEyMCw1NDQxLDEyMCw1NTAxLDEyMCw1NzQxLDg4LDk1ODcsODgsNjYzMzgsODgsNzE5MTYsODgsNjUzMzYsODgsODU1Myw4OCwxMTk4MzEsODgsMTE5ODgzLDg4LDExOTkzNSw4OCwxMTk5ODcsODgsMTIwMDM5LDg4LDEyMDA5MSw4OCwxMjAxNDMsODgsMTIwMTk1LDg4LDEyMDI0Nyw4OCwxMjAyOTksODgsMTIwMzUxLDg4LDEyMDQwMyw4OCwxMjA0NTUsODgsNDI5MzEsODgsOTM1LDg4LDEyMDUxMCw4OCwxMjA1NjgsODgsMTIwNjI2LDg4LDEyMDY4NCw4OCwxMjA3NDIsODgsMTE0MzYsODgsMTE2MTMsODgsNTgxNSw4OCw0MjIxOSw4OCw2NjE5Miw4OCw2NjIyOCw4OCw2NjMyNyw4OCw2Njg1NSw4OCw2MTEsMTIxLDc1NjQsMTIxLDY1MzY5LDEyMSwxMTk4NTgsMTIxLDExOTkxMCwxMjEsMTE5OTYyLDEyMSwxMjAwMTQsMTIxLDEyMDA2NiwxMjEsMTIwMTE4LDEyMSwxMjAxNzAsMTIxLDEyMDIyMiwxMjEsMTIwMjc0LDEyMSwxMjAzMjYsMTIxLDEyMDM3OCwxMjEsMTIwNDMwLDEyMSwxMjA0ODIsMTIxLDY1NSwxMjEsNzkzNSwxMjEsNDM4NjYsMTIxLDk0NywxMjEsODUwOSwxMjEsMTIwNTE2LDEyMSwxMjA1NzQsMTIxLDEyMDYzMiwxMjEsMTIwNjkwLDEyMSwxMjA3NDgsMTIxLDExOTksMTIxLDQzMjcsMTIxLDcxOTAwLDEyMSw2NTMzNyw4OSwxMTk4MzIsODksMTE5ODg0LDg5LDExOTkzNiw4OSwxMTk5ODgsODksMTIwMDQwLDg5LDEyMDA5Miw4OSwxMjAxNDQsODksMTIwMTk2LDg5LDEyMDI0OCw4OSwxMjAzMDAsODksMTIwMzUyLDg5LDEyMDQwNCw4OSwxMjA0NTYsODksOTMzLDg5LDk3OCw4OSwxMjA1MDgsODksMTIwNTY2LDg5LDEyMDYyNCw4OSwxMjA2ODIsODksMTIwNzQwLDg5LDExNDMyLDg5LDExOTgsODksNTAzMyw4OSw1MDUzLDg5LDQyMjIwLDg5LDk0MDE5LDg5LDcxODQ0LDg5LDY2MjI2LDg5LDExOTg1OSwxMjIsMTE5OTExLDEyMiwxMTk5NjMsMTIyLDEyMDAxNSwxMjIsMTIwMDY3LDEyMiwxMjAxMTksMTIyLDEyMDE3MSwxMjIsMTIwMjIzLDEyMiwxMjAyNzUsMTIyLDEyMDMyNywxMjIsMTIwMzc5LDEyMiwxMjA0MzEsMTIyLDEyMDQ4MywxMjIsNzQ1OCwxMjIsNDM5MjMsMTIyLDcxODc2LDEyMiw2NjI5Myw5MCw3MTkwOSw5MCw2NTMzOCw5MCw4NDg0LDkwLDg0ODgsOTAsMTE5ODMzLDkwLDExOTg4NSw5MCwxMTk5MzcsOTAsMTE5OTg5LDkwLDEyMDA0MSw5MCwxMjAxOTcsOTAsMTIwMjQ5LDkwLDEyMDMwMSw5MCwxMjAzNTMsOTAsMTIwNDA1LDkwLDEyMDQ1Nyw5MCw5MTgsOTAsMTIwNDkzLDkwLDEyMDU1MSw5MCwxMjA2MDksOTAsMTIwNjY3LDkwLDEyMDcyNSw5MCw1MDU5LDkwLDQyMjA0LDkwLDcxODQ5LDkwLDY1MjgyLDM0LDY1Mjg0LDM2LDY1Mjg1LDM3LDY1Mjg2LDM4LDY1MjkwLDQyLDY1MjkxLDQzLDY1Mjk0LDQ2LDY1Mjk1LDQ3LDY1Mjk2LDQ4LDY1Mjk3LDQ5LDY1Mjk4LDUwLDY1Mjk5LDUxLDY1MzAwLDUyLDY1MzAxLDUzLDY1MzAyLDU0LDY1MzAzLDU1LDY1MzA0LDU2LDY1MzA1LDU3LDY1MzA4LDYwLDY1MzA5LDYxLDY1MzEwLDYyLDY1MzEyLDY0LDY1MzE2LDY4LDY1MzE4LDcwLDY1MzE5LDcxLDY1MzI0LDc2LDY1MzI5LDgxLDY1MzMwLDgyLDY1MzMzLDg1LDY1MzM0LDg2LDY1MzM1LDg3LDY1MzQzLDk1LDY1MzQ2LDk4LDY1MzQ4LDEwMCw2NTM1MCwxMDIsNjUzNTUsMTA3LDY1MzU3LDEwOSw2NTM1OCwxMTAsNjUzNjEsMTEzLDY1MzYyLDExNCw2NTM2NCwxMTYsNjUzNjUsMTE3LDY1MzY3LDExOSw2NTM3MCwxMjIsNjUzNzEsMTIzLDY1MzczLDEyNSwxMTk4NDYsMTA5XSxcXFwiX2RlZmF1bHRcXFwiOlsxNjAsMzIsODIxMSw0NSw2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjE3LDk2LDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwiY3NcXFwiOls2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODIxNiw5Niw4MjE3LDk2LDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDEwOTMsMTIwLDEwNjEsODgsMTA5MSwxMjEsMTA1OSw4OSw2NTI4MywzNSw2NTI4OCw0MCw2NTI4OSw0MSw2NTI5Miw0NCw2NTMwNyw1OSw2NTMxMSw2M10sXFxcImRlXFxcIjpbNjUzNzQsMTI2LDY1MzA2LDU4LDY1MjgxLDMzLDgyMTYsOTYsODIxNyw5Niw4MjQ1LDk2LDE4MCw5NiwxMjQ5NCw0NywxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDMwNSwxMDUsMTA1MCw3NSw5MjEsNzMsMTA1Miw3NywxMDg2LDExMSwxMDU0LDc5LDEwMDksMTEyLDEwODgsMTEyLDEwNTYsODAsMTA3NSwxMTQsMTA1OCw4NCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJlc1xcXCI6WzgyMTEsNDUsNjUzNzQsMTI2LDY1MzA2LDU4LDY1MjgxLDMzLDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJmclxcXCI6WzY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyNDUsOTYsMTI0OTQsNDcsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJpdFxcXCI6WzE2MCwzMiw4MjExLDQ1LDY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1Mjg4LDQwLDY1Mjg5LDQxLDY1MjkyLDQ0LDY1MzA3LDU5LDY1MzExLDYzXSxcXFwiamFcXFwiOls4MjExLDQ1LDY1MzA2LDU4LDY1MjgxLDMzLDgyMTYsOTYsODIxNyw5Niw4MjQ1LDk2LDE4MCw5NiwxMDQ3LDUxLDEwNzMsNTQsMTA3Miw5NywxMDQwLDY1LDEwNjgsOTgsMTA0Miw2NiwxMDg5LDk5LDEwNTcsNjcsMTA3NywxMDEsMTA0NSw2OSwxMDUzLDcyLDMwNSwxMDUsMTA1MCw3NSw5MjEsNzMsMTA1Miw3NywxMDg2LDExMSwxMDU0LDc5LDEwMDksMTEyLDEwODgsMTEyLDEwNTYsODAsMTA3NSwxMTQsMTA1OCw4NCwyMTUsMTIwLDEwOTMsMTIwLDEwNjEsODgsMTA5MSwxMjEsMTA1OSw4OSw2NTI4MywzNSw2NTI5Miw0NCw2NTMwNyw1OV0sXFxcImtvXFxcIjpbODIxMSw0NSw2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODI0NSw5NiwxODAsOTYsMTI0OTQsNDcsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJwbFxcXCI6WzY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyMTcsOTYsODI0NSw5NiwxODAsOTYsMTI0OTQsNDcsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJwdC1CUlxcXCI6WzY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyMTcsOTYsODI0NSw5NiwxODAsOTYsMTI0OTQsNDcsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJxcHMtcGxvY1xcXCI6WzE2MCwzMiw4MjExLDQ1LDY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyMTcsOTYsODI0NSw5NiwxODAsOTYsMTI0OTQsNDcsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODMsMzUsNjUyODgsNDAsNjUyODksNDEsNjUyOTIsNDQsNjUzMDcsNTksNjUzMTEsNjNdLFxcXCJydVxcXCI6WzY1Mzc0LDEyNiw2NTMwNiw1OCw2NTI4MSwzMyw4MjE2LDk2LDgyMTcsOTYsODI0NSw5NiwxODAsOTYsMTI0OTQsNDcsMzA1LDEwNSw5MjEsNzMsMTAwOSwxMTIsMjE1LDEyMCw2NTI4MywzNSw2NTI4OCw0MCw2NTI4OSw0MSw2NTI5Miw0NCw2NTMwNyw1OSw2NTMxMSw2M10sXFxcInRyXFxcIjpbMTYwLDMyLDgyMTEsNDUsNjUzNzQsMTI2LDY1MzA2LDU4LDY1MjgxLDMzLDgyNDUsOTYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMTA1MCw3NSw5MjEsNzMsMTA1Miw3NywxMDg2LDExMSwxMDU0LDc5LDEwMDksMTEyLDEwODgsMTEyLDEwNTYsODAsMTA3NSwxMTQsMTA1OCw4NCwyMTUsMTIwLDEwOTMsMTIwLDEwNjEsODgsMTA5MSwxMjEsMTA1OSw4OSw2NTI4MywzNSw2NTI4OCw0MCw2NTI4OSw0MSw2NTI5Miw0NCw2NTMwNyw1OSw2NTMxMSw2M10sXFxcInpoLWhhbnNcXFwiOls2NTM3NCwxMjYsNjUzMDYsNTgsNjUyODEsMzMsODI0NSw5NiwxODAsOTYsMTI0OTQsNDcsMTA0Nyw1MSwxMDczLDU0LDEwNzIsOTcsMTA0MCw2NSwxMDY4LDk4LDEwNDIsNjYsMTA4OSw5OSwxMDU3LDY3LDEwNzcsMTAxLDEwNDUsNjksMTA1Myw3MiwzMDUsMTA1LDEwNTAsNzUsOTIxLDczLDEwNTIsNzcsMTA4NiwxMTEsMTA1NCw3OSwxMDA5LDExMiwxMDg4LDExMiwxMDU2LDgwLDEwNzUsMTE0LDEwNTgsODQsMjE1LDEyMCwxMDkzLDEyMCwxMDYxLDg4LDEwOTEsMTIxLDEwNTksODksNjUyODgsNDAsNjUyODksNDFdLFxcXCJ6aC1oYW50XFxcIjpbODIxMSw0NSw2NTM3NCwxMjYsMTgwLDk2LDEyNDk0LDQ3LDEwNDcsNTEsMTA3Myw1NCwxMDcyLDk3LDEwNDAsNjUsMTA2OCw5OCwxMDQyLDY2LDEwODksOTksMTA1Nyw2NywxMDc3LDEwMSwxMDQ1LDY5LDEwNTMsNzIsMzA1LDEwNSwxMDUwLDc1LDkyMSw3MywxMDUyLDc3LDEwODYsMTExLDEwNTQsNzksMTAwOSwxMTIsMTA4OCwxMTIsMTA1Niw4MCwxMDc1LDExNCwxMDU4LDg0LDIxNSwxMjAsMTA5MywxMjAsMTA2MSw4OCwxMDkxLDEyMSwxMDU5LDg5LDY1MjgzLDM1LDY1MzA3LDU5XX0nKTtcbn0pO1xuQW1iaWd1b3VzQ2hhcmFjdGVycy5jYWNoZSA9IG5ldyBMUlVDYWNoZWRGdW5jdGlvbih7IGdldENhY2hlS2V5OiBKU09OLnN0cmluZ2lmeSB9LCAobG9jYWxlcykgPT4ge1xuICAgIGZ1bmN0aW9uIGFycmF5VG9NYXAoYXJyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQoYXJyW2ldLCBhcnJbaSArIDFdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZU1hcHMobWFwMSwgbWFwMikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKG1hcDEpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBtYXAyKSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludGVyc2VjdE1hcHMobWFwMSwgbWFwMikge1xuICAgICAgICBpZiAoIW1hcDEpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXAyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbWFwMSkge1xuICAgICAgICAgICAgaWYgKG1hcDIuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBfYS5hbWJpZ3VvdXNDaGFyYWN0ZXJEYXRhLnZhbHVlO1xuICAgIGxldCBmaWx0ZXJlZExvY2FsZXMgPSBsb2NhbGVzLmZpbHRlcigobCkgPT4gIWwuc3RhcnRzV2l0aCgnXycpICYmIGwgaW4gZGF0YSk7XG4gICAgaWYgKGZpbHRlcmVkTG9jYWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZmlsdGVyZWRMb2NhbGVzID0gWydfZGVmYXVsdCddO1xuICAgIH1cbiAgICBsZXQgbGFuZ3VhZ2VTcGVjaWZpY01hcCA9IHVuZGVmaW5lZDtcbiAgICBmb3IgKGNvbnN0IGxvY2FsZSBvZiBmaWx0ZXJlZExvY2FsZXMpIHtcbiAgICAgICAgY29uc3QgbWFwID0gYXJyYXlUb01hcChkYXRhW2xvY2FsZV0pO1xuICAgICAgICBsYW5ndWFnZVNwZWNpZmljTWFwID0gaW50ZXJzZWN0TWFwcyhsYW5ndWFnZVNwZWNpZmljTWFwLCBtYXApO1xuICAgIH1cbiAgICBjb25zdCBjb21tb25NYXAgPSBhcnJheVRvTWFwKGRhdGFbJ19jb21tb24nXSk7XG4gICAgY29uc3QgbWFwID0gbWVyZ2VNYXBzKGNvbW1vbk1hcCwgbGFuZ3VhZ2VTcGVjaWZpY01hcCk7XG4gICAgcmV0dXJuIG5ldyBfYShtYXApO1xufSk7XG5BbWJpZ3VvdXNDaGFyYWN0ZXJzLl9sb2NhbGVzID0gbmV3IExhenkoKCkgPT4gT2JqZWN0LmtleXMoX2EuYW1iaWd1b3VzQ2hhcmFjdGVyRGF0YS52YWx1ZSkuZmlsdGVyKChrKSA9PiAhay5zdGFydHNXaXRoKCdfJykpKTtcbmV4cG9ydCBjbGFzcyBJbnZpc2libGVDaGFyYWN0ZXJzIHtcbiAgICBzdGF0aWMgZ2V0UmF3RGF0YSgpIHtcbiAgICAgICAgLy8gR2VuZXJhdGVkIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9oZWRpZXQvdnNjb2RlLXVuaWNvZGUtZGF0YVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSgnWzksMTAsMTEsMTIsMTMsMzIsMTI3LDE2MCwxNzMsODQ3LDE1NjQsNDQ0Nyw0NDQ4LDYwNjgsNjA2OSw2MTU1LDYxNTYsNjE1Nyw2MTU4LDczNTUsNzM1Niw4MTkyLDgxOTMsODE5NCw4MTk1LDgxOTYsODE5Nyw4MTk4LDgxOTksODIwMCw4MjAxLDgyMDIsODIwMyw4MjA0LDgyMDUsODIwNiw4MjA3LDgyMzQsODIzNSw4MjM2LDgyMzcsODIzOCw4MjM5LDgyODcsODI4OCw4Mjg5LDgyOTAsODI5MSw4MjkyLDgyOTMsODI5NCw4Mjk1LDgyOTYsODI5Nyw4Mjk4LDgyOTksODMwMCw4MzAxLDgzMDIsODMwMywxMDI0MCwxMjI4OCwxMjY0NCw2NTAyNCw2NTAyNSw2NTAyNiw2NTAyNyw2NTAyOCw2NTAyOSw2NTAzMCw2NTAzMSw2NTAzMiw2NTAzMyw2NTAzNCw2NTAzNSw2NTAzNiw2NTAzNyw2NTAzOCw2NTAzOSw2NTI3OSw2NTQ0MCw2NTUyMCw2NTUyMSw2NTUyMiw2NTUyMyw2NTUyNCw2NTUyNSw2NTUyNiw2NTUyNyw2NTUyOCw2NTUzMiw3ODg0NCwxMTkxNTUsMTE5MTU2LDExOTE1NywxMTkxNTgsMTE5MTU5LDExOTE2MCwxMTkxNjEsMTE5MTYyLDkxNzUwNCw5MTc1MDUsOTE3NTA2LDkxNzUwNyw5MTc1MDgsOTE3NTA5LDkxNzUxMCw5MTc1MTEsOTE3NTEyLDkxNzUxMyw5MTc1MTQsOTE3NTE1LDkxNzUxNiw5MTc1MTcsOTE3NTE4LDkxNzUxOSw5MTc1MjAsOTE3NTIxLDkxNzUyMiw5MTc1MjMsOTE3NTI0LDkxNzUyNSw5MTc1MjYsOTE3NTI3LDkxNzUyOCw5MTc1MjksOTE3NTMwLDkxNzUzMSw5MTc1MzIsOTE3NTMzLDkxNzUzNCw5MTc1MzUsOTE3NTM2LDkxNzUzNyw5MTc1MzgsOTE3NTM5LDkxNzU0MCw5MTc1NDEsOTE3NTQyLDkxNzU0Myw5MTc1NDQsOTE3NTQ1LDkxNzU0Niw5MTc1NDcsOTE3NTQ4LDkxNzU0OSw5MTc1NTAsOTE3NTUxLDkxNzU1Miw5MTc1NTMsOTE3NTU0LDkxNzU1NSw5MTc1NTYsOTE3NTU3LDkxNzU1OCw5MTc1NTksOTE3NTYwLDkxNzU2MSw5MTc1NjIsOTE3NTYzLDkxNzU2NCw5MTc1NjUsOTE3NTY2LDkxNzU2Nyw5MTc1NjgsOTE3NTY5LDkxNzU3MCw5MTc1NzEsOTE3NTcyLDkxNzU3Myw5MTc1NzQsOTE3NTc1LDkxNzU3Niw5MTc1NzcsOTE3NTc4LDkxNzU3OSw5MTc1ODAsOTE3NTgxLDkxNzU4Miw5MTc1ODMsOTE3NTg0LDkxNzU4NSw5MTc1ODYsOTE3NTg3LDkxNzU4OCw5MTc1ODksOTE3NTkwLDkxNzU5MSw5MTc1OTIsOTE3NTkzLDkxNzU5NCw5MTc1OTUsOTE3NTk2LDkxNzU5Nyw5MTc1OTgsOTE3NTk5LDkxNzYwMCw5MTc2MDEsOTE3NjAyLDkxNzYwMyw5MTc2MDQsOTE3NjA1LDkxNzYwNiw5MTc2MDcsOTE3NjA4LDkxNzYwOSw5MTc2MTAsOTE3NjExLDkxNzYxMiw5MTc2MTMsOTE3NjE0LDkxNzYxNSw5MTc2MTYsOTE3NjE3LDkxNzYxOCw5MTc2MTksOTE3NjIwLDkxNzYyMSw5MTc2MjIsOTE3NjIzLDkxNzYyNCw5MTc2MjUsOTE3NjI2LDkxNzYyNyw5MTc2MjgsOTE3NjI5LDkxNzYzMCw5MTc2MzEsOTE3NzYwLDkxNzc2MSw5MTc3NjIsOTE3NzYzLDkxNzc2NCw5MTc3NjUsOTE3NzY2LDkxNzc2Nyw5MTc3NjgsOTE3NzY5LDkxNzc3MCw5MTc3NzEsOTE3NzcyLDkxNzc3Myw5MTc3NzQsOTE3Nzc1LDkxNzc3Niw5MTc3NzcsOTE3Nzc4LDkxNzc3OSw5MTc3ODAsOTE3NzgxLDkxNzc4Miw5MTc3ODMsOTE3Nzg0LDkxNzc4NSw5MTc3ODYsOTE3Nzg3LDkxNzc4OCw5MTc3ODksOTE3NzkwLDkxNzc5MSw5MTc3OTIsOTE3NzkzLDkxNzc5NCw5MTc3OTUsOTE3Nzk2LDkxNzc5Nyw5MTc3OTgsOTE3Nzk5LDkxNzgwMCw5MTc4MDEsOTE3ODAyLDkxNzgwMyw5MTc4MDQsOTE3ODA1LDkxNzgwNiw5MTc4MDcsOTE3ODA4LDkxNzgwOSw5MTc4MTAsOTE3ODExLDkxNzgxMiw5MTc4MTMsOTE3ODE0LDkxNzgxNSw5MTc4MTYsOTE3ODE3LDkxNzgxOCw5MTc4MTksOTE3ODIwLDkxNzgyMSw5MTc4MjIsOTE3ODIzLDkxNzgyNCw5MTc4MjUsOTE3ODI2LDkxNzgyNyw5MTc4MjgsOTE3ODI5LDkxNzgzMCw5MTc4MzEsOTE3ODMyLDkxNzgzMyw5MTc4MzQsOTE3ODM1LDkxNzgzNiw5MTc4MzcsOTE3ODM4LDkxNzgzOSw5MTc4NDAsOTE3ODQxLDkxNzg0Miw5MTc4NDMsOTE3ODQ0LDkxNzg0NSw5MTc4NDYsOTE3ODQ3LDkxNzg0OCw5MTc4NDksOTE3ODUwLDkxNzg1MSw5MTc4NTIsOTE3ODUzLDkxNzg1NCw5MTc4NTUsOTE3ODU2LDkxNzg1Nyw5MTc4NTgsOTE3ODU5LDkxNzg2MCw5MTc4NjEsOTE3ODYyLDkxNzg2Myw5MTc4NjQsOTE3ODY1LDkxNzg2Niw5MTc4NjcsOTE3ODY4LDkxNzg2OSw5MTc4NzAsOTE3ODcxLDkxNzg3Miw5MTc4NzMsOTE3ODc0LDkxNzg3NSw5MTc4NzYsOTE3ODc3LDkxNzg3OCw5MTc4NzksOTE3ODgwLDkxNzg4MSw5MTc4ODIsOTE3ODgzLDkxNzg4NCw5MTc4ODUsOTE3ODg2LDkxNzg4Nyw5MTc4ODgsOTE3ODg5LDkxNzg5MCw5MTc4OTEsOTE3ODkyLDkxNzg5Myw5MTc4OTQsOTE3ODk1LDkxNzg5Niw5MTc4OTcsOTE3ODk4LDkxNzg5OSw5MTc5MDAsOTE3OTAxLDkxNzkwMiw5MTc5MDMsOTE3OTA0LDkxNzkwNSw5MTc5MDYsOTE3OTA3LDkxNzkwOCw5MTc5MDksOTE3OTEwLDkxNzkxMSw5MTc5MTIsOTE3OTEzLDkxNzkxNCw5MTc5MTUsOTE3OTE2LDkxNzkxNyw5MTc5MTgsOTE3OTE5LDkxNzkyMCw5MTc5MjEsOTE3OTIyLDkxNzkyMyw5MTc5MjQsOTE3OTI1LDkxNzkyNiw5MTc5MjcsOTE3OTI4LDkxNzkyOSw5MTc5MzAsOTE3OTMxLDkxNzkzMiw5MTc5MzMsOTE3OTM0LDkxNzkzNSw5MTc5MzYsOTE3OTM3LDkxNzkzOCw5MTc5MzksOTE3OTQwLDkxNzk0MSw5MTc5NDIsOTE3OTQzLDkxNzk0NCw5MTc5NDUsOTE3OTQ2LDkxNzk0Nyw5MTc5NDgsOTE3OTQ5LDkxNzk1MCw5MTc5NTEsOTE3OTUyLDkxNzk1Myw5MTc5NTQsOTE3OTU1LDkxNzk1Niw5MTc5NTcsOTE3OTU4LDkxNzk1OSw5MTc5NjAsOTE3OTYxLDkxNzk2Miw5MTc5NjMsOTE3OTY0LDkxNzk2NSw5MTc5NjYsOTE3OTY3LDkxNzk2OCw5MTc5NjksOTE3OTcwLDkxNzk3MSw5MTc5NzIsOTE3OTczLDkxNzk3NCw5MTc5NzUsOTE3OTc2LDkxNzk3Nyw5MTc5NzgsOTE3OTc5LDkxNzk4MCw5MTc5ODEsOTE3OTgyLDkxNzk4Myw5MTc5ODQsOTE3OTg1LDkxNzk4Niw5MTc5ODcsOTE3OTg4LDkxNzk4OSw5MTc5OTAsOTE3OTkxLDkxNzk5Miw5MTc5OTMsOTE3OTk0LDkxNzk5NSw5MTc5OTYsOTE3OTk3LDkxNzk5OCw5MTc5OTldJyk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXREYXRhKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgU2V0KEludmlzaWJsZUNoYXJhY3RlcnMuZ2V0UmF3RGF0YSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG4gICAgc3RhdGljIGlzSW52aXNpYmxlQ2hhcmFjdGVyKGNvZGVQb2ludCkge1xuICAgICAgICByZXR1cm4gSW52aXNpYmxlQ2hhcmFjdGVycy5nZXREYXRhKCkuaGFzKGNvZGVQb2ludCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgY29kZVBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIEludmlzaWJsZUNoYXJhY3RlcnMuZ2V0RGF0YSgpO1xuICAgIH1cbn1cbkludmlzaWJsZUNoYXJhY3RlcnMuX2RhdGEgPSB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOlsiX2EiLCJMUlVDYWNoZWRGdW5jdGlvbiIsIkxhenkiLCJpc0ZhbHN5T3JXaGl0ZXNwYWNlIiwic3RyIiwidHJpbSIsImxlbmd0aCIsIl9mb3JtYXRSZWdleHAiLCJmb3JtYXQiLCJ2YWx1ZSIsImFyZ3MiLCJyZXBsYWNlIiwibWF0Y2giLCJncm91cCIsImlkeCIsInBhcnNlSW50IiwiaXNOYU4iLCJodG1sQXR0cmlidXRlRW5jb2RlVmFsdWUiLCJjaCIsImVzY2FwZSIsImh0bWwiLCJlc2NhcGVSZWdFeHBDaGFyYWN0ZXJzIiwiaGF5c3RhY2siLCJuZWVkbGUiLCJ0cmltbWVkIiwibHRyaW0iLCJydHJpbSIsIm5lZWRsZUxlbiIsIm9mZnNldCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJoYXlzdGFja0xlbiIsImxhc3RJbmRleE9mIiwiY29udmVydFNpbXBsZTJSZWdFeHBQYXR0ZXJuIiwicGF0dGVybiIsInN0cmlwV2lsZGNhcmRzIiwiY3JlYXRlUmVnRXhwIiwic2VhcmNoU3RyaW5nIiwiaXNSZWdleCIsIm9wdGlvbnMiLCJFcnJvciIsIndob2xlV29yZCIsInRlc3QiLCJjaGFyQXQiLCJtb2RpZmllcnMiLCJnbG9iYWwiLCJtYXRjaENhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwiUmVnRXhwIiwicmVnRXhwTGVhZHNUb0VuZGxlc3NMb29wIiwicmVnZXhwIiwic291cmNlIiwiZXhlYyIsImxhc3RJbmRleCIsInNwbGl0TGluZXMiLCJzcGxpdCIsInNwbGl0TGluZXNJbmNsdWRlU2VwYXJhdG9ycyIsIl9iIiwibGluZXNXaXRoU2VwYXJhdG9ycyIsInNwbGl0TGluZXNBbmRTZXBhcmF0b3JzIiwiaSIsIk1hdGgiLCJjZWlsIiwicHVzaCIsImZpcnN0Tm9uV2hpdGVzcGFjZUluZGV4IiwibGVuIiwiY2hDb2RlIiwiY2hhckNvZGVBdCIsImdldExlYWRpbmdXaGl0ZXNwYWNlIiwic3RhcnQiLCJlbmQiLCJsYXN0Tm9uV2hpdGVzcGFjZUluZGV4Iiwic3RhcnRJbmRleCIsImNvbXBhcmUiLCJhIiwiYiIsImNvbXBhcmVTdWJzdHJpbmciLCJhU3RhcnQiLCJhRW5kIiwiYlN0YXJ0IiwiYkVuZCIsImNvZGVBIiwiY29kZUIiLCJhTGVuIiwiYkxlbiIsImNvbXBhcmVJZ25vcmVDYXNlIiwiY29tcGFyZVN1YnN0cmluZ0lnbm9yZUNhc2UiLCJ0b0xvd2VyQ2FzZSIsImlzTG93ZXJBc2NpaUxldHRlciIsImRpZmYiLCJpc0FzY2lpRGlnaXQiLCJjb2RlIiwiaXNVcHBlckFzY2lpTGV0dGVyIiwiZXF1YWxzSWdub3JlQ2FzZSIsInN0YXJ0c1dpdGhJZ25vcmVDYXNlIiwiY2FuZGlkYXRlIiwiY2FuZGlkYXRlTGVuZ3RoIiwiY29tbW9uUHJlZml4TGVuZ3RoIiwibWluIiwiY29tbW9uU3VmZml4TGVuZ3RoIiwiYUxhc3RJbmRleCIsImJMYXN0SW5kZXgiLCJpc0hpZ2hTdXJyb2dhdGUiLCJjaGFyQ29kZSIsImlzTG93U3Vycm9nYXRlIiwiY29tcHV0ZUNvZGVQb2ludCIsImhpZ2hTdXJyb2dhdGUiLCJsb3dTdXJyb2dhdGUiLCJnZXROZXh0Q29kZVBvaW50IiwibmV4dENoYXJDb2RlIiwiZ2V0UHJldkNvZGVQb2ludCIsInByZXZDaGFyQ29kZSIsIkNvZGVQb2ludEl0ZXJhdG9yIiwiX29mZnNldCIsImNvbnN0cnVjdG9yIiwiX3N0ciIsIl9sZW4iLCJzZXRPZmZzZXQiLCJwcmV2Q29kZVBvaW50IiwiY29kZVBvaW50IiwibmV4dENvZGVQb2ludCIsImVvbCIsIkdyYXBoZW1lSXRlcmF0b3IiLCJfaXRlcmF0b3IiLCJuZXh0R3JhcGhlbWVMZW5ndGgiLCJncmFwaGVtZUJyZWFrVHJlZSIsIkdyYXBoZW1lQnJlYWtUcmVlIiwiZ2V0SW5zdGFuY2UiLCJpdGVyYXRvciIsImluaXRpYWxPZmZzZXQiLCJncmFwaGVtZUJyZWFrVHlwZSIsImdldEdyYXBoZW1lQnJlYWtUeXBlIiwibmV4dEdyYXBoZW1lQnJlYWtUeXBlIiwiYnJlYWtCZXR3ZWVuR3JhcGhlbWVCcmVha1R5cGUiLCJwcmV2R3JhcGhlbWVMZW5ndGgiLCJwcmV2R3JhcGhlbWVCcmVha1R5cGUiLCJuZXh0Q2hhckxlbmd0aCIsInByZXZDaGFyTGVuZ3RoIiwiZ2V0Q2hhckNvbnRhaW5pbmdPZmZzZXQiLCJlbmRPZmZzZXQiLCJzdGFydE9mZnNldCIsIkNPTlRBSU5TX1JUTCIsInVuZGVmaW5lZCIsIm1ha2VDb250YWluc1J0bCIsImNvbnRhaW5zUlRMIiwiSVNfQkFTSUNfQVNDSUkiLCJpc0Jhc2ljQVNDSUkiLCJVTlVTVUFMX0xJTkVfVEVSTUlOQVRPUlMiLCJjb250YWluc1VudXN1YWxMaW5lVGVybWluYXRvcnMiLCJpc0Z1bGxXaWR0aENoYXJhY3RlciIsImlzRW1vamlJbXByZWNpc2UiLCJ4IiwiVVRGOF9CT01fQ0hBUkFDVEVSIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic3RhcnRzV2l0aFVURjhCT00iLCJjb250YWluc1VwcGVyY2FzZUNoYXJhY3RlciIsInRhcmdldCIsImlnbm9yZUVzY2FwZWRDaGFycyIsInNpbmdsZUxldHRlckhhc2giLCJuIiwiTEVUVEVSU19DTlQiLCJicmVha1R5cGVBIiwiYnJlYWtUeXBlQiIsIl9JTlNUQU5DRSIsIl9kYXRhIiwiZ2V0R3JhcGhlbWVCcmVha1Jhd0RhdGEiLCJkYXRhIiwibm9kZUNvdW50Iiwibm9kZUluZGV4IiwiSlNPTiIsInBhcnNlIiwiZ2V0TGVmdERlbGV0ZU9mZnNldCIsImVtb2ppT2Zmc2V0IiwiZ2V0T2Zmc2V0QmVmb3JlTGFzdEVtb2ppQ29tcG9uZW50IiwiaXNFbW9qaU1vZGlmaWVyIiwicmVzdWx0T2Zmc2V0Iiwib3B0aW9uYWxad2pDb2RlUG9pbnQiLCJub0JyZWFrV2hpdGVzcGFjZSIsIkFtYmlndW91c0NoYXJhY3RlcnMiLCJsb2NhbGVzIiwiY2FjaGUiLCJnZXQiLCJBcnJheSIsImZyb20iLCJnZXRMb2NhbGVzIiwiX2xvY2FsZXMiLCJjb25mdXNhYmxlRGljdGlvbmFyeSIsImlzQW1iaWd1b3VzIiwiaGFzIiwiZ2V0UHJpbWFyeUNvbmZ1c2FibGUiLCJnZXRDb25mdXNhYmxlQ29kZVBvaW50cyIsIlNldCIsImtleXMiLCJhbWJpZ3VvdXNDaGFyYWN0ZXJEYXRhIiwiZ2V0Q2FjaGVLZXkiLCJzdHJpbmdpZnkiLCJhcnJheVRvTWFwIiwiYXJyIiwicmVzdWx0IiwiTWFwIiwic2V0IiwibWVyZ2VNYXBzIiwibWFwMSIsIm1hcDIiLCJrZXkiLCJpbnRlcnNlY3RNYXBzIiwiZmlsdGVyZWRMb2NhbGVzIiwiZmlsdGVyIiwibCIsInN0YXJ0c1dpdGgiLCJsYW5ndWFnZVNwZWNpZmljTWFwIiwibG9jYWxlIiwibWFwIiwiY29tbW9uTWFwIiwiT2JqZWN0IiwiayIsIkludmlzaWJsZUNoYXJhY3RlcnMiLCJnZXRSYXdEYXRhIiwiZ2V0RGF0YSIsImlzSW52aXNpYmxlQ2hhcmFjdGVyIiwiY29kZVBvaW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/strings.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/types.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assertIsDefined\": function() { return /* binding */ assertIsDefined; },\n/* harmony export */   \"assertType\": function() { return /* binding */ assertType; },\n/* harmony export */   \"isBoolean\": function() { return /* binding */ isBoolean; },\n/* harmony export */   \"isDefined\": function() { return /* binding */ isDefined; },\n/* harmony export */   \"isFunction\": function() { return /* binding */ isFunction; },\n/* harmony export */   \"isIterable\": function() { return /* binding */ isIterable; },\n/* harmony export */   \"isNumber\": function() { return /* binding */ isNumber; },\n/* harmony export */   \"isObject\": function() { return /* binding */ isObject; },\n/* harmony export */   \"isString\": function() { return /* binding */ isString; },\n/* harmony export */   \"isTypedArray\": function() { return /* binding */ isTypedArray; },\n/* harmony export */   \"isUndefined\": function() { return /* binding */ isUndefined; },\n/* harmony export */   \"isUndefinedOrNull\": function() { return /* binding */ isUndefinedOrNull; },\n/* harmony export */   \"validateConstraint\": function() { return /* binding */ validateConstraint; },\n/* harmony export */   \"validateConstraints\": function() { return /* binding */ validateConstraints; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * @returns whether the provided parameter is a JavaScript String or not.\n */\nfunction isString(str) {\n  return typeof str === 'string';\n}\n/**\n * @returns whether the provided parameter is of type `object` but **not**\n *\t`null`, an `array`, a `regexp`, nor a `date`.\n */\nfunction isObject(obj) {\n  // The method can't do a type cast since there are type (like strings) which\n  // are subclasses of any put not positvely matched by the function. Hence type\n  // narrowing results in wrong results.\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj) && !(obj instanceof RegExp) && !(obj instanceof Date);\n}\n/**\n * @returns whether the provided parameter is of type `Buffer` or Uint8Array dervived type\n */\nfunction isTypedArray(obj) {\n  const TypedArray = Object.getPrototypeOf(Uint8Array);\n  return typeof obj === 'object' && obj instanceof TypedArray;\n}\n/**\n * In **contrast** to just checking `typeof` this will return `false` for `NaN`.\n * @returns whether the provided parameter is a JavaScript Number or not.\n */\nfunction isNumber(obj) {\n  return typeof obj === 'number' && !isNaN(obj);\n}\n/**\n * @returns whether the provided parameter is an Iterable, casting to the given generic\n */\nfunction isIterable(obj) {\n  return !!obj && typeof obj[Symbol.iterator] === 'function';\n}\n/**\n * @returns whether the provided parameter is a JavaScript Boolean or not.\n */\nfunction isBoolean(obj) {\n  return obj === true || obj === false;\n}\n/**\n * @returns whether the provided parameter is undefined.\n */\nfunction isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n/**\n * @returns whether the provided parameter is defined.\n */\nfunction isDefined(arg) {\n  return !isUndefinedOrNull(arg);\n}\n/**\n * @returns whether the provided parameter is undefined or null.\n */\nfunction isUndefinedOrNull(obj) {\n  return isUndefined(obj) || obj === null;\n}\nfunction assertType(condition, type) {\n  if (!condition) {\n    throw new Error(type ? `Unexpected type, expected '${type}'` : 'Unexpected type');\n  }\n}\n/**\n * Asserts that the argument passed in is neither undefined nor null.\n */\nfunction assertIsDefined(arg) {\n  if (isUndefinedOrNull(arg)) {\n    throw new Error('Assertion Failed: argument is undefined or null');\n  }\n  return arg;\n}\n/**\n * @returns whether the provided parameter is a JavaScript Function or not.\n */\nfunction isFunction(obj) {\n  return typeof obj === 'function';\n}\nfunction validateConstraints(args, constraints) {\n  const len = Math.min(args.length, constraints.length);\n  for (let i = 0; i < len; i++) {\n    validateConstraint(args[i], constraints[i]);\n  }\n}\nfunction validateConstraint(arg, constraint) {\n  if (isString(constraint)) {\n    if (typeof arg !== constraint) {\n      throw new Error(`argument does not match constraint: typeof ${constraint}`);\n    }\n  } else if (isFunction(constraint)) {\n    try {\n      if (arg instanceof constraint) {\n        return;\n      }\n    } catch (_a) {\n      // ignore\n    }\n    if (!isUndefinedOrNull(arg) && arg.constructor === constraint) {\n      return;\n    }\n    if (constraint.length === 1 && constraint.call(undefined, arg) === true) {\n      return;\n    }\n    throw new Error(`argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true`);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/types.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uint.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uint.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toUint32\": function() { return /* binding */ toUint32; },\n/* harmony export */   \"toUint8\": function() { return /* binding */ toUint8; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction toUint8(v) {\n  if (v < 0) {\n    return 0;\n  }\n  if (v > 255 /* Constants.MAX_UINT_8 */) {\n    return 255 /* Constants.MAX_UINT_8 */;\n  }\n  return v | 0;\n}\nfunction toUint32(v) {\n  if (v < 0) {\n    return 0;\n  }\n  if (v > 4294967295 /* Constants.MAX_UINT_32 */) {\n    return 4294967295 /* Constants.MAX_UINT_32 */;\n  }\n  return v | 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdWludC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsT0FBT0EsQ0FBQ0MsQ0FBQyxFQUFFO0VBQ3ZCLElBQUlBLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFDUCxPQUFPLENBQUM7RUFDWjtFQUNBLElBQUlBLENBQUMsR0FBRyxHQUFHLENBQUMsNEJBQTRCO0lBQ3BDLE9BQU8sR0FBRyxDQUFDO0VBQ2Y7RUFDQSxPQUFPQSxDQUFDLEdBQUcsQ0FBQztBQUNoQjtBQUNPLFNBQVNDLFFBQVFBLENBQUNELENBQUMsRUFBRTtFQUN4QixJQUFJQSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQ1AsT0FBTyxDQUFDO0VBQ1o7RUFDQSxJQUFJQSxDQUFDLEdBQUcsVUFBVSxDQUFDLDZCQUE2QjtJQUM1QyxPQUFPLFVBQVUsQ0FBQztFQUN0QjtFQUNBLE9BQU9BLENBQUMsR0FBRyxDQUFDO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi91aW50LmpzPzdlYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gdG9VaW50OCh2KSB7XG4gICAgaWYgKHYgPCAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAodiA+IDI1NSAvKiBDb25zdGFudHMuTUFYX1VJTlRfOCAqLykge1xuICAgICAgICByZXR1cm4gMjU1IC8qIENvbnN0YW50cy5NQVhfVUlOVF84ICovO1xuICAgIH1cbiAgICByZXR1cm4gdiB8IDA7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9VaW50MzIodikge1xuICAgIGlmICh2IDwgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHYgPiA0Mjk0OTY3Mjk1IC8qIENvbnN0YW50cy5NQVhfVUlOVF8zMiAqLykge1xuICAgICAgICByZXR1cm4gNDI5NDk2NzI5NSAvKiBDb25zdGFudHMuTUFYX1VJTlRfMzIgKi87XG4gICAgfVxuICAgIHJldHVybiB2IHwgMDtcbn1cbiJdLCJuYW1lcyI6WyJ0b1VpbnQ4IiwidiIsInRvVWludDMyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/uint.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uri.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uri.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"URI\": function() { return /* binding */ URI; },\n/* harmony export */   \"uriToFsPath\": function() { return /* binding */ uriToFsPath; }\n/* harmony export */ });\n/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path.js */ \"./node_modules/monaco-editor/esm/vs/base/common/path.js\");\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\nfunction _validateUri(ret, _strict) {\n  // scheme, must be set\n  if (!ret.scheme && _strict) {\n    throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n  }\n  // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n  // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n  if (ret.scheme && !_schemePattern.test(ret.scheme)) {\n    throw new Error('[UriError]: Scheme contains illegal characters.');\n  }\n  // path, http://tools.ietf.org/html/rfc3986#section-3.3\n  // If a URI contains an authority component, then the path component\n  // must either be empty or begin with a slash (\"/\") character.  If a URI\n  // does not contain an authority component, then the path cannot begin\n  // with two slash characters (\"//\").\n  if (ret.path) {\n    if (ret.authority) {\n      if (!_singleSlashStart.test(ret.path)) {\n        throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n      }\n    } else {\n      if (_doubleSlashStart.test(ret.path)) {\n        throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n      }\n    }\n  }\n}\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme, _strict) {\n  if (!scheme && !_strict) {\n    return 'file';\n  }\n  return scheme;\n}\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme, path) {\n  // the slash-character is our 'default base' as we don't\n  // support constructing URIs relative to other URIs. This\n  // also means that we alter and potentially break paths.\n  // see https://tools.ietf.org/html/rfc3986#section-5.1.4\n  switch (scheme) {\n    case 'https':\n    case 'http':\n    case 'file':\n      if (!path) {\n        path = _slash;\n      } else if (path[0] !== _slash) {\n        path = _slash + path;\n      }\n      break;\n  }\n  return path;\n}\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nclass URI {\n  static isUri(thing) {\n    if (thing instanceof URI) {\n      return true;\n    }\n    if (!thing) {\n      return false;\n    }\n    return typeof thing.authority === 'string' && typeof thing.fragment === 'string' && typeof thing.path === 'string' && typeof thing.query === 'string' && typeof thing.scheme === 'string' && typeof thing.fsPath === 'string' && typeof thing.with === 'function' && typeof thing.toString === 'function';\n  }\n  /**\n   * @internal\n   */\n  constructor(schemeOrData, authority, path, query, fragment, _strict = false) {\n    if (typeof schemeOrData === 'object') {\n      this.scheme = schemeOrData.scheme || _empty;\n      this.authority = schemeOrData.authority || _empty;\n      this.path = schemeOrData.path || _empty;\n      this.query = schemeOrData.query || _empty;\n      this.fragment = schemeOrData.fragment || _empty;\n      // no validation because it's this URI\n      // that creates uri components.\n      // _validateUri(this);\n    } else {\n      this.scheme = _schemeFix(schemeOrData, _strict);\n      this.authority = authority || _empty;\n      this.path = _referenceResolution(this.scheme, path || _empty);\n      this.query = query || _empty;\n      this.fragment = fragment || _empty;\n      _validateUri(this, _strict);\n    }\n  }\n  // ---- filesystem path -----------------------\n  /**\n   * Returns a string representing the corresponding file system path of this URI.\n   * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n   * platform specific path separator.\n   *\n   * * Will *not* validate the path for invalid characters and semantics.\n   * * Will *not* look at the scheme of this URI.\n   * * The result shall *not* be used for display purposes but for accessing a file on disk.\n   *\n   *\n   * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n   * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n   *\n   * ```ts\n      const u = URI.parse('file://server/c$/folder/file.txt')\n      u.authority === 'server'\n      u.path === '/shares/c$/file.txt'\n      u.fsPath === '\\\\server\\c$\\folder\\file.txt'\n  ```\n   *\n   * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n   * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n   * with URIs that represent files on disk (`file` scheme).\n   */\n  get fsPath() {\n    // if (this.scheme !== 'file') {\n    // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n    // }\n    return uriToFsPath(this, false);\n  }\n  // ---- modify to new -------------------------\n  with(change) {\n    if (!change) {\n      return this;\n    }\n    let {\n      scheme,\n      authority,\n      path,\n      query,\n      fragment\n    } = change;\n    if (scheme === undefined) {\n      scheme = this.scheme;\n    } else if (scheme === null) {\n      scheme = _empty;\n    }\n    if (authority === undefined) {\n      authority = this.authority;\n    } else if (authority === null) {\n      authority = _empty;\n    }\n    if (path === undefined) {\n      path = this.path;\n    } else if (path === null) {\n      path = _empty;\n    }\n    if (query === undefined) {\n      query = this.query;\n    } else if (query === null) {\n      query = _empty;\n    }\n    if (fragment === undefined) {\n      fragment = this.fragment;\n    } else if (fragment === null) {\n      fragment = _empty;\n    }\n    if (scheme === this.scheme && authority === this.authority && path === this.path && query === this.query && fragment === this.fragment) {\n      return this;\n    }\n    return new Uri(scheme, authority, path, query, fragment);\n  }\n  // ---- parse & validate ------------------------\n  /**\n   * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n   * `file:///usr/home`, or `scheme:with/path`.\n   *\n   * @param value A string which represents an URI (see `URI#toString`).\n   */\n  static parse(value, _strict = false) {\n    const match = _regexp.exec(value);\n    if (!match) {\n      return new Uri(_empty, _empty, _empty, _empty, _empty);\n    }\n    return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\n  }\n  /**\n   * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n   * `/usr/home`, or `\\\\server\\share\\some\\path`.\n   *\n   * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n   * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n   * `URI.parse('file://' + path)` because the path might contain characters that are\n   * interpreted (# and ?). See the following sample:\n   * ```ts\n  const good = URI.file('/coding/c#/project1');\n  good.scheme === 'file';\n  good.path === '/coding/c#/project1';\n  good.fragment === '';\n  const bad = URI.parse('file://' + '/coding/c#/project1');\n  bad.scheme === 'file';\n  bad.path === '/coding/c'; // path is now broken\n  bad.fragment === '/project1';\n  ```\n   *\n   * @param path A file system path (see `URI#fsPath`)\n   */\n  static file(path) {\n    let authority = _empty;\n    // normalize to fwd-slashes on windows,\n    // on other systems bwd-slashes are valid\n    // filename character, eg /f\\oo/ba\\r.txt\n    if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {\n      path = path.replace(/\\\\/g, _slash);\n    }\n    // check for authority as used in UNC shares\n    // or use the path as given\n    if (path[0] === _slash && path[1] === _slash) {\n      const idx = path.indexOf(_slash, 2);\n      if (idx === -1) {\n        authority = path.substring(2);\n        path = _slash;\n      } else {\n        authority = path.substring(2, idx);\n        path = path.substring(idx) || _slash;\n      }\n    }\n    return new Uri('file', authority, path, _empty, _empty);\n  }\n  /**\n   * Creates new URI from uri components.\n   *\n   * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs\n   * validation and should be used for untrusted uri components retrieved from storage,\n   * user input, command arguments etc\n   */\n  static from(components, strict) {\n    const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);\n    return result;\n  }\n  /**\n   * Join a URI path with path fragments and normalizes the resulting path.\n   *\n   * @param uri The input URI.\n   * @param pathFragment The path fragment to add to the URI path.\n   * @returns The resulting URI.\n   */\n  static joinPath(uri, ...pathFragment) {\n    if (!uri.path) {\n      throw new Error(`[UriError]: cannot call joinPath on URI without path`);\n    }\n    let newPath;\n    if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows && uri.scheme === 'file') {\n      newPath = URI.file(_path_js__WEBPACK_IMPORTED_MODULE_0__.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\n    } else {\n      newPath = _path_js__WEBPACK_IMPORTED_MODULE_0__.posix.join(uri.path, ...pathFragment);\n    }\n    return uri.with({\n      path: newPath\n    });\n  }\n  // ---- printing/externalize ---------------------------\n  /**\n   * Creates a string representation for this URI. It's guaranteed that calling\n   * `URI.parse` with the result of this function creates an URI which is equal\n   * to this URI.\n   *\n   * * The result shall *not* be used for display purposes but for externalization or transport.\n   * * The result will be encoded using the percentage encoding and encoding happens mostly\n   * ignore the scheme-specific encoding rules.\n   *\n   * @param skipEncoding Do not encode the result, default is `false`\n   */\n  toString(skipEncoding = false) {\n    return _asFormatted(this, skipEncoding);\n  }\n  toJSON() {\n    return this;\n  }\n  static revive(data) {\n    var _a, _b;\n    if (!data) {\n      return data;\n    } else if (data instanceof URI) {\n      return data;\n    } else {\n      const result = new Uri(data);\n      result._formatted = (_a = data.external) !== null && _a !== void 0 ? _a : null;\n      result._fsPath = data._sep === _pathSepMarker ? (_b = data.fsPath) !== null && _b !== void 0 ? _b : null : null;\n      return result;\n    }\n  }\n}\nconst _pathSepMarker = _platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows ? 1 : undefined;\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n  constructor() {\n    super(...arguments);\n    this._formatted = null;\n    this._fsPath = null;\n  }\n  get fsPath() {\n    if (!this._fsPath) {\n      this._fsPath = uriToFsPath(this, false);\n    }\n    return this._fsPath;\n  }\n  toString(skipEncoding = false) {\n    if (!skipEncoding) {\n      if (!this._formatted) {\n        this._formatted = _asFormatted(this, false);\n      }\n      return this._formatted;\n    } else {\n      // we don't cache that\n      return _asFormatted(this, true);\n    }\n  }\n  toJSON() {\n    const res = {\n      $mid: 1 /* MarshalledId.Uri */\n    };\n    // cached state\n    if (this._fsPath) {\n      res.fsPath = this._fsPath;\n      res._sep = _pathSepMarker;\n    }\n    if (this._formatted) {\n      res.external = this._formatted;\n    }\n    //--- uri components\n    if (this.path) {\n      res.path = this.path;\n    }\n    // TODO\n    // this isn't correct and can violate the UriComponents contract but\n    // this is part of the vscode.Uri API and we shouldn't change how that\n    // works anymore\n    if (this.scheme) {\n      res.scheme = this.scheme;\n    }\n    if (this.authority) {\n      res.authority = this.authority;\n    }\n    if (this.query) {\n      res.query = this.query;\n    }\n    if (this.fragment) {\n      res.fragment = this.fragment;\n    }\n    return res;\n  }\n}\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable = {\n  [58 /* CharCode.Colon */]: '%3A',\n  // gen-delims\n  [47 /* CharCode.Slash */]: '%2F',\n  [63 /* CharCode.QuestionMark */]: '%3F',\n  [35 /* CharCode.Hash */]: '%23',\n  [91 /* CharCode.OpenSquareBracket */]: '%5B',\n  [93 /* CharCode.CloseSquareBracket */]: '%5D',\n  [64 /* CharCode.AtSign */]: '%40',\n  [33 /* CharCode.ExclamationMark */]: '%21',\n  // sub-delims\n  [36 /* CharCode.DollarSign */]: '%24',\n  [38 /* CharCode.Ampersand */]: '%26',\n  [39 /* CharCode.SingleQuote */]: '%27',\n  [40 /* CharCode.OpenParen */]: '%28',\n  [41 /* CharCode.CloseParen */]: '%29',\n  [42 /* CharCode.Asterisk */]: '%2A',\n  [43 /* CharCode.Plus */]: '%2B',\n  [44 /* CharCode.Comma */]: '%2C',\n  [59 /* CharCode.Semicolon */]: '%3B',\n  [61 /* CharCode.Equals */]: '%3D',\n  [32 /* CharCode.Space */]: '%20'\n};\nfunction encodeURIComponentFast(uriComponent, isPath, isAuthority) {\n  let res = undefined;\n  let nativeEncodePos = -1;\n  for (let pos = 0; pos < uriComponent.length; pos++) {\n    const code = uriComponent.charCodeAt(pos);\n    // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n    if (code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */ || code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */ || code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */ || code === 45 /* CharCode.Dash */ || code === 46 /* CharCode.Period */ || code === 95 /* CharCode.Underline */ || code === 126 /* CharCode.Tilde */ || isPath && code === 47 /* CharCode.Slash */ || isAuthority && code === 91 /* CharCode.OpenSquareBracket */ || isAuthority && code === 93 /* CharCode.CloseSquareBracket */ || isAuthority && code === 58 /* CharCode.Colon */) {\n      // check if we are delaying native encode\n      if (nativeEncodePos !== -1) {\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n        nativeEncodePos = -1;\n      }\n      // check if we write into a new string (by default we try to return the param)\n      if (res !== undefined) {\n        res += uriComponent.charAt(pos);\n      }\n    } else {\n      // encoding needed, we need to allocate a new string\n      if (res === undefined) {\n        res = uriComponent.substr(0, pos);\n      }\n      // check with default table first\n      const escaped = encodeTable[code];\n      if (escaped !== undefined) {\n        // check if we are delaying native encode\n        if (nativeEncodePos !== -1) {\n          res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n          nativeEncodePos = -1;\n        }\n        // append escaped variant to result\n        res += escaped;\n      } else if (nativeEncodePos === -1) {\n        // use native encode only when needed\n        nativeEncodePos = pos;\n      }\n    }\n  }\n  if (nativeEncodePos !== -1) {\n    res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n  }\n  return res !== undefined ? res : uriComponent;\n}\nfunction encodeURIComponentMinimal(path) {\n  let res = undefined;\n  for (let pos = 0; pos < path.length; pos++) {\n    const code = path.charCodeAt(pos);\n    if (code === 35 /* CharCode.Hash */ || code === 63 /* CharCode.QuestionMark */) {\n      if (res === undefined) {\n        res = path.substr(0, pos);\n      }\n      res += encodeTable[code];\n    } else {\n      if (res !== undefined) {\n        res += path[pos];\n      }\n    }\n  }\n  return res !== undefined ? res : path;\n}\n/**\n * Compute `fsPath` for the given uri\n */\nfunction uriToFsPath(uri, keepDriveLetterCasing) {\n  let value;\n  if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n    // unc path: file://shares/c$/far/boo\n    value = `//${uri.authority}${uri.path}`;\n  } else if (uri.path.charCodeAt(0) === 47 /* CharCode.Slash */ && (uri.path.charCodeAt(1) >= 65 /* CharCode.A */ && uri.path.charCodeAt(1) <= 90 /* CharCode.Z */ || uri.path.charCodeAt(1) >= 97 /* CharCode.a */ && uri.path.charCodeAt(1) <= 122 /* CharCode.z */) && uri.path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n    if (!keepDriveLetterCasing) {\n      // windows drive letter: file:///c:/far/boo\n      value = uri.path[1].toLowerCase() + uri.path.substr(2);\n    } else {\n      value = uri.path.substr(1);\n    }\n  } else {\n    // other path\n    value = uri.path;\n  }\n  if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {\n    value = value.replace(/\\//g, '\\\\');\n  }\n  return value;\n}\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri, skipEncoding) {\n  const encoder = !skipEncoding ? encodeURIComponentFast : encodeURIComponentMinimal;\n  let res = '';\n  let {\n    scheme,\n    authority,\n    path,\n    query,\n    fragment\n  } = uri;\n  if (scheme) {\n    res += scheme;\n    res += ':';\n  }\n  if (authority || scheme === 'file') {\n    res += _slash;\n    res += _slash;\n  }\n  if (authority) {\n    let idx = authority.indexOf('@');\n    if (idx !== -1) {\n      // <user>@<auth>\n      const userinfo = authority.substr(0, idx);\n      authority = authority.substr(idx + 1);\n      idx = userinfo.lastIndexOf(':');\n      if (idx === -1) {\n        res += encoder(userinfo, false, false);\n      } else {\n        // <user>:<pass>@<auth>\n        res += encoder(userinfo.substr(0, idx), false, false);\n        res += ':';\n        res += encoder(userinfo.substr(idx + 1), false, true);\n      }\n      res += '@';\n    }\n    authority = authority.toLowerCase();\n    idx = authority.lastIndexOf(':');\n    if (idx === -1) {\n      res += encoder(authority, false, true);\n    } else {\n      // <auth>:<port>\n      res += encoder(authority.substr(0, idx), false, true);\n      res += authority.substr(idx);\n    }\n  }\n  if (path) {\n    // lower-case windows drive letters in /C:/fff or C:/fff\n    if (path.length >= 3 && path.charCodeAt(0) === 47 /* CharCode.Slash */ && path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n      const code = path.charCodeAt(1);\n      if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n        path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n      }\n    } else if (path.length >= 2 && path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n      const code = path.charCodeAt(0);\n      if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n        path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n      }\n    }\n    // encode the rest of the path\n    res += encoder(path, true, false);\n  }\n  if (query) {\n    res += '?';\n    res += encoder(query, false, false);\n  }\n  if (fragment) {\n    res += '#';\n    res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n  }\n  return res;\n}\n// --- decode\nfunction decodeURIComponentGraceful(str) {\n  try {\n    return decodeURIComponent(str);\n  } catch (_a) {\n    if (str.length > 3) {\n      return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n    } else {\n      return str;\n    }\n  }\n}\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\nfunction percentDecode(str) {\n  if (!str.match(_rEncodedAsHex)) {\n    return str;\n  }\n  return str.replace(_rEncodedAsHex, match => decodeURIComponentGraceful(match));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/uri.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SimpleWorkerClient\": function() { return /* binding */ SimpleWorkerClient; },\n/* harmony export */   \"SimpleWorkerServer\": function() { return /* binding */ SimpleWorkerServer; },\n/* harmony export */   \"create\": function() { return /* binding */ create; },\n/* harmony export */   \"logOnceWebWorkerWarning\": function() { return /* binding */ logOnceWebWorkerWarning; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nfunction logOnceWebWorkerWarning(err) {\n  if (!_platform_js__WEBPACK_IMPORTED_MODULE_4__.isWeb) {\n    // running tests\n    return;\n  }\n  if (!webWorkerWarningLogged) {\n    webWorkerWarningLogged = true;\n    console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n  }\n  console.warn(err.message);\n}\nclass RequestMessage {\n  constructor(vsWorker, req, method, args) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.method = method;\n    this.args = args;\n    this.type = 0 /* MessageType.Request */;\n  }\n}\nclass ReplyMessage {\n  constructor(vsWorker, seq, res, err) {\n    this.vsWorker = vsWorker;\n    this.seq = seq;\n    this.res = res;\n    this.err = err;\n    this.type = 1 /* MessageType.Reply */;\n  }\n}\nclass SubscribeEventMessage {\n  constructor(vsWorker, req, eventName, arg) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.eventName = eventName;\n    this.arg = arg;\n    this.type = 2 /* MessageType.SubscribeEvent */;\n  }\n}\nclass EventMessage {\n  constructor(vsWorker, req, event) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.event = event;\n    this.type = 3 /* MessageType.Event */;\n  }\n}\nclass UnsubscribeEventMessage {\n  constructor(vsWorker, req) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.type = 4 /* MessageType.UnsubscribeEvent */;\n  }\n}\nclass SimpleWorkerProtocol {\n  constructor(handler) {\n    this._workerId = -1;\n    this._handler = handler;\n    this._lastSentReq = 0;\n    this._pendingReplies = Object.create(null);\n    this._pendingEmitters = new Map();\n    this._pendingEvents = new Map();\n  }\n  setWorkerId(workerId) {\n    this._workerId = workerId;\n  }\n  sendMessage(method, args) {\n    const req = String(++this._lastSentReq);\n    return new Promise((resolve, reject) => {\n      this._pendingReplies[req] = {\n        resolve: resolve,\n        reject: reject\n      };\n      this._send(new RequestMessage(this._workerId, req, method, args));\n    });\n  }\n  listen(eventName, arg) {\n    let req = null;\n    const emitter = new _event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter({\n      onWillAddFirstListener: () => {\n        req = String(++this._lastSentReq);\n        this._pendingEmitters.set(req, emitter);\n        this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n      },\n      onDidRemoveLastListener: () => {\n        this._pendingEmitters.delete(req);\n        this._send(new UnsubscribeEventMessage(this._workerId, req));\n        req = null;\n      }\n    });\n    return emitter.event;\n  }\n  handleMessage(message) {\n    if (!message || !message.vsWorker) {\n      return;\n    }\n    if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n      return;\n    }\n    this._handleMessage(message);\n  }\n  _handleMessage(msg) {\n    switch (msg.type) {\n      case 1 /* MessageType.Reply */:\n        return this._handleReplyMessage(msg);\n      case 0 /* MessageType.Request */:\n        return this._handleRequestMessage(msg);\n      case 2 /* MessageType.SubscribeEvent */:\n        return this._handleSubscribeEventMessage(msg);\n      case 3 /* MessageType.Event */:\n        return this._handleEventMessage(msg);\n      case 4 /* MessageType.UnsubscribeEvent */:\n        return this._handleUnsubscribeEventMessage(msg);\n    }\n  }\n  _handleReplyMessage(replyMessage) {\n    if (!this._pendingReplies[replyMessage.seq]) {\n      console.warn('Got reply to unknown seq');\n      return;\n    }\n    const reply = this._pendingReplies[replyMessage.seq];\n    delete this._pendingReplies[replyMessage.seq];\n    if (replyMessage.err) {\n      let err = replyMessage.err;\n      if (replyMessage.err.$isError) {\n        err = new Error();\n        err.name = replyMessage.err.name;\n        err.message = replyMessage.err.message;\n        err.stack = replyMessage.err.stack;\n      }\n      reply.reject(err);\n      return;\n    }\n    reply.resolve(replyMessage.res);\n  }\n  _handleRequestMessage(requestMessage) {\n    const req = requestMessage.req;\n    const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n    result.then(r => {\n      this._send(new ReplyMessage(this._workerId, req, r, undefined));\n    }, e => {\n      if (e.detail instanceof Error) {\n        // Loading errors have a detail property that points to the actual error\n        e.detail = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e.detail);\n      }\n      this._send(new ReplyMessage(this._workerId, req, undefined, (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e)));\n    });\n  }\n  _handleSubscribeEventMessage(msg) {\n    const req = msg.req;\n    const disposable = this._handler.handleEvent(msg.eventName, msg.arg)(event => {\n      this._send(new EventMessage(this._workerId, req, event));\n    });\n    this._pendingEvents.set(req, disposable);\n  }\n  _handleEventMessage(msg) {\n    if (!this._pendingEmitters.has(msg.req)) {\n      console.warn('Got event for unknown req');\n      return;\n    }\n    this._pendingEmitters.get(msg.req).fire(msg.event);\n  }\n  _handleUnsubscribeEventMessage(msg) {\n    if (!this._pendingEvents.has(msg.req)) {\n      console.warn('Got unsubscribe for unknown req');\n      return;\n    }\n    this._pendingEvents.get(msg.req).dispose();\n    this._pendingEvents.delete(msg.req);\n  }\n  _send(msg) {\n    const transfer = [];\n    if (msg.type === 0 /* MessageType.Request */) {\n      for (let i = 0; i < msg.args.length; i++) {\n        if (msg.args[i] instanceof ArrayBuffer) {\n          transfer.push(msg.args[i]);\n        }\n      }\n    } else if (msg.type === 1 /* MessageType.Reply */) {\n      if (msg.res instanceof ArrayBuffer) {\n        transfer.push(msg.res);\n      }\n    }\n    this._handler.sendMessage(msg, transfer);\n  }\n}\n/**\n * Main thread side\n */\nclass SimpleWorkerClient extends _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {\n  constructor(workerFactory, moduleId, host) {\n    super();\n    let lazyProxyReject = null;\n    this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', msg => {\n      this._protocol.handleMessage(msg);\n    }, err => {\n      // in Firefox, web workers fail lazily :(\n      // we will reject the proxy\n      lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\n    }));\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        this._worker.postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => {\n        if (typeof host[method] !== 'function') {\n          return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n        }\n        try {\n          return Promise.resolve(host[method].apply(host, args));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      },\n      handleEvent: (eventName, arg) => {\n        if (propertyIsDynamicEvent(eventName)) {\n          const event = host[eventName].call(host, arg);\n          if (typeof event !== 'function') {\n            throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n          }\n          return event;\n        }\n        if (propertyIsEvent(eventName)) {\n          const event = host[eventName];\n          if (typeof event !== 'function') {\n            throw new Error(`Missing event ${eventName} on main thread host.`);\n          }\n          return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n      }\n    });\n    this._protocol.setWorkerId(this._worker.getId());\n    // Gather loader configuration\n    let loaderConfiguration = null;\n    const globalRequire = globalThis.require;\n    if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n      // Get the configuration from the Monaco AMD Loader\n      loaderConfiguration = globalRequire.getConfig();\n    } else if (typeof globalThis.requirejs !== 'undefined') {\n      // Get the configuration from requirejs\n      loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n    }\n    const hostMethods = (0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(host);\n    // Send initialize message\n    this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [this._worker.getId(), JSON.parse(JSON.stringify(loaderConfiguration)), moduleId, hostMethods]);\n    // Create proxy to loaded code\n    const proxyMethodRequest = (method, args) => {\n      return this._request(method, args);\n    };\n    const proxyListen = (eventName, arg) => {\n      return this._protocol.listen(eventName, arg);\n    };\n    this._lazyProxy = new Promise((resolve, reject) => {\n      lazyProxyReject = reject;\n      this._onModuleLoaded.then(availableMethods => {\n        resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n      }, e => {\n        reject(e);\n        this._onError('Worker failed to load ' + moduleId, e);\n      });\n    });\n  }\n  getProxyObject() {\n    return this._lazyProxy;\n  }\n  _request(method, args) {\n    return new Promise((resolve, reject) => {\n      this._onModuleLoaded.then(() => {\n        this._protocol.sendMessage(method, args).then(resolve, reject);\n      }, reject);\n    });\n  }\n  _onError(message, error) {\n    console.error(message);\n    console.info(error);\n  }\n}\nfunction propertyIsEvent(name) {\n  // Assume a property is an event if it has a form of \"onSomething\"\n  return name[0] === 'o' && name[1] === 'n' && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n  // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n  return /^onDynamic/.test(name) && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n  const createProxyMethod = method => {\n    return function () {\n      const args = Array.prototype.slice.call(arguments, 0);\n      return invoke(method, args);\n    };\n  };\n  const createProxyDynamicEvent = eventName => {\n    return function (arg) {\n      return proxyListen(eventName, arg);\n    };\n  };\n  const result = {};\n  for (const methodName of methodNames) {\n    if (propertyIsDynamicEvent(methodName)) {\n      result[methodName] = createProxyDynamicEvent(methodName);\n      continue;\n    }\n    if (propertyIsEvent(methodName)) {\n      result[methodName] = proxyListen(methodName, undefined);\n      continue;\n    }\n    result[methodName] = createProxyMethod(methodName);\n  }\n  return result;\n}\n/**\n * Worker side\n */\nclass SimpleWorkerServer {\n  constructor(postMessage, requestHandlerFactory) {\n    this._requestHandlerFactory = requestHandlerFactory;\n    this._requestHandler = null;\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => this._handleMessage(method, args),\n      handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n    });\n  }\n  onmessage(msg) {\n    this._protocol.handleMessage(msg);\n  }\n  _handleMessage(method, args) {\n    if (method === INITIALIZE) {\n      return this.initialize(args[0], args[1], args[2], args[3]);\n    }\n    if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n    try {\n      return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  _handleEvent(eventName, arg) {\n    if (!this._requestHandler) {\n      throw new Error(`Missing requestHandler`);\n    }\n    if (propertyIsDynamicEvent(eventName)) {\n      const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n      if (typeof event !== 'function') {\n        throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n      }\n      return event;\n    }\n    if (propertyIsEvent(eventName)) {\n      const event = this._requestHandler[eventName];\n      if (typeof event !== 'function') {\n        throw new Error(`Missing event ${eventName} on request handler.`);\n      }\n      return event;\n    }\n    throw new Error(`Malformed event name ${eventName}`);\n  }\n  initialize(workerId, loaderConfig, moduleId, hostMethods) {\n    this._protocol.setWorkerId(workerId);\n    const proxyMethodRequest = (method, args) => {\n      return this._protocol.sendMessage(method, args);\n    };\n    const proxyListen = (eventName, arg) => {\n      return this._protocol.listen(eventName, arg);\n    };\n    const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n    if (this._requestHandlerFactory) {\n      // static request handler\n      this._requestHandler = this._requestHandlerFactory(hostProxy);\n      return Promise.resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));\n    }\n    if (loaderConfig) {\n      // Remove 'baseUrl', handling it is beyond scope for now\n      if (typeof loaderConfig.baseUrl !== 'undefined') {\n        delete loaderConfig['baseUrl'];\n      }\n      if (typeof loaderConfig.paths !== 'undefined') {\n        if (typeof loaderConfig.paths.vs !== 'undefined') {\n          delete loaderConfig.paths['vs'];\n        }\n      }\n      if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\n        // don't use, it has been destroyed during serialize\n        delete loaderConfig['trustedTypesPolicy'];\n      }\n      // Since this is in a web worker, enable catching errors\n      loaderConfig.catchError = true;\n      globalThis.require.config(loaderConfig);\n    }\n    return new Promise((resolve, reject) => {\n      // Use the global require to be sure to get the global config\n      // ESM-comment-begin\n      // \t\t\tconst req = (globalThis.require || require);\n      // ESM-comment-end\n      // ESM-uncomment-begin\n      const req = globalThis.require;\n      // ESM-uncomment-end\n      req([moduleId], module => {\n        this._requestHandler = module.create(hostProxy);\n        if (!this._requestHandler) {\n          reject(new Error(`No RequestHandler!`));\n          return;\n        }\n        resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));\n      }, reject);\n    });\n  }\n}\n/**\n * Called on the worker side\n * @skipMangle\n */\nfunction create(postMessage) {\n  return new SimpleWorkerServer(postMessage, null);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CharacterClassifier\": function() { return /* binding */ CharacterClassifier; },\n/* harmony export */   \"CharacterSet\": function() { return /* binding */ CharacterSet; }\n/* harmony export */ });\n/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uint.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uint.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nclass CharacterClassifier {\n  constructor(_defaultValue) {\n    const defaultValue = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_defaultValue);\n    this._defaultValue = defaultValue;\n    this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n    this._map = new Map();\n  }\n  static _createAsciiMap(defaultValue) {\n    const asciiMap = new Uint8Array(256);\n    asciiMap.fill(defaultValue);\n    return asciiMap;\n  }\n  set(charCode, _value) {\n    const value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_value);\n    if (charCode >= 0 && charCode < 256) {\n      this._asciiMap[charCode] = value;\n    } else {\n      this._map.set(charCode, value);\n    }\n  }\n  get(charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  }\n  clear() {\n    this._asciiMap.fill(this._defaultValue);\n    this._map.clear();\n  }\n}\nclass CharacterSet {\n  constructor() {\n    this._actual = new CharacterClassifier(0 /* Boolean.False */);\n  }\n  add(charCode) {\n    this._actual.set(charCode, 1 /* Boolean.True */);\n  }\n  has(charCode) {\n    return this._actual.get(charCode) === 1 /* Boolean.True */;\n  }\n  clear() {\n    return this._actual.clear();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL2NoYXJhY3RlckNsYXNzaWZpZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ08sTUFBTUMsbUJBQW1CLENBQUM7RUFDN0JDLFdBQVdBLENBQUNDLGFBQWEsRUFBRTtJQUN2QixNQUFNQyxZQUFZLEdBQUdKLDZEQUFPLENBQUNHLGFBQWEsQ0FBQztJQUMzQyxJQUFJLENBQUNBLGFBQWEsR0FBR0MsWUFBWTtJQUNqQyxJQUFJLENBQUNDLFNBQVMsR0FBR0osbUJBQW1CLENBQUNLLGVBQWUsQ0FBQ0YsWUFBWSxDQUFDO0lBQ2xFLElBQUksQ0FBQ0csSUFBSSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0VBQ3pCO0VBQ0EsT0FBT0YsZUFBZUEsQ0FBQ0YsWUFBWSxFQUFFO0lBQ2pDLE1BQU1LLFFBQVEsR0FBRyxJQUFJQyxVQUFVLENBQUMsR0FBRyxDQUFDO0lBQ3BDRCxRQUFRLENBQUNFLElBQUksQ0FBQ1AsWUFBWSxDQUFDO0lBQzNCLE9BQU9LLFFBQVE7RUFDbkI7RUFDQUcsR0FBR0EsQ0FBQ0MsUUFBUSxFQUFFQyxNQUFNLEVBQUU7SUFDbEIsTUFBTUMsS0FBSyxHQUFHZiw2REFBTyxDQUFDYyxNQUFNLENBQUM7SUFDN0IsSUFBSUQsUUFBUSxJQUFJLENBQUMsSUFBSUEsUUFBUSxHQUFHLEdBQUcsRUFBRTtNQUNqQyxJQUFJLENBQUNSLFNBQVMsQ0FBQ1EsUUFBUSxDQUFDLEdBQUdFLEtBQUs7SUFDcEMsQ0FBQyxNQUNJO01BQ0QsSUFBSSxDQUFDUixJQUFJLENBQUNLLEdBQUcsQ0FBQ0MsUUFBUSxFQUFFRSxLQUFLLENBQUM7SUFDbEM7RUFDSjtFQUNBQyxHQUFHQSxDQUFDSCxRQUFRLEVBQUU7SUFDVixJQUFJQSxRQUFRLElBQUksQ0FBQyxJQUFJQSxRQUFRLEdBQUcsR0FBRyxFQUFFO01BQ2pDLE9BQU8sSUFBSSxDQUFDUixTQUFTLENBQUNRLFFBQVEsQ0FBQztJQUNuQyxDQUFDLE1BQ0k7TUFDRCxPQUFRLElBQUksQ0FBQ04sSUFBSSxDQUFDUyxHQUFHLENBQUNILFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQ1YsYUFBYTtJQUN6RDtFQUNKO0VBQ0FjLEtBQUtBLENBQUEsRUFBRztJQUNKLElBQUksQ0FBQ1osU0FBUyxDQUFDTSxJQUFJLENBQUMsSUFBSSxDQUFDUixhQUFhLENBQUM7SUFDdkMsSUFBSSxDQUFDSSxJQUFJLENBQUNVLEtBQUssQ0FBQyxDQUFDO0VBQ3JCO0FBQ0o7QUFDTyxNQUFNQyxZQUFZLENBQUM7RUFDdEJoQixXQUFXQSxDQUFBLEVBQUc7SUFDVixJQUFJLENBQUNpQixPQUFPLEdBQUcsSUFBSWxCLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztFQUNqRTtFQUNBbUIsR0FBR0EsQ0FBQ1AsUUFBUSxFQUFFO0lBQ1YsSUFBSSxDQUFDTSxPQUFPLENBQUNQLEdBQUcsQ0FBQ0MsUUFBUSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztFQUNwRDtFQUNBUSxHQUFHQSxDQUFDUixRQUFRLEVBQUU7SUFDVixPQUFRLElBQUksQ0FBQ00sT0FBTyxDQUFDSCxHQUFHLENBQUNILFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUM3QztFQUNBSSxLQUFLQSxDQUFBLEVBQUc7SUFDSixPQUFPLElBQUksQ0FBQ0UsT0FBTyxDQUFDRixLQUFLLENBQUMsQ0FBQztFQUMvQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvY2hhcmFjdGVyQ2xhc3NpZmllci5qcz85ZDhmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgdG9VaW50OCB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3VpbnQuanMnO1xuLyoqXG4gKiBBIGZhc3QgY2hhcmFjdGVyIGNsYXNzaWZpZXIgdGhhdCB1c2VzIGEgY29tcGFjdCBhcnJheSBmb3IgQVNDSUkgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyQ2xhc3NpZmllciB7XG4gICAgY29uc3RydWN0b3IoX2RlZmF1bHRWYWx1ZSkge1xuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0b1VpbnQ4KF9kZWZhdWx0VmFsdWUpO1xuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIHRoaXMuX2FzY2lpTWFwID0gQ2hhcmFjdGVyQ2xhc3NpZmllci5fY3JlYXRlQXNjaWlNYXAoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzdGF0aWMgX2NyZWF0ZUFzY2lpTWFwKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICBjb25zdCBhc2NpaU1hcCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgICAgIGFzY2lpTWFwLmZpbGwoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFzY2lpTWFwO1xuICAgIH1cbiAgICBzZXQoY2hhckNvZGUsIF92YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRvVWludDgoX3ZhbHVlKTtcbiAgICAgICAgaWYgKGNoYXJDb2RlID49IDAgJiYgY2hhckNvZGUgPCAyNTYpIHtcbiAgICAgICAgICAgIHRoaXMuX2FzY2lpTWFwW2NoYXJDb2RlXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChjaGFyQ29kZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChjaGFyQ29kZSkge1xuICAgICAgICBpZiAoY2hhckNvZGUgPj0gMCAmJiBjaGFyQ29kZSA8IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FzY2lpTWFwW2NoYXJDb2RlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fbWFwLmdldChjaGFyQ29kZSkgfHwgdGhpcy5fZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5fYXNjaWlNYXAuZmlsbCh0aGlzLl9kZWZhdWx0VmFsdWUpO1xuICAgICAgICB0aGlzLl9tYXAuY2xlYXIoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyU2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fYWN0dWFsID0gbmV3IENoYXJhY3RlckNsYXNzaWZpZXIoMCAvKiBCb29sZWFuLkZhbHNlICovKTtcbiAgICB9XG4gICAgYWRkKGNoYXJDb2RlKSB7XG4gICAgICAgIHRoaXMuX2FjdHVhbC5zZXQoY2hhckNvZGUsIDEgLyogQm9vbGVhbi5UcnVlICovKTtcbiAgICB9XG4gICAgaGFzKGNoYXJDb2RlKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fYWN0dWFsLmdldChjaGFyQ29kZSkgPT09IDEgLyogQm9vbGVhbi5UcnVlICovKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3R1YWwuY2xlYXIoKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsidG9VaW50OCIsIkNoYXJhY3RlckNsYXNzaWZpZXIiLCJjb25zdHJ1Y3RvciIsIl9kZWZhdWx0VmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJfYXNjaWlNYXAiLCJfY3JlYXRlQXNjaWlNYXAiLCJfbWFwIiwiTWFwIiwiYXNjaWlNYXAiLCJVaW50OEFycmF5IiwiZmlsbCIsInNldCIsImNoYXJDb2RlIiwiX3ZhbHVlIiwidmFsdWUiLCJnZXQiLCJjbGVhciIsIkNoYXJhY3RlclNldCIsIl9hY3R1YWwiLCJhZGQiLCJoYXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineRange\": function() { return /* binding */ LineRange; },\n/* harmony export */   \"LineRangeSet\": function() { return /* binding */ LineRangeSet; }\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n/**\n * A range of lines (1-based).\n */\nclass LineRange {\n  static fromRangeInclusive(range) {\n    return new LineRange(range.startLineNumber, range.endLineNumber + 1);\n  }\n  /**\n   * @param lineRanges An array of sorted line ranges.\n   */\n  static joinMany(lineRanges) {\n    if (lineRanges.length === 0) {\n      return [];\n    }\n    let result = new LineRangeSet(lineRanges[0].slice());\n    for (let i = 1; i < lineRanges.length; i++) {\n      result = result.getUnion(new LineRangeSet(lineRanges[i].slice()));\n    }\n    return result.ranges;\n  }\n  static join(lineRanges) {\n    if (lineRanges.length === 0) {\n      throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('lineRanges cannot be empty');\n    }\n    let startLineNumber = lineRanges[0].startLineNumber;\n    let endLineNumberExclusive = lineRanges[0].endLineNumberExclusive;\n    for (let i = 1; i < lineRanges.length; i++) {\n      startLineNumber = Math.min(startLineNumber, lineRanges[i].startLineNumber);\n      endLineNumberExclusive = Math.max(endLineNumberExclusive, lineRanges[i].endLineNumberExclusive);\n    }\n    return new LineRange(startLineNumber, endLineNumberExclusive);\n  }\n  static ofLength(startLineNumber, length) {\n    return new LineRange(startLineNumber, startLineNumber + length);\n  }\n  /**\n   * @internal\n   */\n  static deserialize(lineRange) {\n    return new LineRange(lineRange[0], lineRange[1]);\n  }\n  constructor(startLineNumber, endLineNumberExclusive) {\n    if (startLineNumber > endLineNumberExclusive) {\n      throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);\n    }\n    this.startLineNumber = startLineNumber;\n    this.endLineNumberExclusive = endLineNumberExclusive;\n  }\n  /**\n   * Indicates if this line range contains the given line number.\n   */\n  contains(lineNumber) {\n    return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n  }\n  /**\n   * Indicates if this line range is empty.\n   */\n  get isEmpty() {\n    return this.startLineNumber === this.endLineNumberExclusive;\n  }\n  /**\n   * Moves this line range by the given offset of line numbers.\n   */\n  delta(offset) {\n    return new LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);\n  }\n  deltaLength(offset) {\n    return new LineRange(this.startLineNumber, this.endLineNumberExclusive + offset);\n  }\n  /**\n   * The number of lines this line range spans.\n   */\n  get length() {\n    return this.endLineNumberExclusive - this.startLineNumber;\n  }\n  /**\n   * Creates a line range that combines this and the given line range.\n   */\n  join(other) {\n    return new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive));\n  }\n  toString() {\n    return `[${this.startLineNumber},${this.endLineNumberExclusive})`;\n  }\n  /**\n   * The resulting range is empty if the ranges do not intersect, but touch.\n   * If the ranges don't even touch, the result is undefined.\n   */\n  intersect(other) {\n    const startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);\n    const endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);\n    if (startLineNumber <= endLineNumberExclusive) {\n      return new LineRange(startLineNumber, endLineNumberExclusive);\n    }\n    return undefined;\n  }\n  intersectsStrict(other) {\n    return this.startLineNumber < other.endLineNumberExclusive && other.startLineNumber < this.endLineNumberExclusive;\n  }\n  overlapOrTouch(other) {\n    return this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;\n  }\n  equals(b) {\n    return this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;\n  }\n  toInclusiveRange() {\n    if (this.isEmpty) {\n      return null;\n    }\n    return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER);\n  }\n  /**\n   * @deprecated Using this function is discouraged because it might lead to bugs: The end position is not guaranteed to be a valid position!\n  */\n  toExclusiveRange() {\n    return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);\n  }\n  mapToLineArray(f) {\n    const result = [];\n    for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n      result.push(f(lineNumber));\n    }\n    return result;\n  }\n  forEach(f) {\n    for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n      f(lineNumber);\n    }\n  }\n  /**\n   * @internal\n   */\n  serialize() {\n    return [this.startLineNumber, this.endLineNumberExclusive];\n  }\n  includes(lineNumber) {\n    return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n  }\n  /**\n   * Converts this 1-based line range to a 0-based offset range (subtracts 1!).\n   * @internal\n   */\n  toOffsetRange() {\n    return new _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(this.startLineNumber - 1, this.endLineNumberExclusive - 1);\n  }\n}\nclass LineRangeSet {\n  constructor(\n  /**\n   * Sorted by start line number.\n   * No two line ranges are touching or intersecting.\n   */\n  _normalizedRanges = []) {\n    this._normalizedRanges = _normalizedRanges;\n  }\n  get ranges() {\n    return this._normalizedRanges;\n  }\n  addRange(range) {\n    if (range.length === 0) {\n      return;\n    }\n    // Idea: Find joinRange such that:\n    // replaceRange = _normalizedRanges.replaceRange(joinRange, range.joinAll(joinRange.map(idx => this._normalizedRanges[idx])))\n    // idx of first element that touches range or that is after range\n    const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n    // idx of element after { last element that touches range or that is before range }\n    const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n    if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n      // If there is no element that touches range, then joinRangeStartIdx === joinRangeEndIdxExclusive and that value is the index of the element after range\n      this._normalizedRanges.splice(joinRangeStartIdx, 0, range);\n    } else if (joinRangeStartIdx === joinRangeEndIdxExclusive - 1) {\n      // Else, there is an element that touches range and in this case it is both the first and last element. Thus we can replace it\n      const joinRange = this._normalizedRanges[joinRangeStartIdx];\n      this._normalizedRanges[joinRangeStartIdx] = joinRange.join(range);\n    } else {\n      // First and last element are different - we need to replace the entire range\n      const joinRange = this._normalizedRanges[joinRangeStartIdx].join(this._normalizedRanges[joinRangeEndIdxExclusive - 1]).join(range);\n      this._normalizedRanges.splice(joinRangeStartIdx, joinRangeEndIdxExclusive - joinRangeStartIdx, joinRange);\n    }\n  }\n  contains(lineNumber) {\n    const rangeThatStartsBeforeEnd = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(this._normalizedRanges, r => r.startLineNumber <= lineNumber);\n    return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > lineNumber;\n  }\n  intersects(range) {\n    const rangeThatStartsBeforeEnd = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(this._normalizedRanges, r => r.startLineNumber < range.endLineNumberExclusive);\n    return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > range.startLineNumber;\n  }\n  getUnion(other) {\n    if (this._normalizedRanges.length === 0) {\n      return other;\n    }\n    if (other._normalizedRanges.length === 0) {\n      return this;\n    }\n    const result = [];\n    let i1 = 0;\n    let i2 = 0;\n    let current = null;\n    while (i1 < this._normalizedRanges.length || i2 < other._normalizedRanges.length) {\n      let next = null;\n      if (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n        const lineRange1 = this._normalizedRanges[i1];\n        const lineRange2 = other._normalizedRanges[i2];\n        if (lineRange1.startLineNumber < lineRange2.startLineNumber) {\n          next = lineRange1;\n          i1++;\n        } else {\n          next = lineRange2;\n          i2++;\n        }\n      } else if (i1 < this._normalizedRanges.length) {\n        next = this._normalizedRanges[i1];\n        i1++;\n      } else {\n        next = other._normalizedRanges[i2];\n        i2++;\n      }\n      if (current === null) {\n        current = next;\n      } else {\n        if (current.endLineNumberExclusive >= next.startLineNumber) {\n          // merge\n          current = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));\n        } else {\n          // push\n          result.push(current);\n          current = next;\n        }\n      }\n    }\n    if (current !== null) {\n      result.push(current);\n    }\n    return new LineRangeSet(result);\n  }\n  /**\n   * Subtracts all ranges in this set from `range` and returns the result.\n   */\n  subtractFrom(range) {\n    // idx of first element that touches range or that is after range\n    const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n    // idx of element after { last element that touches range or that is before range }\n    const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n    if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n      return new LineRangeSet([range]);\n    }\n    const result = [];\n    let startLineNumber = range.startLineNumber;\n    for (let i = joinRangeStartIdx; i < joinRangeEndIdxExclusive; i++) {\n      const r = this._normalizedRanges[i];\n      if (r.startLineNumber > startLineNumber) {\n        result.push(new LineRange(startLineNumber, r.startLineNumber));\n      }\n      startLineNumber = r.endLineNumberExclusive;\n    }\n    if (startLineNumber < range.endLineNumberExclusive) {\n      result.push(new LineRange(startLineNumber, range.endLineNumberExclusive));\n    }\n    return new LineRangeSet(result);\n  }\n  toString() {\n    return this._normalizedRanges.map(r => r.toString()).join(', ');\n  }\n  getIntersection(other) {\n    const result = [];\n    let i1 = 0;\n    let i2 = 0;\n    while (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n      const r1 = this._normalizedRanges[i1];\n      const r2 = other._normalizedRanges[i2];\n      const i = r1.intersect(r2);\n      if (i && !i.isEmpty) {\n        result.push(i);\n      }\n      if (r1.endLineNumberExclusive < r2.endLineNumberExclusive) {\n        i1++;\n      } else {\n        i2++;\n      }\n    }\n    return new LineRangeSet(result);\n  }\n  getWithDelta(value) {\n    return new LineRangeSet(this._normalizedRanges.map(r => r.delta(value)));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OffsetRange\": function() { return /* binding */ OffsetRange; },\n/* harmony export */   \"OffsetRangeSet\": function() { return /* binding */ OffsetRangeSet; }\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A range of offsets (0-based).\n*/\nclass OffsetRange {\n  static addRange(range, sortedRanges) {\n    let i = 0;\n    while (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {\n      i++;\n    }\n    let j = i;\n    while (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {\n      j++;\n    }\n    if (i === j) {\n      sortedRanges.splice(i, 0, range);\n    } else {\n      const start = Math.min(range.start, sortedRanges[i].start);\n      const end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);\n      sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n    }\n  }\n  static tryCreate(start, endExclusive) {\n    if (start > endExclusive) {\n      return undefined;\n    }\n    return new OffsetRange(start, endExclusive);\n  }\n  static ofLength(length) {\n    return new OffsetRange(0, length);\n  }\n  static ofStartAndLength(start, length) {\n    return new OffsetRange(start, start + length);\n  }\n  constructor(start, endExclusive) {\n    this.start = start;\n    this.endExclusive = endExclusive;\n    if (start > endExclusive) {\n      throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid range: ${this.toString()}`);\n    }\n  }\n  get isEmpty() {\n    return this.start === this.endExclusive;\n  }\n  delta(offset) {\n    return new OffsetRange(this.start + offset, this.endExclusive + offset);\n  }\n  deltaStart(offset) {\n    return new OffsetRange(this.start + offset, this.endExclusive);\n  }\n  deltaEnd(offset) {\n    return new OffsetRange(this.start, this.endExclusive + offset);\n  }\n  get length() {\n    return this.endExclusive - this.start;\n  }\n  toString() {\n    return `[${this.start}, ${this.endExclusive})`;\n  }\n  contains(offset) {\n    return this.start <= offset && offset < this.endExclusive;\n  }\n  /**\n   * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)\n   * The joined range is the smallest range that contains both ranges.\n   */\n  join(other) {\n    return new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));\n  }\n  /**\n   * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)\n   *\n   * The resulting range is empty if the ranges do not intersect, but touch.\n   * If the ranges don't even touch, the result is undefined.\n   */\n  intersect(other) {\n    const start = Math.max(this.start, other.start);\n    const end = Math.min(this.endExclusive, other.endExclusive);\n    if (start <= end) {\n      return new OffsetRange(start, end);\n    }\n    return undefined;\n  }\n  intersects(other) {\n    const start = Math.max(this.start, other.start);\n    const end = Math.min(this.endExclusive, other.endExclusive);\n    return start < end;\n  }\n  isBefore(other) {\n    return this.endExclusive <= other.start;\n  }\n  isAfter(other) {\n    return this.start >= other.endExclusive;\n  }\n  slice(arr) {\n    return arr.slice(this.start, this.endExclusive);\n  }\n  substring(str) {\n    return str.substring(this.start, this.endExclusive);\n  }\n  /**\n   * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.\n   * The range must not be empty.\n   */\n  clip(value) {\n    if (this.isEmpty) {\n      throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n    }\n    return Math.max(this.start, Math.min(this.endExclusive - 1, value));\n  }\n  /**\n   * Returns `r := value + k * length` such that `r` is contained in this range.\n   * The range must not be empty.\n   *\n   * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.\n   */\n  clipCyclic(value) {\n    if (this.isEmpty) {\n      throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n    }\n    if (value < this.start) {\n      return this.endExclusive - (this.start - value) % this.length;\n    }\n    if (value >= this.endExclusive) {\n      return this.start + (value - this.start) % this.length;\n    }\n    return value;\n  }\n  forEach(f) {\n    for (let i = this.start; i < this.endExclusive; i++) {\n      f(i);\n    }\n  }\n}\nclass OffsetRangeSet {\n  constructor() {\n    this._sortedRanges = [];\n  }\n  addRange(range) {\n    let i = 0;\n    while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive < range.start) {\n      i++;\n    }\n    let j = i;\n    while (j < this._sortedRanges.length && this._sortedRanges[j].start <= range.endExclusive) {\n      j++;\n    }\n    if (i === j) {\n      this._sortedRanges.splice(i, 0, range);\n    } else {\n      const start = Math.min(range.start, this._sortedRanges[i].start);\n      const end = Math.max(range.endExclusive, this._sortedRanges[j - 1].endExclusive);\n      this._sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n    }\n  }\n  toString() {\n    return this._sortedRanges.map(r => r.toString()).join(', ');\n  }\n  /**\n   * Returns of there is a value that is contained in this instance and the given range.\n   */\n  intersectsStrict(other) {\n    // TODO use binary search\n    let i = 0;\n    while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive <= other.start) {\n      i++;\n    }\n    return i < this._sortedRanges.length && this._sortedRanges[i].start < other.endExclusive;\n  }\n  intersectWithRange(other) {\n    // TODO use binary search + slice\n    const result = new OffsetRangeSet();\n    for (const range of this._sortedRanges) {\n      const intersection = range.intersect(other);\n      if (intersection) {\n        result.addRange(intersection);\n      }\n    }\n    return result;\n  }\n  intersectWithRangeLength(other) {\n    return this.intersectWithRange(other).length;\n  }\n  get length() {\n    return this._sortedRanges.reduce((prev, cur) => prev + cur.length, 0);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Position\": function() { return /* binding */ Position; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nclass Position {\n  constructor(lineNumber, column) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\n   * Create a new position from this position.\n   *\n   * @param newLineNumber new line number\n   * @param newColumn new column\n   */\n  with(newLineNumber = this.lineNumber, newColumn = this.column) {\n    if (newLineNumber === this.lineNumber && newColumn === this.column) {\n      return this;\n    } else {\n      return new Position(newLineNumber, newColumn);\n    }\n  }\n  /**\n   * Derive a new position from this position.\n   *\n   * @param deltaLineNumber line number delta\n   * @param deltaColumn column delta\n   */\n  delta(deltaLineNumber = 0, deltaColumn = 0) {\n    return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n  }\n  /**\n   * Test if this position equals other position\n   */\n  equals(other) {\n    return Position.equals(this, other);\n  }\n  /**\n   * Test if position `a` equals position `b`\n   */\n  static equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n  }\n  /**\n   * Test if this position is before other position.\n   * If the two positions are equal, the result will be false.\n   */\n  isBefore(other) {\n    return Position.isBefore(this, other);\n  }\n  /**\n   * Test if position `a` is before position `b`.\n   * If the two positions are equal, the result will be false.\n   */\n  static isBefore(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column < b.column;\n  }\n  /**\n   * Test if this position is before other position.\n   * If the two positions are equal, the result will be true.\n   */\n  isBeforeOrEqual(other) {\n    return Position.isBeforeOrEqual(this, other);\n  }\n  /**\n   * Test if position `a` is before position `b`.\n   * If the two positions are equal, the result will be true.\n   */\n  static isBeforeOrEqual(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column <= b.column;\n  }\n  /**\n   * A function that compares positions, useful for sorting\n   */\n  static compare(a, b) {\n    const aLineNumber = a.lineNumber | 0;\n    const bLineNumber = b.lineNumber | 0;\n    if (aLineNumber === bLineNumber) {\n      const aColumn = a.column | 0;\n      const bColumn = b.column | 0;\n      return aColumn - bColumn;\n    }\n    return aLineNumber - bLineNumber;\n  }\n  /**\n   * Clone this position.\n   */\n  clone() {\n    return new Position(this.lineNumber, this.column);\n  }\n  /**\n   * Convert to a human-readable representation.\n   */\n  toString() {\n    return '(' + this.lineNumber + ',' + this.column + ')';\n  }\n  // ---\n  /**\n   * Create a `Position` from an `IPosition`.\n   */\n  static lift(pos) {\n    return new Position(pos.lineNumber, pos.column);\n  }\n  /**\n   * Test if `obj` is an `IPosition`.\n   */\n  static isIPosition(obj) {\n    return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n  }\n  toJSON() {\n    return {\n      lineNumber: this.lineNumber,\n      column: this.column\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PositionOffsetTransformer\": function() { return /* binding */ PositionOffsetTransformer; }\n/* harmony export */ });\n/* harmony import */ var _offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _textLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./textLength.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\");\n\n\nclass PositionOffsetTransformer {\n  constructor(text) {\n    this.text = text;\n    this.lineStartOffsetByLineIdx = [];\n    this.lineStartOffsetByLineIdx.push(0);\n    for (let i = 0; i < text.length; i++) {\n      if (text.charAt(i) === '\\n') {\n        this.lineStartOffsetByLineIdx.push(i + 1);\n      }\n    }\n  }\n  getOffset(position) {\n    return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;\n  }\n  getOffsetRange(range) {\n    return new _offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(this.getOffset(range.getStartPosition()), this.getOffset(range.getEndPosition()));\n  }\n  get textLength() {\n    const lineIdx = this.lineStartOffsetByLineIdx.length - 1;\n    return new _textLength_js__WEBPACK_IMPORTED_MODULE_1__.TextLength(lineIdx, this.text.length - this.lineStartOffsetByLineIdx[lineIdx]);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3Bvc2l0aW9uVG9PZmZzZXQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ0Y7QUFDdEMsTUFBTUUseUJBQXlCLENBQUM7RUFDbkNDLFdBQVdBLENBQUNDLElBQUksRUFBRTtJQUNkLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUcsRUFBRTtJQUNsQyxJQUFJLENBQUNBLHdCQUF3QixDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxJQUFJLENBQUNJLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDbEMsSUFBSUgsSUFBSSxDQUFDSyxNQUFNLENBQUNGLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUN6QixJQUFJLENBQUNGLHdCQUF3QixDQUFDQyxJQUFJLENBQUNDLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDN0M7SUFDSjtFQUNKO0VBQ0FHLFNBQVNBLENBQUNDLFFBQVEsRUFBRTtJQUNoQixPQUFPLElBQUksQ0FBQ04sd0JBQXdCLENBQUNNLFFBQVEsQ0FBQ0MsVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHRCxRQUFRLENBQUNFLE1BQU0sR0FBRyxDQUFDO0VBQ3ZGO0VBQ0FDLGNBQWNBLENBQUNDLEtBQUssRUFBRTtJQUNsQixPQUFPLElBQUlmLHdEQUFXLENBQUMsSUFBSSxDQUFDVSxTQUFTLENBQUNLLEtBQUssQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDTixTQUFTLENBQUNLLEtBQUssQ0FBQ0UsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVHO0VBQ0EsSUFBSUMsVUFBVUEsQ0FBQSxFQUFHO0lBQ2IsTUFBTUMsT0FBTyxHQUFHLElBQUksQ0FBQ2Qsd0JBQXdCLENBQUNHLE1BQU0sR0FBRyxDQUFDO0lBQ3hELE9BQU8sSUFBSVAsc0RBQVUsQ0FBQ2tCLE9BQU8sRUFBRSxJQUFJLENBQUNmLElBQUksQ0FBQ0ksTUFBTSxHQUFHLElBQUksQ0FBQ0gsd0JBQXdCLENBQUNjLE9BQU8sQ0FBQyxDQUFDO0VBQzdGO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9wb3NpdGlvblRvT2Zmc2V0LmpzP2I0ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2Zmc2V0UmFuZ2UgfSBmcm9tICcuL29mZnNldFJhbmdlLmpzJztcbmltcG9ydCB7IFRleHRMZW5ndGggfSBmcm9tICcuL3RleHRMZW5ndGguanMnO1xuZXhwb3J0IGNsYXNzIFBvc2l0aW9uT2Zmc2V0VHJhbnNmb3JtZXIge1xuICAgIGNvbnN0cnVjdG9yKHRleHQpIHtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHggPSBbXTtcbiAgICAgICAgdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHgucHVzaCgwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQXQoaSkgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHgucHVzaChpICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0T2Zmc2V0KHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVTdGFydE9mZnNldEJ5TGluZUlkeFtwb3NpdGlvbi5saW5lTnVtYmVyIC0gMV0gKyBwb3NpdGlvbi5jb2x1bW4gLSAxO1xuICAgIH1cbiAgICBnZXRPZmZzZXRSYW5nZShyYW5nZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHRoaXMuZ2V0T2Zmc2V0KHJhbmdlLmdldFN0YXJ0UG9zaXRpb24oKSksIHRoaXMuZ2V0T2Zmc2V0KHJhbmdlLmdldEVuZFBvc2l0aW9uKCkpKTtcbiAgICB9XG4gICAgZ2V0IHRleHRMZW5ndGgoKSB7XG4gICAgICAgIGNvbnN0IGxpbmVJZHggPSB0aGlzLmxpbmVTdGFydE9mZnNldEJ5TGluZUlkeC5sZW5ndGggLSAxO1xuICAgICAgICByZXR1cm4gbmV3IFRleHRMZW5ndGgobGluZUlkeCwgdGhpcy50ZXh0Lmxlbmd0aCAtIHRoaXMubGluZVN0YXJ0T2Zmc2V0QnlMaW5lSWR4W2xpbmVJZHhdKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiT2Zmc2V0UmFuZ2UiLCJUZXh0TGVuZ3RoIiwiUG9zaXRpb25PZmZzZXRUcmFuc2Zvcm1lciIsImNvbnN0cnVjdG9yIiwidGV4dCIsImxpbmVTdGFydE9mZnNldEJ5TGluZUlkeCIsInB1c2giLCJpIiwibGVuZ3RoIiwiY2hhckF0IiwiZ2V0T2Zmc2V0IiwicG9zaXRpb24iLCJsaW5lTnVtYmVyIiwiY29sdW1uIiwiZ2V0T2Zmc2V0UmFuZ2UiLCJyYW5nZSIsImdldFN0YXJ0UG9zaXRpb24iLCJnZXRFbmRQb3NpdGlvbiIsInRleHRMZW5ndGgiLCJsaW5lSWR4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Range\": function() { return /* binding */ Range; }\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n */\nclass Range {\n  constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n    if (startLineNumber > endLineNumber || startLineNumber === endLineNumber && startColumn > endColumn) {\n      this.startLineNumber = endLineNumber;\n      this.startColumn = endColumn;\n      this.endLineNumber = startLineNumber;\n      this.endColumn = startColumn;\n    } else {\n      this.startLineNumber = startLineNumber;\n      this.startColumn = startColumn;\n      this.endLineNumber = endLineNumber;\n      this.endColumn = endColumn;\n    }\n  }\n  /**\n   * Test if this range is empty.\n   */\n  isEmpty() {\n    return Range.isEmpty(this);\n  }\n  /**\n   * Test if `range` is empty.\n   */\n  static isEmpty(range) {\n    return range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn;\n  }\n  /**\n   * Test if position is in this range. If the position is at the edges, will return true.\n   */\n  containsPosition(position) {\n    return Range.containsPosition(this, position);\n  }\n  /**\n   * Test if `position` is in `range`. If the position is at the edges, will return true.\n   */\n  static containsPosition(range, position) {\n    if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n      return false;\n    }\n    if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n      return false;\n    }\n    if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Test if `position` is in `range`. If the position is at the edges, will return false.\n   * @internal\n   */\n  static strictContainsPosition(range, position) {\n    if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n      return false;\n    }\n    if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\n      return false;\n    }\n    if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Test if range is in this range. If the range is equal to this range, will return true.\n   */\n  containsRange(range) {\n    return Range.containsRange(this, range);\n  }\n  /**\n   * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n   */\n  static containsRange(range, otherRange) {\n    if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n      return false;\n    }\n    if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n   */\n  strictContainsRange(range) {\n    return Range.strictContainsRange(this, range);\n  }\n  /**\n   * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\n   */\n  static strictContainsRange(range, otherRange) {\n    if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n      return false;\n    }\n    if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * A reunion of the two ranges.\n   * The smallest position will be used as the start point, and the largest one as the end point.\n   */\n  plusRange(range) {\n    return Range.plusRange(this, range);\n  }\n  /**\n   * A reunion of the two ranges.\n   * The smallest position will be used as the start point, and the largest one as the end point.\n   */\n  static plusRange(a, b) {\n    let startLineNumber;\n    let startColumn;\n    let endLineNumber;\n    let endColumn;\n    if (b.startLineNumber < a.startLineNumber) {\n      startLineNumber = b.startLineNumber;\n      startColumn = b.startColumn;\n    } else if (b.startLineNumber === a.startLineNumber) {\n      startLineNumber = b.startLineNumber;\n      startColumn = Math.min(b.startColumn, a.startColumn);\n    } else {\n      startLineNumber = a.startLineNumber;\n      startColumn = a.startColumn;\n    }\n    if (b.endLineNumber > a.endLineNumber) {\n      endLineNumber = b.endLineNumber;\n      endColumn = b.endColumn;\n    } else if (b.endLineNumber === a.endLineNumber) {\n      endLineNumber = b.endLineNumber;\n      endColumn = Math.max(b.endColumn, a.endColumn);\n    } else {\n      endLineNumber = a.endLineNumber;\n      endColumn = a.endColumn;\n    }\n    return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n  }\n  /**\n   * A intersection of the two ranges.\n   */\n  intersectRanges(range) {\n    return Range.intersectRanges(this, range);\n  }\n  /**\n   * A intersection of the two ranges.\n   */\n  static intersectRanges(a, b) {\n    let resultStartLineNumber = a.startLineNumber;\n    let resultStartColumn = a.startColumn;\n    let resultEndLineNumber = a.endLineNumber;\n    let resultEndColumn = a.endColumn;\n    const otherStartLineNumber = b.startLineNumber;\n    const otherStartColumn = b.startColumn;\n    const otherEndLineNumber = b.endLineNumber;\n    const otherEndColumn = b.endColumn;\n    if (resultStartLineNumber < otherStartLineNumber) {\n      resultStartLineNumber = otherStartLineNumber;\n      resultStartColumn = otherStartColumn;\n    } else if (resultStartLineNumber === otherStartLineNumber) {\n      resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n    }\n    if (resultEndLineNumber > otherEndLineNumber) {\n      resultEndLineNumber = otherEndLineNumber;\n      resultEndColumn = otherEndColumn;\n    } else if (resultEndLineNumber === otherEndLineNumber) {\n      resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n    }\n    // Check if selection is now empty\n    if (resultStartLineNumber > resultEndLineNumber) {\n      return null;\n    }\n    if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n      return null;\n    }\n    return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n  }\n  /**\n   * Test if this range equals other.\n   */\n  equalsRange(other) {\n    return Range.equalsRange(this, other);\n  }\n  /**\n   * Test if range `a` equals `b`.\n   */\n  static equalsRange(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    return !!a && !!b && a.startLineNumber === b.startLineNumber && a.startColumn === b.startColumn && a.endLineNumber === b.endLineNumber && a.endColumn === b.endColumn;\n  }\n  /**\n   * Return the end position (which will be after or equal to the start position)\n   */\n  getEndPosition() {\n    return Range.getEndPosition(this);\n  }\n  /**\n   * Return the end position (which will be after or equal to the start position)\n   */\n  static getEndPosition(range) {\n    return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.endLineNumber, range.endColumn);\n  }\n  /**\n   * Return the start position (which will be before or equal to the end position)\n   */\n  getStartPosition() {\n    return Range.getStartPosition(this);\n  }\n  /**\n   * Return the start position (which will be before or equal to the end position)\n   */\n  static getStartPosition(range) {\n    return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.startLineNumber, range.startColumn);\n  }\n  /**\n   * Transform to a user presentable string representation.\n   */\n  toString() {\n    return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n  }\n  /**\n   * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n   */\n  setEndPosition(endLineNumber, endColumn) {\n    return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n  }\n  /**\n   * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n   */\n  setStartPosition(startLineNumber, startColumn) {\n    return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n  }\n  /**\n   * Create a new empty range using this range's start position.\n   */\n  collapseToStart() {\n    return Range.collapseToStart(this);\n  }\n  /**\n   * Create a new empty range using this range's start position.\n   */\n  static collapseToStart(range) {\n    return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n  }\n  /**\n   * Create a new empty range using this range's end position.\n   */\n  collapseToEnd() {\n    return Range.collapseToEnd(this);\n  }\n  /**\n   * Create a new empty range using this range's end position.\n   */\n  static collapseToEnd(range) {\n    return new Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);\n  }\n  /**\n   * Moves the range by the given amount of lines.\n   */\n  delta(lineCount) {\n    return new Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);\n  }\n  // ---\n  static fromPositions(start, end = start) {\n    return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n  }\n  static lift(range) {\n    if (!range) {\n      return null;\n    }\n    return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n  }\n  /**\n   * Test if `obj` is an `IRange`.\n   */\n  static isIRange(obj) {\n    return obj && typeof obj.startLineNumber === 'number' && typeof obj.startColumn === 'number' && typeof obj.endLineNumber === 'number' && typeof obj.endColumn === 'number';\n  }\n  /**\n   * Test if the two ranges are touching in any way.\n   */\n  static areIntersectingOrTouching(a, b) {\n    // Check if `a` is before `b`\n    if (a.endLineNumber < b.startLineNumber || a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn) {\n      return false;\n    }\n    // Check if `b` is before `a`\n    if (b.endLineNumber < a.startLineNumber || b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn) {\n      return false;\n    }\n    // These ranges must intersect\n    return true;\n  }\n  /**\n   * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n   */\n  static areIntersecting(a, b) {\n    // Check if `a` is before `b`\n    if (a.endLineNumber < b.startLineNumber || a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn) {\n      return false;\n    }\n    // Check if `b` is before `a`\n    if (b.endLineNumber < a.startLineNumber || b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn) {\n      return false;\n    }\n    // These ranges must intersect\n    return true;\n  }\n  /**\n   * A function that compares ranges, useful for sorting ranges\n   * It will first compare ranges on the startPosition and then on the endPosition\n   */\n  static compareRangesUsingStarts(a, b) {\n    if (a && b) {\n      const aStartLineNumber = a.startLineNumber | 0;\n      const bStartLineNumber = b.startLineNumber | 0;\n      if (aStartLineNumber === bStartLineNumber) {\n        const aStartColumn = a.startColumn | 0;\n        const bStartColumn = b.startColumn | 0;\n        if (aStartColumn === bStartColumn) {\n          const aEndLineNumber = a.endLineNumber | 0;\n          const bEndLineNumber = b.endLineNumber | 0;\n          if (aEndLineNumber === bEndLineNumber) {\n            const aEndColumn = a.endColumn | 0;\n            const bEndColumn = b.endColumn | 0;\n            return aEndColumn - bEndColumn;\n          }\n          return aEndLineNumber - bEndLineNumber;\n        }\n        return aStartColumn - bStartColumn;\n      }\n      return aStartLineNumber - bStartLineNumber;\n    }\n    const aExists = a ? 1 : 0;\n    const bExists = b ? 1 : 0;\n    return aExists - bExists;\n  }\n  /**\n   * A function that compares ranges, useful for sorting ranges\n   * It will first compare ranges on the endPosition and then on the startPosition\n   */\n  static compareRangesUsingEnds(a, b) {\n    if (a.endLineNumber === b.endLineNumber) {\n      if (a.endColumn === b.endColumn) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.startColumn - b.startColumn;\n        }\n        return a.startLineNumber - b.startLineNumber;\n      }\n      return a.endColumn - b.endColumn;\n    }\n    return a.endLineNumber - b.endLineNumber;\n  }\n  /**\n   * Test if the range spans multiple lines.\n   */\n  static spansMultipleLines(range) {\n    return range.endLineNumber > range.startLineNumber;\n  }\n  toJSON() {\n    return this;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Selection\": function() { return /* binding */ Selection; }\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nclass Selection extends _range_js__WEBPACK_IMPORTED_MODULE_1__.Range {\n  constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n    super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n    this.selectionStartLineNumber = selectionStartLineNumber;\n    this.selectionStartColumn = selectionStartColumn;\n    this.positionLineNumber = positionLineNumber;\n    this.positionColumn = positionColumn;\n  }\n  /**\n   * Transform to a human-readable representation.\n   */\n  toString() {\n    return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n  }\n  /**\n   * Test if equals other selection.\n   */\n  equalsSelection(other) {\n    return Selection.selectionsEqual(this, other);\n  }\n  /**\n   * Test if the two selections are equal.\n   */\n  static selectionsEqual(a, b) {\n    return a.selectionStartLineNumber === b.selectionStartLineNumber && a.selectionStartColumn === b.selectionStartColumn && a.positionLineNumber === b.positionLineNumber && a.positionColumn === b.positionColumn;\n  }\n  /**\n   * Get directions (LTR or RTL).\n   */\n  getDirection() {\n    if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n      return 0 /* SelectionDirection.LTR */;\n    }\n    return 1 /* SelectionDirection.RTL */;\n  }\n  /**\n   * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n   */\n  setEndPosition(endLineNumber, endColumn) {\n    if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n      return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n  }\n  /**\n   * Get the position at `positionLineNumber` and `positionColumn`.\n   */\n  getPosition() {\n    return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.positionLineNumber, this.positionColumn);\n  }\n  /**\n   * Get the position at the start of the selection.\n  */\n  getSelectionStart() {\n    return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.selectionStartLineNumber, this.selectionStartColumn);\n  }\n  /**\n   * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n   */\n  setStartPosition(startLineNumber, startColumn) {\n    if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n      return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n  }\n  // ----\n  /**\n   * Create a `Selection` from one or two positions\n   */\n  static fromPositions(start, end = start) {\n    return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n  }\n  /**\n   * Creates a `Selection` from a range, given a direction.\n   */\n  static fromRange(range, direction) {\n    if (direction === 0 /* SelectionDirection.LTR */) {\n      return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    } else {\n      return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n    }\n  }\n  /**\n   * Create a `Selection` from an `ISelection`.\n   */\n  static liftSelection(sel) {\n    return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n  }\n  /**\n   * `a` equals `b`.\n   */\n  static selectionsArrEqual(a, b) {\n    if (a && !b || !a && b) {\n      return false;\n    }\n    if (!a && !b) {\n      return true;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0, len = a.length; i < len; i++) {\n      if (!this.selectionsEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Test if `obj` is an `ISelection`.\n   */\n  static isISelection(obj) {\n    return obj && typeof obj.selectionStartLineNumber === 'number' && typeof obj.selectionStartColumn === 'number' && typeof obj.positionLineNumber === 'number' && typeof obj.positionColumn === 'number';\n  }\n  /**\n   * Create with a direction.\n   */\n  static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n    if (direction === 0 /* SelectionDirection.LTR */) {\n      return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbstractText\": function() { return /* binding */ AbstractText; },\n/* harmony export */   \"SingleTextEdit\": function() { return /* binding */ SingleTextEdit; },\n/* harmony export */   \"StringText\": function() { return /* binding */ StringText; },\n/* harmony export */   \"TextEdit\": function() { return /* binding */ TextEdit; }\n/* harmony export */ });\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _positionToOffset_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./positionToOffset.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _textLength_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./textLength.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\nclass TextEdit {\n  constructor(edits) {\n    this.edits = edits;\n    (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertFn)(() => (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.checkAdjacentItems)(edits, (a, b) => a.range.getEndPosition().isBeforeOrEqual(b.range.getStartPosition())));\n  }\n  apply(text) {\n    let result = '';\n    let lastEditEnd = new _position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1);\n    for (const edit of this.edits) {\n      const editRange = edit.range;\n      const editStart = editRange.getStartPosition();\n      const editEnd = editRange.getEndPosition();\n      const r = rangeFromPositions(lastEditEnd, editStart);\n      if (!r.isEmpty()) {\n        result += text.getValueOfRange(r);\n      }\n      result += edit.text;\n      lastEditEnd = editEnd;\n    }\n    const r = rangeFromPositions(lastEditEnd, text.endPositionExclusive);\n    if (!r.isEmpty()) {\n      result += text.getValueOfRange(r);\n    }\n    return result;\n  }\n  applyToString(str) {\n    const strText = new StringText(str);\n    return this.apply(strText);\n  }\n  getNewRanges() {\n    const newRanges = [];\n    let previousEditEndLineNumber = 0;\n    let lineOffset = 0;\n    let columnOffset = 0;\n    for (const edit of this.edits) {\n      const textLength = _textLength_js__WEBPACK_IMPORTED_MODULE_5__.TextLength.ofText(edit.text);\n      const newRangeStart = _position_js__WEBPACK_IMPORTED_MODULE_2__.Position.lift({\n        lineNumber: edit.range.startLineNumber + lineOffset,\n        column: edit.range.startColumn + (edit.range.startLineNumber === previousEditEndLineNumber ? columnOffset : 0)\n      });\n      const newRange = textLength.createRange(newRangeStart);\n      newRanges.push(newRange);\n      lineOffset = newRange.endLineNumber - edit.range.endLineNumber;\n      columnOffset = newRange.endColumn - edit.range.endColumn;\n      previousEditEndLineNumber = edit.range.endLineNumber;\n    }\n    return newRanges;\n  }\n}\nclass SingleTextEdit {\n  constructor(range, text) {\n    this.range = range;\n    this.text = text;\n  }\n}\nfunction rangeFromPositions(start, end) {\n  if (start.lineNumber === end.lineNumber && start.column === Number.MAX_SAFE_INTEGER) {\n    return _range_js__WEBPACK_IMPORTED_MODULE_4__.Range.fromPositions(end, end);\n  } else if (!start.isBeforeOrEqual(end)) {\n    throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('start must be before end');\n  }\n  return new _range_js__WEBPACK_IMPORTED_MODULE_4__.Range(start.lineNumber, start.column, end.lineNumber, end.column);\n}\nclass AbstractText {\n  get endPositionExclusive() {\n    return this.length.addToPosition(new _position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1));\n  }\n}\nclass StringText extends AbstractText {\n  constructor(value) {\n    super();\n    this.value = value;\n    this._t = new _positionToOffset_js__WEBPACK_IMPORTED_MODULE_3__.PositionOffsetTransformer(this.value);\n  }\n  getValueOfRange(range) {\n    return this._t.getOffsetRange(range).substring(this.value);\n  }\n  get length() {\n    return this._t.textLength;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextLength\": function() { return /* binding */ TextLength; }\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * Represents a non-negative length of text in terms of line and column count.\n*/\nclass TextLength {\n  static betweenPositions(position1, position2) {\n    if (position1.lineNumber === position2.lineNumber) {\n      return new TextLength(0, position2.column - position1.column);\n    } else {\n      return new TextLength(position2.lineNumber - position1.lineNumber, position2.column - 1);\n    }\n  }\n  static ofRange(range) {\n    return TextLength.betweenPositions(range.getStartPosition(), range.getEndPosition());\n  }\n  static ofText(text) {\n    let line = 0;\n    let column = 0;\n    for (const c of text) {\n      if (c === '\\n') {\n        line++;\n        column = 0;\n      } else {\n        column++;\n      }\n    }\n    return new TextLength(line, column);\n  }\n  constructor(lineCount, columnCount) {\n    this.lineCount = lineCount;\n    this.columnCount = columnCount;\n  }\n  isGreaterThanOrEqualTo(other) {\n    if (this.lineCount !== other.lineCount) {\n      return this.lineCount > other.lineCount;\n    }\n    return this.columnCount >= other.columnCount;\n  }\n  createRange(startPosition) {\n    if (this.lineCount === 0) {\n      return new _range_js__WEBPACK_IMPORTED_MODULE_1__.Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column + this.columnCount);\n    } else {\n      return new _range_js__WEBPACK_IMPORTED_MODULE_1__.Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber + this.lineCount, this.columnCount + 1);\n    }\n  }\n  addToPosition(position) {\n    if (this.lineCount === 0) {\n      return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(position.lineNumber, position.column + this.columnCount);\n    } else {\n      return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(position.lineNumber + this.lineCount, this.columnCount + 1);\n    }\n  }\n  toString() {\n    return `${this.lineCount},${this.columnCount}`;\n  }\n}\nTextLength.zero = new TextLength(0, 0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3RleHRMZW5ndGguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDeUM7QUFDTjtBQUNuQztBQUNBO0FBQ0E7QUFDTyxNQUFNRSxVQUFVLENBQUM7RUFDcEIsT0FBT0MsZ0JBQWdCQSxDQUFDQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtJQUMxQyxJQUFJRCxTQUFTLENBQUNFLFVBQVUsS0FBS0QsU0FBUyxDQUFDQyxVQUFVLEVBQUU7TUFDL0MsT0FBTyxJQUFJSixVQUFVLENBQUMsQ0FBQyxFQUFFRyxTQUFTLENBQUNFLE1BQU0sR0FBR0gsU0FBUyxDQUFDRyxNQUFNLENBQUM7SUFDakUsQ0FBQyxNQUNJO01BQ0QsT0FBTyxJQUFJTCxVQUFVLENBQUNHLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHRixTQUFTLENBQUNFLFVBQVUsRUFBRUQsU0FBUyxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzVGO0VBQ0o7RUFDQSxPQUFPQyxPQUFPQSxDQUFDQyxLQUFLLEVBQUU7SUFDbEIsT0FBT1AsVUFBVSxDQUFDQyxnQkFBZ0IsQ0FBQ00sS0FBSyxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUVELEtBQUssQ0FBQ0UsY0FBYyxDQUFDLENBQUMsQ0FBQztFQUN4RjtFQUNBLE9BQU9DLE1BQU1BLENBQUNDLElBQUksRUFBRTtJQUNoQixJQUFJQyxJQUFJLEdBQUcsQ0FBQztJQUNaLElBQUlQLE1BQU0sR0FBRyxDQUFDO0lBQ2QsS0FBSyxNQUFNUSxDQUFDLElBQUlGLElBQUksRUFBRTtNQUNsQixJQUFJRSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ1pELElBQUksRUFBRTtRQUNOUCxNQUFNLEdBQUcsQ0FBQztNQUNkLENBQUMsTUFDSTtRQUNEQSxNQUFNLEVBQUU7TUFDWjtJQUNKO0lBQ0EsT0FBTyxJQUFJTCxVQUFVLENBQUNZLElBQUksRUFBRVAsTUFBTSxDQUFDO0VBQ3ZDO0VBQ0FTLFdBQVdBLENBQUNDLFNBQVMsRUFBRUMsV0FBVyxFQUFFO0lBQ2hDLElBQUksQ0FBQ0QsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQSxXQUFXO0VBQ2xDO0VBQ0FDLHNCQUFzQkEsQ0FBQ0MsS0FBSyxFQUFFO0lBQzFCLElBQUksSUFBSSxDQUFDSCxTQUFTLEtBQUtHLEtBQUssQ0FBQ0gsU0FBUyxFQUFFO01BQ3BDLE9BQU8sSUFBSSxDQUFDQSxTQUFTLEdBQUdHLEtBQUssQ0FBQ0gsU0FBUztJQUMzQztJQUNBLE9BQU8sSUFBSSxDQUFDQyxXQUFXLElBQUlFLEtBQUssQ0FBQ0YsV0FBVztFQUNoRDtFQUNBRyxXQUFXQSxDQUFDQyxhQUFhLEVBQUU7SUFDdkIsSUFBSSxJQUFJLENBQUNMLFNBQVMsS0FBSyxDQUFDLEVBQUU7TUFDdEIsT0FBTyxJQUFJaEIsNENBQUssQ0FBQ3FCLGFBQWEsQ0FBQ2hCLFVBQVUsRUFBRWdCLGFBQWEsQ0FBQ2YsTUFBTSxFQUFFZSxhQUFhLENBQUNoQixVQUFVLEVBQUVnQixhQUFhLENBQUNmLE1BQU0sR0FBRyxJQUFJLENBQUNXLFdBQVcsQ0FBQztJQUN2SSxDQUFDLE1BQ0k7TUFDRCxPQUFPLElBQUlqQiw0Q0FBSyxDQUFDcUIsYUFBYSxDQUFDaEIsVUFBVSxFQUFFZ0IsYUFBYSxDQUFDZixNQUFNLEVBQUVlLGFBQWEsQ0FBQ2hCLFVBQVUsR0FBRyxJQUFJLENBQUNXLFNBQVMsRUFBRSxJQUFJLENBQUNDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDckk7RUFDSjtFQUNBSyxhQUFhQSxDQUFDQyxRQUFRLEVBQUU7SUFDcEIsSUFBSSxJQUFJLENBQUNQLFNBQVMsS0FBSyxDQUFDLEVBQUU7TUFDdEIsT0FBTyxJQUFJakIsa0RBQVEsQ0FBQ3dCLFFBQVEsQ0FBQ2xCLFVBQVUsRUFBRWtCLFFBQVEsQ0FBQ2pCLE1BQU0sR0FBRyxJQUFJLENBQUNXLFdBQVcsQ0FBQztJQUNoRixDQUFDLE1BQ0k7TUFDRCxPQUFPLElBQUlsQixrREFBUSxDQUFDd0IsUUFBUSxDQUFDbEIsVUFBVSxHQUFHLElBQUksQ0FBQ1csU0FBUyxFQUFFLElBQUksQ0FBQ0MsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNuRjtFQUNKO0VBQ0FPLFFBQVFBLENBQUEsRUFBRztJQUNQLE9BQU8sR0FBRyxJQUFJLENBQUNSLFNBQVMsSUFBSSxJQUFJLENBQUNDLFdBQVcsRUFBRTtFQUNsRDtBQUNKO0FBQ0FoQixVQUFVLENBQUN3QixJQUFJLEdBQUcsSUFBSXhCLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvdGV4dExlbmd0aC5qcz8yNjQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuL3Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi9yYW5nZS5qcyc7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBub24tbmVnYXRpdmUgbGVuZ3RoIG9mIHRleHQgaW4gdGVybXMgb2YgbGluZSBhbmQgY29sdW1uIGNvdW50LlxuKi9cbmV4cG9ydCBjbGFzcyBUZXh0TGVuZ3RoIHtcbiAgICBzdGF0aWMgYmV0d2VlblBvc2l0aW9ucyhwb3NpdGlvbjEsIHBvc2l0aW9uMikge1xuICAgICAgICBpZiAocG9zaXRpb24xLmxpbmVOdW1iZXIgPT09IHBvc2l0aW9uMi5saW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRleHRMZW5ndGgoMCwgcG9zaXRpb24yLmNvbHVtbiAtIHBvc2l0aW9uMS5jb2x1bW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0TGVuZ3RoKHBvc2l0aW9uMi5saW5lTnVtYmVyIC0gcG9zaXRpb24xLmxpbmVOdW1iZXIsIHBvc2l0aW9uMi5jb2x1bW4gLSAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgb2ZSYW5nZShyYW5nZSkge1xuICAgICAgICByZXR1cm4gVGV4dExlbmd0aC5iZXR3ZWVuUG9zaXRpb25zKHJhbmdlLmdldFN0YXJ0UG9zaXRpb24oKSwgcmFuZ2UuZ2V0RW5kUG9zaXRpb24oKSk7XG4gICAgfVxuICAgIHN0YXRpYyBvZlRleHQodGV4dCkge1xuICAgICAgICBsZXQgbGluZSA9IDA7XG4gICAgICAgIGxldCBjb2x1bW4gPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgdGV4dCkge1xuICAgICAgICAgICAgaWYgKGMgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgbGluZSsrO1xuICAgICAgICAgICAgICAgIGNvbHVtbiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFRleHRMZW5ndGgobGluZSwgY29sdW1uKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IobGluZUNvdW50LCBjb2x1bW5Db3VudCkge1xuICAgICAgICB0aGlzLmxpbmVDb3VudCA9IGxpbmVDb3VudDtcbiAgICAgICAgdGhpcy5jb2x1bW5Db3VudCA9IGNvbHVtbkNvdW50O1xuICAgIH1cbiAgICBpc0dyZWF0ZXJUaGFuT3JFcXVhbFRvKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzLmxpbmVDb3VudCAhPT0gb3RoZXIubGluZUNvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saW5lQ291bnQgPiBvdGhlci5saW5lQ291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uQ291bnQgPj0gb3RoZXIuY29sdW1uQ291bnQ7XG4gICAgfVxuICAgIGNyZWF0ZVJhbmdlKHN0YXJ0UG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMubGluZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0UG9zaXRpb24ubGluZU51bWJlciwgc3RhcnRQb3NpdGlvbi5jb2x1bW4sIHN0YXJ0UG9zaXRpb24ubGluZU51bWJlciwgc3RhcnRQb3NpdGlvbi5jb2x1bW4gKyB0aGlzLmNvbHVtbkNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLCBzdGFydFBvc2l0aW9uLmNvbHVtbiwgc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyICsgdGhpcy5saW5lQ291bnQsIHRoaXMuY29sdW1uQ291bnQgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRUb1Bvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmxpbmVDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihwb3NpdGlvbi5saW5lTnVtYmVyLCBwb3NpdGlvbi5jb2x1bW4gKyB0aGlzLmNvbHVtbkNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24ocG9zaXRpb24ubGluZU51bWJlciArIHRoaXMubGluZUNvdW50LCB0aGlzLmNvbHVtbkNvdW50ICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmxpbmVDb3VudH0sJHt0aGlzLmNvbHVtbkNvdW50fWA7XG4gICAgfVxufVxuVGV4dExlbmd0aC56ZXJvID0gbmV3IFRleHRMZW5ndGgoMCwgMCk7XG4iXSwibmFtZXMiOlsiUG9zaXRpb24iLCJSYW5nZSIsIlRleHRMZW5ndGgiLCJiZXR3ZWVuUG9zaXRpb25zIiwicG9zaXRpb24xIiwicG9zaXRpb24yIiwibGluZU51bWJlciIsImNvbHVtbiIsIm9mUmFuZ2UiLCJyYW5nZSIsImdldFN0YXJ0UG9zaXRpb24iLCJnZXRFbmRQb3NpdGlvbiIsIm9mVGV4dCIsInRleHQiLCJsaW5lIiwiYyIsImNvbnN0cnVjdG9yIiwibGluZUNvdW50IiwiY29sdW1uQ291bnQiLCJpc0dyZWF0ZXJUaGFuT3JFcXVhbFRvIiwib3RoZXIiLCJjcmVhdGVSYW5nZSIsInN0YXJ0UG9zaXRpb24iLCJhZGRUb1Bvc2l0aW9uIiwicG9zaXRpb24iLCJ0b1N0cmluZyIsInplcm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WordCharacterClassifier\": function() { return /* binding */ WordCharacterClassifier; },\n/* harmony export */   \"getMapForWordSeparators\": function() { return /* binding */ getMapForWordSeparators; }\n/* harmony export */ });\n/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/map.js */ \"./node_modules/monaco-editor/esm/vs/base/common/map.js\");\n/* harmony import */ var _characterClassifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./characterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass WordCharacterClassifier extends _characterClassifier_js__WEBPACK_IMPORTED_MODULE_1__.CharacterClassifier {\n  constructor(wordSeparators, intlSegmenterLocales) {\n    super(0 /* WordCharacterClass.Regular */);\n    this._segmenter = null;\n    this._cachedLine = null;\n    this._cachedSegments = [];\n    this.intlSegmenterLocales = intlSegmenterLocales;\n    if (this.intlSegmenterLocales.length > 0) {\n      this._segmenter = new Intl.Segmenter(this.intlSegmenterLocales, {\n        granularity: 'word'\n      });\n    } else {\n      this._segmenter = null;\n    }\n    for (let i = 0, len = wordSeparators.length; i < len; i++) {\n      this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\n    }\n    this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\n    this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\n  }\n  findPrevIntlWordBeforeOrAtOffset(line, offset) {\n    let candidate = null;\n    for (const segment of this._getIntlSegmenterWordsOnLine(line)) {\n      if (segment.index > offset) {\n        break;\n      }\n      candidate = segment;\n    }\n    return candidate;\n  }\n  findNextIntlWordAtOrAfterOffset(lineContent, offset) {\n    for (const segment of this._getIntlSegmenterWordsOnLine(lineContent)) {\n      if (segment.index < offset) {\n        continue;\n      }\n      return segment;\n    }\n    return null;\n  }\n  _getIntlSegmenterWordsOnLine(line) {\n    if (!this._segmenter) {\n      return [];\n    }\n    // Check if the line has changed from the previous call\n    if (this._cachedLine === line) {\n      return this._cachedSegments;\n    }\n    // Update the cache with the new line\n    this._cachedLine = line;\n    this._cachedSegments = this._filterWordSegments(this._segmenter.segment(line));\n    return this._cachedSegments;\n  }\n  _filterWordSegments(segments) {\n    const result = [];\n    for (const segment of segments) {\n      if (this._isWordLike(segment)) {\n        result.push(segment);\n      }\n    }\n    return result;\n  }\n  _isWordLike(segment) {\n    if (segment.isWordLike) {\n      return true;\n    }\n    return false;\n  }\n}\nconst wordClassifierCache = new _base_common_map_js__WEBPACK_IMPORTED_MODULE_0__.LRUCache(10);\nfunction getMapForWordSeparators(wordSeparators, intlSegmenterLocales) {\n  const key = `${wordSeparators}/${intlSegmenterLocales.join(',')}`;\n  let result = wordClassifierCache.get(key);\n  if (!result) {\n    result = new WordCharacterClassifier(wordSeparators, intlSegmenterLocales);\n    wordClassifierCache.set(key, result);\n  }\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_WORD_REGEXP\": function() { return /* binding */ DEFAULT_WORD_REGEXP; },\n/* harmony export */   \"USUAL_WORD_SEPARATORS\": function() { return /* binding */ USUAL_WORD_SEPARATORS; },\n/* harmony export */   \"ensureValidWordDefinition\": function() { return /* binding */ ensureValidWordDefinition; },\n/* harmony export */   \"getWordAtText\": function() { return /* binding */ getWordAtText; }\n/* harmony export */ });\n/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/iterator.js */ \"./node_modules/monaco-editor/esm/vs/base/common/iterator.js\");\n/* harmony import */ var _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/linkedList.js */ \"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?';\n/**\n * Create a word definition regular expression based on default word separators.\n * Optionally provide allowed separators that should be included in words.\n *\n * The default would look like this:\n * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n */\nfunction createWordRegExp(allowInWords = '') {\n  let source = '(-?\\\\d*\\\\.\\\\d\\\\w*)|([^';\n  for (const sep of USUAL_WORD_SEPARATORS) {\n    if (allowInWords.indexOf(sep) >= 0) {\n      continue;\n    }\n    source += '\\\\' + sep;\n  }\n  source += '\\\\s]+)';\n  return new RegExp(source, 'g');\n}\n// catches numbers (including floating numbers) in the first group, and alphanum in the second\nconst DEFAULT_WORD_REGEXP = createWordRegExp();\nfunction ensureValidWordDefinition(wordDefinition) {\n  let result = DEFAULT_WORD_REGEXP;\n  if (wordDefinition && wordDefinition instanceof RegExp) {\n    if (!wordDefinition.global) {\n      let flags = 'g';\n      if (wordDefinition.ignoreCase) {\n        flags += 'i';\n      }\n      if (wordDefinition.multiline) {\n        flags += 'm';\n      }\n      if (wordDefinition.unicode) {\n        flags += 'u';\n      }\n      result = new RegExp(wordDefinition.source, flags);\n    } else {\n      result = wordDefinition;\n    }\n  }\n  result.lastIndex = 0;\n  return result;\n}\nconst _defaultConfig = new _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__.LinkedList();\n_defaultConfig.unshift({\n  maxLen: 1000,\n  windowSize: 15,\n  timeBudget: 150\n});\nfunction getWordAtText(column, wordDefinition, text, textOffset, config) {\n  // Ensure the regex has the 'g' flag, otherwise this will loop forever\n  wordDefinition = ensureValidWordDefinition(wordDefinition);\n  if (!config) {\n    config = _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__.Iterable.first(_defaultConfig);\n  }\n  if (text.length > config.maxLen) {\n    // don't throw strings that long at the regexp\n    // but use a sub-string in which a word must occur\n    let start = column - config.maxLen / 2;\n    if (start < 0) {\n      start = 0;\n    } else {\n      textOffset += start;\n    }\n    text = text.substring(start, column + config.maxLen / 2);\n    return getWordAtText(column, wordDefinition, text, textOffset, config);\n  }\n  const t1 = Date.now();\n  const pos = column - 1 - textOffset;\n  let prevRegexIndex = -1;\n  let match = null;\n  for (let i = 1;; i++) {\n    // check time budget\n    if (Date.now() - t1 >= config.timeBudget) {\n      break;\n    }\n    // reset the index at which the regexp should start matching, also know where it\n    // should stop so that subsequent search don't repeat previous searches\n    const regexIndex = pos - config.windowSize * i;\n    wordDefinition.lastIndex = Math.max(0, regexIndex);\n    const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);\n    if (!thisMatch && match) {\n      // stop: we have something\n      break;\n    }\n    match = thisMatch;\n    // stop: searched at start\n    if (regexIndex <= 0) {\n      break;\n    }\n    prevRegexIndex = regexIndex;\n  }\n  if (match) {\n    const result = {\n      word: match[0],\n      startColumn: textOffset + 1 + match.index,\n      endColumn: textOffset + 1 + match.index + match[0].length\n    };\n    wordDefinition.lastIndex = 0;\n    return result;\n  }\n  return null;\n}\nfunction _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {\n  let match;\n  while (match = wordDefinition.exec(text)) {\n    const matchIndex = match.index || 0;\n    if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {\n      return match;\n    } else if (stopPos > 0 && matchIndex > stopPos) {\n      return null;\n    }\n  }\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DateTimeout\": function() { return /* binding */ DateTimeout; },\n/* harmony export */   \"DiffAlgorithmResult\": function() { return /* binding */ DiffAlgorithmResult; },\n/* harmony export */   \"InfiniteTimeout\": function() { return /* binding */ InfiniteTimeout; },\n/* harmony export */   \"OffsetPair\": function() { return /* binding */ OffsetPair; },\n/* harmony export */   \"SequenceDiff\": function() { return /* binding */ SequenceDiff; }\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nclass DiffAlgorithmResult {\n  static trivial(seq1, seq2) {\n    return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], false);\n  }\n  static trivialTimedOut(seq1, seq2) {\n    return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], true);\n  }\n  constructor(diffs,\n  /**\n   * Indicates if the time out was reached.\n   * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n   */\n  hitTimeout) {\n    this.diffs = diffs;\n    this.hitTimeout = hitTimeout;\n  }\n}\nclass SequenceDiff {\n  static invert(sequenceDiffs, doc1Length) {\n    const result = [];\n    (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachAdjacent)(sequenceDiffs, (a, b) => {\n      result.push(SequenceDiff.fromOffsetPairs(a ? a.getEndExclusives() : OffsetPair.zero, b ? b.getStarts() : new OffsetPair(doc1Length, (a ? a.seq2Range.endExclusive - a.seq1Range.endExclusive : 0) + doc1Length)));\n    });\n    return result;\n  }\n  static fromOffsetPairs(start, endExclusive) {\n    return new SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset1, endExclusive.offset1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset2, endExclusive.offset2));\n  }\n  constructor(seq1Range, seq2Range) {\n    this.seq1Range = seq1Range;\n    this.seq2Range = seq2Range;\n  }\n  swap() {\n    return new SequenceDiff(this.seq2Range, this.seq1Range);\n  }\n  toString() {\n    return `${this.seq1Range} <-> ${this.seq2Range}`;\n  }\n  join(other) {\n    return new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\n  }\n  delta(offset) {\n    if (offset === 0) {\n      return this;\n    }\n    return new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));\n  }\n  deltaStart(offset) {\n    if (offset === 0) {\n      return this;\n    }\n    return new SequenceDiff(this.seq1Range.deltaStart(offset), this.seq2Range.deltaStart(offset));\n  }\n  deltaEnd(offset) {\n    if (offset === 0) {\n      return this;\n    }\n    return new SequenceDiff(this.seq1Range.deltaEnd(offset), this.seq2Range.deltaEnd(offset));\n  }\n  intersect(other) {\n    const i1 = this.seq1Range.intersect(other.seq1Range);\n    const i2 = this.seq2Range.intersect(other.seq2Range);\n    if (!i1 || !i2) {\n      return undefined;\n    }\n    return new SequenceDiff(i1, i2);\n  }\n  getStarts() {\n    return new OffsetPair(this.seq1Range.start, this.seq2Range.start);\n  }\n  getEndExclusives() {\n    return new OffsetPair(this.seq1Range.endExclusive, this.seq2Range.endExclusive);\n  }\n}\nclass OffsetPair {\n  constructor(offset1, offset2) {\n    this.offset1 = offset1;\n    this.offset2 = offset2;\n  }\n  toString() {\n    return `${this.offset1} <-> ${this.offset2}`;\n  }\n  delta(offset) {\n    if (offset === 0) {\n      return this;\n    }\n    return new OffsetPair(this.offset1 + offset, this.offset2 + offset);\n  }\n  equals(other) {\n    return this.offset1 === other.offset1 && this.offset2 === other.offset2;\n  }\n}\nOffsetPair.zero = new OffsetPair(0, 0);\nOffsetPair.max = new OffsetPair(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\nclass InfiniteTimeout {\n  isValid() {\n    return true;\n  }\n}\nInfiniteTimeout.instance = new InfiniteTimeout();\nclass DateTimeout {\n  constructor(timeout) {\n    this.timeout = timeout;\n    this.startTime = Date.now();\n    this.valid = true;\n    if (timeout <= 0) {\n      throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('timeout must be positive');\n    }\n  }\n  // Recommendation: Set a log-point `{this.disable()}` in the body\n  isValid() {\n    const valid = Date.now() - this.startTime < this.timeout;\n    if (!valid && this.valid) {\n      this.valid = false; // timeout reached\n      // eslint-disable-next-line no-debugger\n      debugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\n    }\n    return this.valid;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9hbGdvcml0aG1zL2RpZmZBbGdvcml0aG0uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUN1RTtBQUNHO0FBQ2Y7QUFDcEQsTUFBTUcsbUJBQW1CLENBQUM7RUFDN0IsT0FBT0MsT0FBT0EsQ0FBQ0MsSUFBSSxFQUFFQyxJQUFJLEVBQUU7SUFDdkIsT0FBTyxJQUFJSCxtQkFBbUIsQ0FBQyxDQUFDLElBQUlJLFlBQVksQ0FBQ0wsc0VBQW9CLENBQUNHLElBQUksQ0FBQ0ksTUFBTSxDQUFDLEVBQUVQLHNFQUFvQixDQUFDSSxJQUFJLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7RUFDbkk7RUFDQSxPQUFPQyxlQUFlQSxDQUFDTCxJQUFJLEVBQUVDLElBQUksRUFBRTtJQUMvQixPQUFPLElBQUlILG1CQUFtQixDQUFDLENBQUMsSUFBSUksWUFBWSxDQUFDTCxzRUFBb0IsQ0FBQ0csSUFBSSxDQUFDSSxNQUFNLENBQUMsRUFBRVAsc0VBQW9CLENBQUNJLElBQUksQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQztFQUNsSTtFQUNBRSxXQUFXQSxDQUFDQyxLQUFLO0VBQ2pCO0FBQ0o7QUFDQTtBQUNBO0VBQ0lDLFVBQVUsRUFBRTtJQUNSLElBQUksQ0FBQ0QsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0VBQ2hDO0FBQ0o7QUFDTyxNQUFNTixZQUFZLENBQUM7RUFDdEIsT0FBT08sTUFBTUEsQ0FBQ0MsYUFBYSxFQUFFQyxVQUFVLEVBQUU7SUFDckMsTUFBTUMsTUFBTSxHQUFHLEVBQUU7SUFDakJqQix1RUFBZSxDQUFDZSxhQUFhLEVBQUUsQ0FBQ0csQ0FBQyxFQUFFQyxDQUFDLEtB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QUFLLENBQUNKLE9BQU87RUFDM0U7QUFDSjtBQUNBUixVQUFVLENBQUNDLElBQUksR0FBRyxJQUFJRCxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0Q0EsVUFBVSxDQUFDc0IsR0FBRyxHQUFHLElBQUl0QixVQUFVLENBQUN1QixNQUFNLENBQUNDLGdCQUFnQixFQUFFRCxNQUFNLENBQUNDLGdCQUFnQixDQUFDO0FBQzFFLE1BQU1DLGVBQWUsQ0FBQztFQUN6QkMsT0FBT0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJO0VBQ2Y7QUFDSjtBQUNBRCxlQUFlLENBQUNFLFFBQVEsR0FBRyxJQUFJRixlQUFlLENBQUMsQ0FBQztBQUN6QyxNQUFNRyxXQUFXLENBQUM7RUFDckJ4QyxXQUFXQSxDQUFDeUMsT0FBTyxFQUFFO0lBQ2pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUk7SUFDakIsSUFBSUosT0FBTyxJQUFJLENBQUMsRUFBRTtNQUNkLE1BQU0sSUFBSW5ELHNFQUFrQixDQUFDLDBCQUEwQixDQUFDO0lBQzVEO0VBQ0o7RUFDQTtFQUNBZ0QsT0FBT0EsQ0FBQSxFQUFHO0lBQ04sTUFBTU8sS0FBSyxHQUFHRixJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDRixTQUFTLEdBQUcsSUFBSSxDQUFDRCxPQUFPO0lBQ3hELElBQUksQ0FBQ0ksS0FBSyxJQUFJLElBQUksQ0FBQ0EsS0FBSyxFQUFFO01BQ3RCLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO01BQ3BCO01BQ0EsU0FBUyxDQUFDO0lBQ2Q7SUFDQSxPQUFPLElBQUksQ0FBQ0EsS0FBSztFQUNyQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2FsZ29yaXRobXMvZGlmZkFsZ29yaXRobS5qcz9kMzRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgZm9yRWFjaEFkamFjZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vYmFzZS9jb21tb24vYXJyYXlzLmpzJztcbmltcG9ydCB7IEJ1Z0luZGljYXRpbmdFcnJvciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2Jhc2UvY29tbW9uL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBPZmZzZXRSYW5nZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvb2Zmc2V0UmFuZ2UuanMnO1xuZXhwb3J0IGNsYXNzIERpZmZBbGdvcml0aG1SZXN1bHQge1xuICAgIHN0YXRpYyB0cml2aWFsKHNlcTEsIHNlcTIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaWZmQWxnb3JpdGhtUmVzdWx0KFtuZXcgU2VxdWVuY2VEaWZmKE9mZnNldFJhbmdlLm9mTGVuZ3RoKHNlcTEubGVuZ3RoKSwgT2Zmc2V0UmFuZ2Uub2ZMZW5ndGgoc2VxMi5sZW5ndGgpKV0sIGZhbHNlKTtcbiAgICB9XG4gICAgc3RhdGljIHRyaXZpYWxUaW1lZE91dChzZXExLCBzZXEyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGlmZkFsZ29yaXRobVJlc3VsdChbbmV3IFNlcXVlbmNlRGlmZihPZmZzZXRSYW5nZS5vZkxlbmd0aChzZXExLmxlbmd0aCksIE9mZnNldFJhbmdlLm9mTGVuZ3RoKHNlcTIubGVuZ3RoKSldLCB0cnVlKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGlmZnMsIFxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgdGltZSBvdXQgd2FzIHJlYWNoZWQuXG4gICAgICogSW4gdGhhdCBjYXNlLCB0aGUgZGlmZnMgbWlnaHQgYmUgYW4gYXBwcm94aW1hdGlvbiBhbmQgdGhlIHVzZXIgc2hvdWxkIGJlIGFza2VkIHRvIHJlcnVuIHRoZSBkaWZmIHdpdGggbW9yZSB0aW1lLlxuICAgICAqL1xuICAgIGhpdFRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5kaWZmcyA9IGRpZmZzO1xuICAgICAgICB0aGlzLmhpdFRpbWVvdXQgPSBoaXRUaW1lb3V0O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTZXF1ZW5jZURpZmYge1xuICAgIHN0YXRpYyBpbnZlcnQoc2VxdWVuY2VEaWZmcywgZG9jMUxlbmd0aCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yRWFjaEFkamFjZW50KHNlcXVlbmNlRGlmZnMsIChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChTZXF1ZW5jZURpZmYuZnJvbU9mZnNldFBhaXJzKGEgPyBhLmdldEVuZEV4Y2x1c2l2ZXMoKSA6IE9mZnNldFBhaXIuemVybywgYiA/IGIuZ2V0U3RhcnRzKCkgOiBuZXcgT2Zmc2V0UGFpcihkb2MxTGVuZ3RoLCAoYSA/IGEuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSAtIGEuc2VxMVJhbmdlLmVuZEV4Y2x1c2l2ZSA6IDApICsgZG9jMUxlbmd0aCkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tT2Zmc2V0UGFpcnMoc3RhcnQsIGVuZEV4Y2x1c2l2ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbmNlRGlmZihuZXcgT2Zmc2V0UmFuZ2Uoc3RhcnQub2Zmc2V0MSwgZW5kRXhjbHVzaXZlLm9mZnNldDEpLCBuZXcgT2Zmc2V0UmFuZ2Uoc3RhcnQub2Zmc2V0MiwgZW5kRXhjbHVzaXZlLm9mZnNldDIpKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2VxMVJhbmdlLCBzZXEyUmFuZ2UpIHtcbiAgICAgICAgdGhpcy5zZXExUmFuZ2UgPSBzZXExUmFuZ2U7XG4gICAgICAgIHRoaXMuc2VxMlJhbmdlID0gc2VxMlJhbmdlO1xuICAgIH1cbiAgICBzd2FwKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbmNlRGlmZih0aGlzLnNlcTJSYW5nZSwgdGhpcy5zZXExUmFuZ2UpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc2VxMVJhbmdlfSA8LT4gJHt0aGlzLnNlcTJSYW5nZX1gO1xuICAgIH1cbiAgICBqb2luKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VxdWVuY2VEaWZmKHRoaXMuc2VxMVJhbmdlLmpvaW4ob3RoZXIuc2VxMVJhbmdlKSwgdGhpcy5zZXEyUmFuZ2Uuam9pbihvdGhlci5zZXEyUmFuZ2UpKTtcbiAgICB9XG4gICAgZGVsdGEob2Zmc2V0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2VxdWVuY2VEaWZmKHRoaXMuc2VxMVJhbmdlLmRlbHRhKG9mZnNldCksIHRoaXMuc2VxMlJhbmdlLmRlbHRhKG9mZnNldCkpO1xuICAgIH1cbiAgICBkZWx0YVN0YXJ0KG9mZnNldCkge1xuICAgICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbmNlRGlmZih0aGlzLnNlcTFSYW5nZS5kZWx0YVN0YXJ0KG9mZnNldCksIHRoaXMuc2VxMlJhbmdlLmRlbHRhU3RhcnQob2Zmc2V0KSk7XG4gICAgfVxuICAgIGRlbHRhRW5kKG9mZnNldCkge1xuICAgICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNlcXVlbmNlRGlmZih0aGlzLnNlcTFSYW5nZS5kZWx0YUVuZChvZmZzZXQpLCB0aGlzLnNlcTJSYW5nZS5kZWx0YUVuZChvZmZzZXQpKTtcbiAgICB9XG4gICAgaW50ZXJzZWN0KG90aGVyKSB7XG4gICAgICAgIGNvbnN0IGkxID0gdGhpcy5zZXExUmFuZ2UuaW50ZXJzZWN0KG90aGVyLnNlcTFSYW5nZSk7XG4gICAgICAgIGNvbnN0IGkyID0gdGhpcy5zZXEyUmFuZ2UuaW50ZXJzZWN0KG90aGVyLnNlcTJSYW5nZSk7XG4gICAgICAgIGlmICghaTEgfHwgIWkyKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2VxdWVuY2VEaWZmKGkxLCBpMik7XG4gICAgfVxuICAgIGdldFN0YXJ0cygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRQYWlyKHRoaXMuc2VxMVJhbmdlLnN0YXJ0LCB0aGlzLnNlcTJSYW5nZS5zdGFydCk7XG4gICAgfVxuICAgIGdldEVuZEV4Y2x1c2l2ZXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UGFpcih0aGlzLnNlcTFSYW5nZS5lbmRFeGNsdXNpdmUsIHRoaXMuc2VxMlJhbmdlLmVuZEV4Y2x1c2l2ZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE9mZnNldFBhaXIge1xuICAgIGNvbnN0cnVjdG9yKG9mZnNldDEsIG9mZnNldDIpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQxID0gb2Zmc2V0MTtcbiAgICAgICAgdGhpcy5vZmZzZXQyID0gb2Zmc2V0MjtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm9mZnNldDF9IDwtPiAke3RoaXMub2Zmc2V0Mn1gO1xuICAgIH1cbiAgICBkZWx0YShvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRQYWlyKHRoaXMub2Zmc2V0MSArIG9mZnNldCwgdGhpcy5vZmZzZXQyICsgb2Zmc2V0KTtcbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldDEgPT09IG90aGVyLm9mZnNldDEgJiYgdGhpcy5vZmZzZXQyID09PSBvdGhlci5vZmZzZXQyO1xuICAgIH1cbn1cbk9mZnNldFBhaXIuemVybyA9IG5ldyBPZmZzZXRQYWlyKDAsIDApO1xuT2Zmc2V0UGFpci5tYXggPSBuZXcgT2Zmc2V0UGFpcihOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuZXhwb3J0IGNsYXNzIEluZmluaXRlVGltZW91dCB7XG4gICAgaXNWYWxpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuSW5maW5pdGVUaW1lb3V0Lmluc3RhbmNlID0gbmV3IEluZmluaXRlVGltZW91dCgpO1xuZXhwb3J0IGNsYXNzIERhdGVUaW1lb3V0IHtcbiAgICBjb25zdHJ1Y3Rvcih0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG4gICAgICAgIGlmICh0aW1lb3V0IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ3RpbWVvdXQgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFJlY29tbWVuZGF0aW9uOiBTZXQgYSBsb2ctcG9pbnQgYHt0aGlzLmRpc2FibGUoKX1gIGluIHRoZSBib2R5XG4gICAgaXNWYWxpZCgpIHtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUgPCB0aGlzLnRpbWVvdXQ7XG4gICAgICAgIGlmICghdmFsaWQgJiYgdGhpcy52YWxpZCkge1xuICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlOyAvLyB0aW1lb3V0IHJlYWNoZWRcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAgICAgZGVidWdnZXI7IC8vIFdBUk5JTkc6IE1vc3QgbGlrZWx5IGRlYnVnZ2luZyBjYXVzZWQgdGhlIHRpbWVvdXQuIENhbGwgYHRoaXMuZGlzYWJsZSgpYCB0byBjb250aW51ZSB3aXRob3V0IHRpbWluZyBvdXQuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImZvckVhY2hBZGphY2VudCIsIkJ1Z0luZGljYXRpbmdFcnJvciIsIk9mZnNldFJhbmdlIiwiRGlmZkFsZ29yaXRobVJlc3VsdCIsInRyaXZpYWwiLCJzZXExIiwic2VxMiIsIlNlcXVlbmNlRGlmZiIsIm9mTGVuZ3RoIiwibGVuZ3RoIiwidHJpdmlhbFRpbWVkT3V0IiwiY29uc3RydWN0b3IiLCJkaWZmcyIsImhpdFRpbWVvdXQiLCJpbnZlcnQiLCJzZXF1ZW5jZURpZmZzIiwiZG9jMUxlbmd0aCIsInJlc3VsdCIsImEiLCJiIiwicHVzaCIsImZyb21PZmZzZXRQYWlycyIsImdldEVuZEV4Y2x1c2l2ZXMiLCJPZmZzZXRQYWlyIiwiemVybyIsImdldFN0YXJ0cyIsInNlcTJSYW5nZSIsImVuZEV4Y2x1c2l2ZSIsInNlcTFSYW5nZSIsInN0YXJ0Iiwib2Zmc2V0MSIsIm9mZnNldDIiLCJzd2FwIiwidG9TdHJpbmciLCJqb2luIiwib3RoZXIiLCJkZWx0YSIsIm9mZnNldCIsImRlbHRhU3RhcnQiLCJkZWx0YUVuZCIsImludGVyc2VjdCIsImkxIiwiaTIiLCJ1bmRlZmluZWQiLCJlcXVhbHMiLCJtYXgiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiSW5maW5pdGVUaW1lb3V0IiwiaXNWYWxpZCIsImluc3RhbmNlIiwiRGF0ZVRpbWVvdXQiLCJ0aW1lb3V0Iiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsInZhbGlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js ***!
  \*******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DynamicProgrammingDiffing\": function() { return /* binding */ DynamicProgrammingDiffing; }\n/* harmony export */ });\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n/**\n * A O(MN) diffing algorithm that supports a score function.\n * The algorithm can be improved by processing the 2d array diagonally.\n*/\nclass DynamicProgrammingDiffing {\n  compute(sequence1, sequence2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance, equalityScore) {\n    if (sequence1.length === 0 || sequence2.length === 0) {\n      return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(sequence1, sequence2);\n    }\n    /**\n     * lcsLengths.get(i, j): Length of the longest common subsequence of sequence1.substring(0, i + 1) and sequence2.substring(0, j + 1).\n     */\n    const lcsLengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\n    const directions = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\n    const lengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\n    // ==== Initializing lcsLengths ====\n    for (let s1 = 0; s1 < sequence1.length; s1++) {\n      for (let s2 = 0; s2 < sequence2.length; s2++) {\n        if (!timeout.isValid()) {\n          return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(sequence1, sequence2);\n        }\n        const horizontalLen = s1 === 0 ? 0 : lcsLengths.get(s1 - 1, s2);\n        const verticalLen = s2 === 0 ? 0 : lcsLengths.get(s1, s2 - 1);\n        let extendedSeqScore;\n        if (sequence1.getElement(s1) === sequence2.getElement(s2)) {\n          if (s1 === 0 || s2 === 0) {\n            extendedSeqScore = 0;\n          } else {\n            extendedSeqScore = lcsLengths.get(s1 - 1, s2 - 1);\n          }\n          if (s1 > 0 && s2 > 0 && directions.get(s1 - 1, s2 - 1) === 3) {\n            // Prefer consecutive diagonals\n            extendedSeqScore += lengths.get(s1 - 1, s2 - 1);\n          }\n          extendedSeqScore += equalityScore ? equalityScore(s1, s2) : 1;\n        } else {\n          extendedSeqScore = -1;\n        }\n        const newValue = Math.max(horizontalLen, verticalLen, extendedSeqScore);\n        if (newValue === extendedSeqScore) {\n          // Prefer diagonals\n          const prevLen = s1 > 0 && s2 > 0 ? lengths.get(s1 - 1, s2 - 1) : 0;\n          lengths.set(s1, s2, prevLen + 1);\n          directions.set(s1, s2, 3);\n        } else if (newValue === horizontalLen) {\n          lengths.set(s1, s2, 0);\n          directions.set(s1, s2, 1);\n        } else if (newValue === verticalLen) {\n          lengths.set(s1, s2, 0);\n          directions.set(s1, s2, 2);\n        }\n        lcsLengths.set(s1, s2, newValue);\n      }\n    }\n    // ==== Backtracking ====\n    const result = [];\n    let lastAligningPosS1 = sequence1.length;\n    let lastAligningPosS2 = sequence2.length;\n    function reportDecreasingAligningPositions(s1, s2) {\n      if (s1 + 1 !== lastAligningPosS1 || s2 + 1 !== lastAligningPosS2) {\n        result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s1 + 1, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s2 + 1, lastAligningPosS2)));\n      }\n      lastAligningPosS1 = s1;\n      lastAligningPosS2 = s2;\n    }\n    let s1 = sequence1.length - 1;\n    let s2 = sequence2.length - 1;\n    while (s1 >= 0 && s2 >= 0) {\n      if (directions.get(s1, s2) === 3) {\n        reportDecreasingAligningPositions(s1, s2);\n        s1--;\n        s2--;\n      } else {\n        if (directions.get(s1, s2) === 1) {\n          s1--;\n        } else {\n          s2--;\n        }\n      }\n    }\n    reportDecreasingAligningPositions(-1, -1);\n    result.reverse();\n    return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js ***!
  \************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MyersDiffAlgorithm\": function() { return /* binding */ MyersDiffAlgorithm; }\n/* harmony export */ });\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * An O(ND) diff algorithm that has a quadratic space worst-case complexity.\n*/\nclass MyersDiffAlgorithm {\n  compute(seq1, seq2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance) {\n    // These are common special cases.\n    // The early return improves performance dramatically.\n    if (seq1.length === 0 || seq2.length === 0) {\n      return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(seq1, seq2);\n    }\n    const seqX = seq1; // Text on the x axis\n    const seqY = seq2; // Text on the y axis\n    function getXAfterSnake(x, y) {\n      while (x < seqX.length && y < seqY.length && seqX.getElement(x) === seqY.getElement(y)) {\n        x++;\n        y++;\n      }\n      return x;\n    }\n    let d = 0;\n    // V[k]: X value of longest d-line that ends in diagonal k.\n    // d-line: path from (0,0) to (x,y) that uses exactly d non-diagonals.\n    // diagonal k: Set of points (x,y) with x-y = k.\n    // k=1 -> (1,0),(2,1)\n    const V = new FastInt32Array();\n    V.set(0, getXAfterSnake(0, 0));\n    const paths = new FastArrayNegativeIndices();\n    paths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));\n    let k = 0;\n    loop: while (true) {\n      d++;\n      if (!timeout.isValid()) {\n        return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(seqX, seqY);\n      }\n      // The paper has `for (k = -d; k <= d; k += 2)`, but we can ignore diagonals that cannot influence the result.\n      const lowerBound = -Math.min(d, seqY.length + d % 2);\n      const upperBound = Math.min(d, seqX.length + d % 2);\n      for (k = lowerBound; k <= upperBound; k += 2) {\n        let step = 0;\n        // We can use the X values of (d-1)-lines to compute X value of the longest d-lines.\n        const maxXofDLineTop = k === upperBound ? -1 : V.get(k + 1); // We take a vertical non-diagonal (add a symbol in seqX)\n        const maxXofDLineLeft = k === lowerBound ? -1 : V.get(k - 1) + 1; // We take a horizontal non-diagonal (+1 x) (delete a symbol in seqX)\n        step++;\n        const x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seqX.length);\n        const y = x - k;\n        step++;\n        if (x > seqX.length || y > seqY.length) {\n          // This diagonal is irrelevant for the result.\n          // TODO: Don't pay the cost for this in the next iteration.\n          continue;\n        }\n        const newMaxX = getXAfterSnake(x, y);\n        V.set(k, newMaxX);\n        const lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);\n        paths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);\n        if (V.get(k) === seqX.length && V.get(k) - k === seqY.length) {\n          break loop;\n        }\n      }\n    }\n    let path = paths.get(k);\n    const result = [];\n    let lastAligningPosS1 = seqX.length;\n    let lastAligningPosS2 = seqY.length;\n    while (true) {\n      const endX = path ? path.x + path.length : 0;\n      const endY = path ? path.y + path.length : 0;\n      if (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {\n        result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endX, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endY, lastAligningPosS2)));\n      }\n      if (!path) {\n        break;\n      }\n      lastAligningPosS1 = path.x;\n      lastAligningPosS2 = path.y;\n      path = path.prev;\n    }\n    result.reverse();\n    return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);\n  }\n}\nclass SnakePath {\n  constructor(prev, x, y, length) {\n    this.prev = prev;\n    this.x = x;\n    this.y = y;\n    this.length = length;\n  }\n}\n/**\n * An array that supports fast negative indices.\n*/\nclass FastInt32Array {\n  constructor() {\n    this.positiveArr = new Int32Array(10);\n    this.negativeArr = new Int32Array(10);\n  }\n  get(idx) {\n    if (idx < 0) {\n      idx = -idx - 1;\n      return this.negativeArr[idx];\n    } else {\n      return this.positiveArr[idx];\n    }\n  }\n  set(idx, value) {\n    if (idx < 0) {\n      idx = -idx - 1;\n      if (idx >= this.negativeArr.length) {\n        const arr = this.negativeArr;\n        this.negativeArr = new Int32Array(arr.length * 2);\n        this.negativeArr.set(arr);\n      }\n      this.negativeArr[idx] = value;\n    } else {\n      if (idx >= this.positiveArr.length) {\n        const arr = this.positiveArr;\n        this.positiveArr = new Int32Array(arr.length * 2);\n        this.positiveArr.set(arr);\n      }\n      this.positiveArr[idx] = value;\n    }\n  }\n}\n/**\n * An array that supports fast negative indices.\n*/\nclass FastArrayNegativeIndices {\n  constructor() {\n    this.positiveArr = [];\n    this.negativeArr = [];\n  }\n  get(idx) {\n    if (idx < 0) {\n      idx = -idx - 1;\n      return this.negativeArr[idx];\n    } else {\n      return this.positiveArr[idx];\n    }\n  }\n  set(idx, value) {\n    if (idx < 0) {\n      idx = -idx - 1;\n      this.negativeArr[idx] = value;\n    } else {\n      this.positiveArr[idx] = value;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computeMovedLines\": function() { return /* binding */ computeMovedLines; }\n/* harmony export */ });\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/map.js */ \"./node_modules/monaco-editor/esm/vs/base/common/map.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\n\nfunction computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {\n  let {\n    moves,\n    excludedChanges\n  } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);\n  if (!timeout.isValid()) {\n    return [];\n  }\n  const filteredChanges = changes.filter(c => !excludedChanges.has(c));\n  const unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\n  (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.pushMany)(moves, unchangedMoves);\n  moves = joinCloseConsecutiveMoves(moves);\n  // Ignore too short moves\n  moves = moves.filter(current => {\n    const lines = current.original.toOffsetRange().slice(originalLines).map(l => l.trim());\n    const originalText = lines.join('\\n');\n    return originalText.length >= 15 && countWhere(lines, l => l.length >= 2) >= 2;\n  });\n  moves = removeMovesInSameDiff(changes, moves);\n  return moves;\n}\nfunction countWhere(arr, predicate) {\n  let count = 0;\n  for (const t of arr) {\n    if (predicate(t)) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {\n  const moves = [];\n  const deletions = changes.filter(c => c.modified.isEmpty && c.original.length >= 3).map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.original, originalLines, d));\n  const insertions = new Set(changes.filter(c => c.original.isEmpty && c.modified.length >= 3).map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.modified, modifiedLines, d)));\n  const excludedChanges = new Set();\n  for (const deletion of deletions) {\n    let highestSimilarity = -1;\n    let best;\n    for (const insertion of insertions) {\n      const similarity = deletion.computeSimilarity(insertion);\n      if (similarity > highestSimilarity) {\n        highestSimilarity = similarity;\n        best = insertion;\n      }\n    }\n    if (highestSimilarity > 0.90 && best) {\n      insertions.delete(best);\n      moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(deletion.range, best.range));\n      excludedChanges.add(deletion.source);\n      excludedChanges.add(best.source);\n    }\n    if (!timeout.isValid()) {\n      return {\n        moves,\n        excludedChanges\n      };\n    }\n  }\n  return {\n    moves,\n    excludedChanges\n  };\n}\nfunction computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {\n  const moves = [];\n  const original3LineHashes = new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.SetMap();\n  for (const change of changes) {\n    for (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {\n      const key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\n      original3LineHashes.add(key, {\n        range: new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3)\n      });\n    }\n  }\n  const possibleMappings = [];\n  changes.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(c => c.modified.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\n  for (const change of changes) {\n    let lastMappings = [];\n    for (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {\n      const key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\n      const currentModifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3);\n      const nextMappings = [];\n      original3LineHashes.forEach(key, ({\n        range\n      }) => {\n        for (const lastMapping of lastMappings) {\n          // does this match extend some last match?\n          if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive && lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\n            lastMapping.originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\n            lastMapping.modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\n            nextMappings.push(lastMapping);\n            return;\n          }\n        }\n        const mapping = {\n          modifiedLineRange: currentModifiedRange,\n          originalLineRange: range\n        };\n        possibleMappings.push(mapping);\n        nextMappings.push(mapping);\n      });\n      lastMappings = nextMappings;\n    }\n    if (!timeout.isValid()) {\n      return [];\n    }\n  }\n  possibleMappings.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.reverseOrder)((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.modifiedLineRange.length, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator)));\n  const modifiedSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();\n  const originalSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();\n  for (const mapping of possibleMappings) {\n    const diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\n    const modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\n    const originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\n    const modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\n    for (const s of modifiedIntersectedSections.ranges) {\n      if (s.length < 3) {\n        continue;\n      }\n      const modifiedLineRange = s;\n      const originalLineRange = s.delta(-diffOrigToMod);\n      moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(originalLineRange, modifiedLineRange));\n      modifiedSet.addRange(modifiedLineRange);\n      originalSet.addRange(originalLineRange);\n    }\n  }\n  moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\n  const monotonousChanges = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);\n  for (let i = 0; i < moves.length; i++) {\n    const move = moves[i];\n    const firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber);\n    const firstTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber);\n    const linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);\n    const lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive);\n    const lastTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive);\n    const linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);\n    let extendToTop;\n    for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n      const origLine = move.original.startLineNumber - extendToTop - 1;\n      const modLine = move.modified.startLineNumber - extendToTop - 1;\n      if (origLine > originalLines.length || modLine > modifiedLines.length) {\n        break;\n      }\n      if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n        break;\n      }\n      if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n        break;\n      }\n    }\n    if (extendToTop > 0) {\n      originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\n      modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\n    }\n    let extendToBottom;\n    for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n      const origLine = move.original.endLineNumberExclusive + extendToBottom;\n      const modLine = move.modified.endLineNumberExclusive + extendToBottom;\n      if (origLine > originalLines.length || modLine > modifiedLines.length) {\n        break;\n      }\n      if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n        break;\n      }\n      if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n        break;\n      }\n    }\n    if (extendToBottom > 0) {\n      originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n      modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n    }\n    if (extendToTop > 0 || extendToBottom > 0) {\n      moves[i] = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));\n    }\n  }\n  return moves;\n}\nfunction areLinesSimilar(line1, line2, timeout) {\n  if (line1.trim() === line2.trim()) {\n    return true;\n  }\n  if (line1.length > 300 && line2.length > 300) {\n    return false;\n  }\n  const myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__.MyersDiffAlgorithm();\n  const result = myersDiffingAlgorithm.compute(new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line1], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line2], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), timeout);\n  let commonNonSpaceCharCount = 0;\n  const inverted = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__.SequenceDiff.invert(result.diffs, line1.length);\n  for (const seq of inverted) {\n    seq.seq1Range.forEach(idx => {\n      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(line1.charCodeAt(idx))) {\n        commonNonSpaceCharCount++;\n      }\n    });\n  }\n  function countNonWsChars(str) {\n    let count = 0;\n    for (let i = 0; i < line1.length; i++) {\n      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(str.charCodeAt(i))) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\n  const r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\n  return r;\n}\nfunction joinCloseConsecutiveMoves(moves) {\n  if (moves.length === 0) {\n    return moves;\n  }\n  moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\n  const result = [moves[0]];\n  for (let i = 1; i < moves.length; i++) {\n    const last = result[result.length - 1];\n    const current = moves[i];\n    const originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\n    const modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\n    const currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n    if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n      result[result.length - 1] = last.join(current);\n      continue;\n    }\n    result.push(current);\n  }\n  return result;\n}\nfunction removeMovesInSameDiff(changes, moves) {\n  const changesMonotonous = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);\n  moves = moves.filter(m => {\n    const diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(c => c.original.startLineNumber < m.original.endLineNumberExclusive) || new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1));\n    const diffBeforeEndOfMoveModified = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber < m.modified.endLineNumberExclusive);\n    const differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\n    return differentDiffs;\n  });\n  return moves;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DefaultLinesDiffComputer\": function() { return /* binding */ DefaultLinesDiffComputer; },\n/* harmony export */   \"getLineRangeMapping\": function() { return /* binding */ getLineRangeMapping; },\n/* harmony export */   \"lineRangeMappingFromRangeMappings\": function() { return /* binding */ lineRangeMappingFromRangeMappings; }\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./algorithms/dynamicProgrammingDiffing.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js\");\n/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\");\n/* harmony import */ var _computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./computeMovedLines.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js\");\n/* harmony import */ var _heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./heuristicSequenceOptimizations.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js\");\n/* harmony import */ var _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lineSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js\");\n/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\");\n/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../linesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass DefaultLinesDiffComputer {\n  constructor() {\n    this.dynamicProgrammingDiffing = new _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__.DynamicProgrammingDiffing();\n    this.myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__.MyersDiffAlgorithm();\n  }\n  computeDiff(originalLines, modifiedLines, options) {\n    if (originalLines.length <= 1 && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(originalLines, modifiedLines, (a, b) => a === b)) {\n      return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff([], [], false);\n    }\n    if (originalLines.length === 1 && originalLines[0].length === 0 || modifiedLines.length === 1 && modifiedLines[0].length === 0) {\n      return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff([new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, originalLines.length + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, modifiedLines.length + 1), [new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, originalLines.length, originalLines[originalLines.length - 1].length + 1), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, modifiedLines.length, modifiedLines[modifiedLines.length - 1].length + 1))])], [], false);\n    }\n    const timeout = options.maxComputationTimeMs === 0 ? _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.InfiniteTimeout.instance : new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.DateTimeout(options.maxComputationTimeMs);\n    const considerWhitespaceChanges = !options.ignoreTrimWhitespace;\n    const perfectHashes = new Map();\n    function getOrCreateHash(text) {\n      let hash = perfectHashes.get(text);\n      if (hash === undefined) {\n        hash = perfectHashes.size;\n        perfectHashes.set(text, hash);\n      }\n      return hash;\n    }\n    const originalLinesHashes = originalLines.map(l => getOrCreateHash(l.trim()));\n    const modifiedLinesHashes = modifiedLines.map(l => getOrCreateHash(l.trim()));\n    const sequence1 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__.LineSequence(originalLinesHashes, originalLines);\n    const sequence2 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__.LineSequence(modifiedLinesHashes, modifiedLines);\n    const lineAlignmentResult = (() => {\n      if (sequence1.length + sequence2.length < 1700) {\n        // Use the improved algorithm for small files\n        return this.dynamicProgrammingDiffing.compute(sequence1, sequence2, timeout, (offset1, offset2) => originalLines[offset1] === modifiedLines[offset2] ? modifiedLines[offset2].length === 0 ? 0.1 : 1 + Math.log(1 + modifiedLines[offset2].length) : 0.99);\n      }\n      return this.myersDiffingAlgorithm.compute(sequence1, sequence2);\n    })();\n    let lineAlignments = lineAlignmentResult.diffs;\n    let hitTimeout = lineAlignmentResult.hitTimeout;\n    lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(sequence1, sequence2, lineAlignments);\n    lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingLinesBetweenDiffs)(sequence1, sequence2, lineAlignments);\n    const alignments = [];\n    const scanForWhitespaceChanges = equalLinesCount => {\n      if (!considerWhitespaceChanges) {\n        return;\n      }\n      for (let i = 0; i < equalLinesCount; i++) {\n        const seq1Offset = seq1LastStart + i;\n        const seq2Offset = seq2LastStart + i;\n        if (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {\n          // This is because of whitespace changes, diff these lines\n          const characterDiffs = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq1Offset, seq1Offset + 1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq2Offset, seq2Offset + 1)), timeout, considerWhitespaceChanges);\n          for (const a of characterDiffs.mappings) {\n            alignments.push(a);\n          }\n          if (characterDiffs.hitTimeout) {\n            hitTimeout = true;\n          }\n        }\n      }\n    };\n    let seq1LastStart = 0;\n    let seq2LastStart = 0;\n    for (const diff of lineAlignments) {\n      (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);\n      const equalLinesCount = diff.seq1Range.start - seq1LastStart;\n      scanForWhitespaceChanges(equalLinesCount);\n      seq1LastStart = diff.seq1Range.endExclusive;\n      seq2LastStart = diff.seq2Range.endExclusive;\n      const characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);\n      if (characterDiffs.hitTimeout) {\n        hitTimeout = true;\n      }\n      for (const a of characterDiffs.mappings) {\n        alignments.push(a);\n      }\n    }\n    scanForWhitespaceChanges(originalLines.length - seq1LastStart);\n    const changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);\n    let moves = [];\n    if (options.computeMoves) {\n      moves = this.computeMoves(changes, originalLines, modifiedLines, originalLinesHashes, modifiedLinesHashes, timeout, considerWhitespaceChanges);\n    }\n    // Make sure all ranges are valid\n    (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {\n      function validatePosition(pos, lines) {\n        if (pos.lineNumber < 1 || pos.lineNumber > lines.length) {\n          return false;\n        }\n        const line = lines[pos.lineNumber - 1];\n        if (pos.column < 1 || pos.column > line.length + 1) {\n          return false;\n        }\n        return true;\n      }\n      function validateRange(range, lines) {\n        if (range.startLineNumber < 1 || range.startLineNumber > lines.length + 1) {\n          return false;\n        }\n        if (range.endLineNumberExclusive < 1 || range.endLineNumberExclusive > lines.length + 1) {\n          return false;\n        }\n        return true;\n      }\n      for (const c of changes) {\n        if (!c.innerChanges) {\n          return false;\n        }\n        for (const ic of c.innerChanges) {\n          const valid = validatePosition(ic.modifiedRange.getStartPosition(), modifiedLines) && validatePosition(ic.modifiedRange.getEndPosition(), modifiedLines) && validatePosition(ic.originalRange.getStartPosition(), originalLines) && validatePosition(ic.originalRange.getEndPosition(), originalLines);\n          if (!valid) {\n            return false;\n          }\n        }\n        if (!validateRange(c.modified, modifiedLines) || !validateRange(c.original, originalLines)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff(changes, moves, hitTimeout);\n  }\n  computeMoves(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout, considerWhitespaceChanges) {\n    const moves = (0,_computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__.computeMovedLines)(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout);\n    const movesWithDiffs = moves.map(m => {\n      const moveChanges = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(m.original.toOffsetRange(), m.modified.toOffsetRange()), timeout, considerWhitespaceChanges);\n      const mappings = lineRangeMappingFromRangeMappings(moveChanges.mappings, originalLines, modifiedLines, true);\n      return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.MovedText(m, mappings);\n    });\n    return movesWithDiffs;\n  }\n  refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges) {\n    const slice1 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__.LinesSliceCharSequence(originalLines, diff.seq1Range, considerWhitespaceChanges);\n    const slice2 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__.LinesSliceCharSequence(modifiedLines, diff.seq2Range, considerWhitespaceChanges);\n    const diffResult = slice1.length + slice2.length < 500 ? this.dynamicProgrammingDiffing.compute(slice1, slice2, timeout) : this.myersDiffingAlgorithm.compute(slice1, slice2, timeout);\n    let diffs = diffResult.diffs;\n    diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(slice1, slice2, diffs);\n    diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.extendDiffsToEntireWordIfAppropriate)(slice1, slice2, diffs);\n    diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeShortMatches)(slice1, slice2, diffs);\n    diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingTextBetweenLongDiffs)(slice1, slice2, diffs);\n    const result = diffs.map(d => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.RangeMapping(slice1.translateRange(d.seq1Range), slice2.translateRange(d.seq2Range)));\n    // Assert: result applied on original should be the same as diff applied to original\n    return {\n      mappings: result,\n      hitTimeout: diffResult.hitTimeout\n    };\n  }\n}\nfunction lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines, dontAssertStartLine = false) {\n  const changes = [];\n  for (const g of (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.groupAdjacentBy)(alignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)), (a1, a2) => a1.original.overlapOrTouch(a2.original) || a1.modified.overlapOrTouch(a2.modified))) {\n    const first = g[0];\n    const last = g[g.length - 1];\n    changes.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(first.original.join(last.original), first.modified.join(last.modified), g.map(a => a.innerChanges[0])));\n  }\n  (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {\n    if (!dontAssertStartLine && changes.length > 0) {\n      if (changes[0].modified.startLineNumber !== changes[0].original.startLineNumber) {\n        return false;\n      }\n      if (modifiedLines.length - changes[changes.length - 1].modified.endLineNumberExclusive !== originalLines.length - changes[changes.length - 1].original.endLineNumberExclusive) {\n        return false;\n      }\n    }\n    return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n    // There has to be an unchanged line in between (otherwise both diffs should have been joined)\n    m1.original.endLineNumberExclusive < m2.original.startLineNumber && m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\n  });\n  return changes;\n}\nfunction getLineRangeMapping(rangeMapping, originalLines, modifiedLines) {\n  let lineStartDelta = 0;\n  let lineEndDelta = 0;\n  // rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.\n  // original: ]xxx \\n <- this line is not modified\n  // modified: ]xx  \\n\n  if (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1 && rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber && rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {\n    // We can only do this if the range is not empty yet\n    lineEndDelta = -1;\n  }\n  // original: xxx[ \\n <- this line is not modified\n  // modified: xxx[ \\n\n  if (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length && rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length && rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta && rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {\n    // We can only do this if the range is not empty yet\n    lineStartDelta = 1;\n  }\n  const originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.originalRange.startLineNumber + lineStartDelta, rangeMapping.originalRange.endLineNumber + 1 + lineEndDelta);\n  const modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.modifiedRange.startLineNumber + lineStartDelta, rangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta);\n  return new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extendDiffsToEntireWordIfAppropriate\": function() { return /* binding */ extendDiffsToEntireWordIfAppropriate; },\n/* harmony export */   \"optimizeSequenceDiffs\": function() { return /* binding */ optimizeSequenceDiffs; },\n/* harmony export */   \"removeShortMatches\": function() { return /* binding */ removeShortMatches; },\n/* harmony export */   \"removeVeryShortMatchingLinesBetweenDiffs\": function() { return /* binding */ removeVeryShortMatchingLinesBetweenDiffs; },\n/* harmony export */   \"removeVeryShortMatchingTextBetweenLongDiffs\": function() { return /* binding */ removeVeryShortMatchingTextBetweenLongDiffs; }\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction optimizeSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\n  let result = sequenceDiffs;\n  result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\n  // Sometimes, calling this function twice improves the result.\n  // Uncomment the second invocation and run the tests to see the difference.\n  result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\n  result = shiftSequenceDiffs(sequence1, sequence2, result);\n  return result;\n}\n/**\n * This function fixes issues like this:\n * ```\n * import { Baz, Bar } from \"foo\";\n * ```\n * <->\n * ```\n * import { Baz, Bar, Foo } from \"foo\";\n * ```\n * Computed diff: [ {Add \",\" after Bar}, {Add \"Foo \" after space} }\n * Improved diff: [{Add \", Foo\" after Bar}]\n */\nfunction joinSequenceDiffsByShifting(sequence1, sequence2, sequenceDiffs) {\n  if (sequenceDiffs.length === 0) {\n    return sequenceDiffs;\n  }\n  const result = [];\n  result.push(sequenceDiffs[0]);\n  // First move them all to the left as much as possible and join them if possible\n  for (let i = 1; i < sequenceDiffs.length; i++) {\n    const prevResult = result[result.length - 1];\n    let cur = sequenceDiffs[i];\n    if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\n      const length = cur.seq1Range.start - prevResult.seq1Range.endExclusive;\n      let d;\n      for (d = 1; d <= length; d++) {\n        if (sequence1.getElement(cur.seq1Range.start - d) !== sequence1.getElement(cur.seq1Range.endExclusive - d) || sequence2.getElement(cur.seq2Range.start - d) !== sequence2.getElement(cur.seq2Range.endExclusive - d)) {\n          break;\n        }\n      }\n      d--;\n      if (d === length) {\n        // Merge previous and current diff\n        result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq1Range.start, cur.seq1Range.endExclusive - length), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq2Range.start, cur.seq2Range.endExclusive - length));\n        continue;\n      }\n      cur = cur.delta(-d);\n    }\n    result.push(cur);\n  }\n  const result2 = [];\n  // Then move them all to the right and join them again if possible\n  for (let i = 0; i < result.length - 1; i++) {\n    const nextResult = result[i + 1];\n    let cur = result[i];\n    if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\n      const length = nextResult.seq1Range.start - cur.seq1Range.endExclusive;\n      let d;\n      for (d = 0; d < length; d++) {\n        if (!sequence1.isStronglyEqual(cur.seq1Range.start + d, cur.seq1Range.endExclusive + d) || !sequence2.isStronglyEqual(cur.seq2Range.start + d, cur.seq2Range.endExclusive + d)) {\n          break;\n        }\n      }\n      if (d === length) {\n        // Merge previous and current diff, write to result!\n        result[i + 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.start + length, nextResult.seq1Range.endExclusive), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq2Range.start + length, nextResult.seq2Range.endExclusive));\n        continue;\n      }\n      if (d > 0) {\n        cur = cur.delta(d);\n      }\n    }\n    result2.push(cur);\n  }\n  if (result.length > 0) {\n    result2.push(result[result.length - 1]);\n  }\n  return result2;\n}\n// align character level diffs at whitespace characters\n// import { IBar } from \"foo\";\n// import { I[Arr, I]Bar } from \"foo\";\n// ->\n// import { [IArr, ]IBar } from \"foo\";\n// import { ITransaction, observableValue, transaction } from 'vs/base/common/observable';\n// import { ITransaction, observable[FromEvent, observable]Value, transaction } from 'vs/base/common/observable';\n// ->\n// import { ITransaction, [observableFromEvent, ]observableValue, transaction } from 'vs/base/common/observable';\n// collectBrackets(level + 1, levelPerBracketType);\n// collectBrackets(level + 1, levelPerBracket[ + 1, levelPerBracket]Type);\n// ->\n// collectBrackets(level + 1, [levelPerBracket + 1, ]levelPerBracketType);\nfunction shiftSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\n  if (!sequence1.getBoundaryScore || !sequence2.getBoundaryScore) {\n    return sequenceDiffs;\n  }\n  for (let i = 0; i < sequenceDiffs.length; i++) {\n    const prevDiff = i > 0 ? sequenceDiffs[i - 1] : undefined;\n    const diff = sequenceDiffs[i];\n    const nextDiff = i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1] : undefined;\n    const seq1ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq1Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq1Range.start - 1 : sequence1.length);\n    const seq2ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq2Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq2Range.start - 1 : sequence2.length);\n    if (diff.seq1Range.isEmpty) {\n      sequenceDiffs[i] = shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange);\n    } else if (diff.seq2Range.isEmpty) {\n      sequenceDiffs[i] = shiftDiffToBetterPosition(diff.swap(), sequence2, sequence1, seq2ValidRange, seq1ValidRange).swap();\n    }\n  }\n  return sequenceDiffs;\n}\nfunction shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange) {\n  const maxShiftLimit = 100; // To prevent performance issues\n  // don't touch previous or next!\n  let deltaBefore = 1;\n  while (diff.seq1Range.start - deltaBefore >= seq1ValidRange.start && diff.seq2Range.start - deltaBefore >= seq2ValidRange.start && sequence2.isStronglyEqual(diff.seq2Range.start - deltaBefore, diff.seq2Range.endExclusive - deltaBefore) && deltaBefore < maxShiftLimit) {\n    deltaBefore++;\n  }\n  deltaBefore--;\n  let deltaAfter = 0;\n  while (diff.seq1Range.start + deltaAfter < seq1ValidRange.endExclusive && diff.seq2Range.endExclusive + deltaAfter < seq2ValidRange.endExclusive && sequence2.isStronglyEqual(diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter) && deltaAfter < maxShiftLimit) {\n    deltaAfter++;\n  }\n  if (deltaBefore === 0 && deltaAfter === 0) {\n    return diff;\n  }\n  // Visualize `[sequence1.text, diff.seq1Range.start + deltaAfter]`\n  // and `[sequence2.text, diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter]`\n  let bestDelta = 0;\n  let bestScore = -1;\n  // find best scored delta\n  for (let delta = -deltaBefore; delta <= deltaAfter; delta++) {\n    const seq2OffsetStart = diff.seq2Range.start + delta;\n    const seq2OffsetEndExclusive = diff.seq2Range.endExclusive + delta;\n    const seq1Offset = diff.seq1Range.start + delta;\n    const score = sequence1.getBoundaryScore(seq1Offset) + sequence2.getBoundaryScore(seq2OffsetStart) + sequence2.getBoundaryScore(seq2OffsetEndExclusive);\n    if (score > bestScore) {\n      bestScore = score;\n      bestDelta = delta;\n    }\n  }\n  return diff.delta(bestDelta);\n}\nfunction removeShortMatches(sequence1, sequence2, sequenceDiffs) {\n  const result = [];\n  for (const s of sequenceDiffs) {\n    const last = result[result.length - 1];\n    if (!last) {\n      result.push(s);\n      continue;\n    }\n    if (s.seq1Range.start - last.seq1Range.endExclusive <= 2 || s.seq2Range.start - last.seq2Range.endExclusive <= 2) {\n      result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(last.seq1Range.join(s.seq1Range), last.seq2Range.join(s.seq2Range));\n    } else {\n      result.push(s);\n    }\n  }\n  return result;\n}\nfunction extendDiffsToEntireWordIfAppropriate(sequence1, sequence2, sequenceDiffs) {\n  const equalMappings = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff.invert(sequenceDiffs, sequence1.length);\n  const additional = [];\n  let lastPoint = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair(0, 0);\n  function scanWord(pair, equalMapping) {\n    if (pair.offset1 < lastPoint.offset1 || pair.offset2 < lastPoint.offset2) {\n      return;\n    }\n    const w1 = sequence1.findWordContaining(pair.offset1);\n    const w2 = sequence2.findWordContaining(pair.offset2);\n    if (!w1 || !w2) {\n      return;\n    }\n    let w = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(w1, w2);\n    const equalPart = w.intersect(equalMapping);\n    let equalChars1 = equalPart.seq1Range.length;\n    let equalChars2 = equalPart.seq2Range.length;\n    // The words do not touch previous equals mappings, as we would have processed them already.\n    // But they might touch the next ones.\n    while (equalMappings.length > 0) {\n      const next = equalMappings[0];\n      const intersects = next.seq1Range.intersects(w.seq1Range) || next.seq2Range.intersects(w.seq2Range);\n      if (!intersects) {\n        break;\n      }\n      const v1 = sequence1.findWordContaining(next.seq1Range.start);\n      const v2 = sequence2.findWordContaining(next.seq2Range.start);\n      // Because there is an intersection, we know that the words are not empty.\n      const v = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(v1, v2);\n      const equalPart = v.intersect(next);\n      equalChars1 += equalPart.seq1Range.length;\n      equalChars2 += equalPart.seq2Range.length;\n      w = w.join(v);\n      if (w.seq1Range.endExclusive >= next.seq1Range.endExclusive) {\n        // The word extends beyond the next equal mapping.\n        equalMappings.shift();\n      } else {\n        break;\n      }\n    }\n    if (equalChars1 + equalChars2 < (w.seq1Range.length + w.seq2Range.length) * 2 / 3) {\n      additional.push(w);\n    }\n    lastPoint = w.getEndExclusives();\n  }\n  while (equalMappings.length > 0) {\n    const next = equalMappings.shift();\n    if (next.seq1Range.isEmpty) {\n      continue;\n    }\n    scanWord(next.getStarts(), next);\n    // The equal parts are not empty, so -1 gives us a character that is equal in both parts.\n    scanWord(next.getEndExclusives().delta(-1), next);\n  }\n  const merged = mergeSequenceDiffs(sequenceDiffs, additional);\n  return merged;\n}\nfunction mergeSequenceDiffs(sequenceDiffs1, sequenceDiffs2) {\n  const result = [];\n  while (sequenceDiffs1.length > 0 || sequenceDiffs2.length > 0) {\n    const sd1 = sequenceDiffs1[0];\n    const sd2 = sequenceDiffs2[0];\n    let next;\n    if (sd1 && (!sd2 || sd1.seq1Range.start < sd2.seq1Range.start)) {\n      next = sequenceDiffs1.shift();\n    } else {\n      next = sequenceDiffs2.shift();\n    }\n    if (result.length > 0 && result[result.length - 1].seq1Range.endExclusive >= next.seq1Range.start) {\n      result[result.length - 1] = result[result.length - 1].join(next);\n    } else {\n      result.push(next);\n    }\n  }\n  return result;\n}\nfunction removeVeryShortMatchingLinesBetweenDiffs(sequence1, _sequence2, sequenceDiffs) {\n  let diffs = sequenceDiffs;\n  if (diffs.length === 0) {\n    return diffs;\n  }\n  let counter = 0;\n  let shouldRepeat;\n  do {\n    shouldRepeat = false;\n    const result = [diffs[0]];\n    for (let i = 1; i < diffs.length; i++) {\n      const cur = diffs[i];\n      const lastResult = result[result.length - 1];\n      function shouldJoinDiffs(before, after) {\n        const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\n        const unchangedText = sequence1.getText(unchangedRange);\n        const unchangedTextWithoutWs = unchangedText.replace(/\\s/g, '');\n        if (unchangedTextWithoutWs.length <= 4 && (before.seq1Range.length + before.seq2Range.length > 5 || after.seq1Range.length + after.seq2Range.length > 5)) {\n          return true;\n        }\n        return false;\n      }\n      const shouldJoin = shouldJoinDiffs(lastResult, cur);\n      if (shouldJoin) {\n        shouldRepeat = true;\n        result[result.length - 1] = result[result.length - 1].join(cur);\n      } else {\n        result.push(cur);\n      }\n    }\n    diffs = result;\n  } while (counter++ < 10 && shouldRepeat);\n  return diffs;\n}\nfunction removeVeryShortMatchingTextBetweenLongDiffs(sequence1, sequence2, sequenceDiffs) {\n  let diffs = sequenceDiffs;\n  if (diffs.length === 0) {\n    return diffs;\n  }\n  let counter = 0;\n  let shouldRepeat;\n  do {\n    shouldRepeat = false;\n    const result = [diffs[0]];\n    for (let i = 1; i < diffs.length; i++) {\n      const cur = diffs[i];\n      const lastResult = result[result.length - 1];\n      function shouldJoinDiffs(before, after) {\n        const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\n        const unchangedLineCount = sequence1.countLinesIn(unchangedRange);\n        if (unchangedLineCount > 5 || unchangedRange.length > 500) {\n          return false;\n        }\n        const unchangedText = sequence1.getText(unchangedRange).trim();\n        if (unchangedText.length > 20 || unchangedText.split(/\\r\\n|\\r|\\n/).length > 1) {\n          return false;\n        }\n        const beforeLineCount1 = sequence1.countLinesIn(before.seq1Range);\n        const beforeSeq1Length = before.seq1Range.length;\n        const beforeLineCount2 = sequence2.countLinesIn(before.seq2Range);\n        const beforeSeq2Length = before.seq2Range.length;\n        const afterLineCount1 = sequence1.countLinesIn(after.seq1Range);\n        const afterSeq1Length = after.seq1Range.length;\n        const afterLineCount2 = sequence2.countLinesIn(after.seq2Range);\n        const afterSeq2Length = after.seq2Range.length;\n        // TODO: Maybe a neural net can be used to derive the result from these numbers\n        const max = 2 * 40 + 50;\n        function cap(v) {\n          return Math.min(v, max);\n        }\n        if (Math.pow(Math.pow(cap(beforeLineCount1 * 40 + beforeSeq1Length), 1.5) + Math.pow(cap(beforeLineCount2 * 40 + beforeSeq2Length), 1.5), 1.5) + Math.pow(Math.pow(cap(afterLineCount1 * 40 + afterSeq1Length), 1.5) + Math.pow(cap(afterLineCount2 * 40 + afterSeq2Length), 1.5), 1.5) > (max ** 1.5) ** 1.5 * 1.3) {\n          return true;\n        }\n        return false;\n      }\n      const shouldJoin = shouldJoinDiffs(lastResult, cur);\n      if (shouldJoin) {\n        shouldRepeat = true;\n        result[result.length - 1] = result[result.length - 1].join(cur);\n      } else {\n        result.push(cur);\n      }\n    }\n    diffs = result;\n  } while (counter++ < 10 && shouldRepeat);\n  const newDiffs = [];\n  // Remove short suffixes/prefixes\n  (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachWithNeighbors)(diffs, (prev, cur, next) => {\n    let newDiff = cur;\n    function shouldMarkAsChanged(text) {\n      return text.length > 0 && text.trim().length <= 3 && cur.seq1Range.length + cur.seq2Range.length > 100;\n    }\n    const fullRange1 = sequence1.extendToFullLines(cur.seq1Range);\n    const prefix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(fullRange1.start, cur.seq1Range.start));\n    if (shouldMarkAsChanged(prefix)) {\n      newDiff = newDiff.deltaStart(-prefix.length);\n    }\n    const suffix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.endExclusive, fullRange1.endExclusive));\n    if (shouldMarkAsChanged(suffix)) {\n      newDiff = newDiff.deltaEnd(suffix.length);\n    }\n    const availableSpace = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff.fromOffsetPairs(prev ? prev.getEndExclusives() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.zero, next ? next.getStarts() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.max);\n    const result = newDiff.intersect(availableSpace);\n    if (newDiffs.length > 0 && result.getStarts().equals(newDiffs[newDiffs.length - 1].getEndExclusives())) {\n      newDiffs[newDiffs.length - 1] = newDiffs[newDiffs.length - 1].join(result);\n    } else {\n      newDiffs.push(result);\n    }\n  });\n  return newDiffs;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineSequence\": function() { return /* binding */ LineSequence; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass LineSequence {\n  constructor(trimmedHash, lines) {\n    this.trimmedHash = trimmedHash;\n    this.lines = lines;\n  }\n  getElement(offset) {\n    return this.trimmedHash[offset];\n  }\n  get length() {\n    return this.trimmedHash.length;\n  }\n  getBoundaryScore(length) {\n    const indentationBefore = length === 0 ? 0 : getIndentation(this.lines[length - 1]);\n    const indentationAfter = length === this.lines.length ? 0 : getIndentation(this.lines[length]);\n    return 1000 - (indentationBefore + indentationAfter);\n  }\n  getText(range) {\n    return this.lines.slice(range.start, range.endExclusive).join('\\n');\n  }\n  isStronglyEqual(offset1, offset2) {\n    return this.lines[offset1] === this.lines[offset2];\n  }\n}\nfunction getIndentation(str) {\n  let i = 0;\n  while (i < str.length && (str.charCodeAt(i) === 32 /* CharCode.Space */ || str.charCodeAt(i) === 9 /* CharCode.Tab */)) {\n    i++;\n  }\n  return i;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9saW5lU2VxdWVuY2UuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsWUFBWSxDQUFDO0VBQ3RCQyxXQUFXQSxDQUFDQyxXQUFXLEVBQUVDLEtBQUssRUFBRTtJQUM1QixJQUFJLENBQUNELFdBQVcsR0FBR0EsV0FBVztJQUM5QixJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSztFQUN0QjtFQUNBQyxVQUFVQSxDQUFDQyxNQUFNLEVBQUU7SUFDZixPQUFPLElBQUksQ0FBQ0gsV0FBVyxDQUFDRyxNQUFNLENBQUM7RUFDbkM7RUFDQSxJQUFJQyxNQUFNQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ0osV0FBVyxDQUFDSSxNQUFNO0VBQ2xDO0VBQ0FDLGdCQUFnQkEsQ0FBQ0QsTUFBTSxFQUFFO0lBQ3JCLE1BQU1FLGlCQUFpQixHQUFHRixNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0csY0FBYyxDQUFDLElBQUksQ0FBQ04sS0FBSyxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkYsTUFBTUksZ0JBQWdCLEdBQUdKLE1BQU0sS0FBSyxJQUFJLENBQUNILEtBQUssQ0FBQ0csTUFBTSxHQUFHLENBQUMsR0FBR0csY0FBYyxDQUFDLElBQUksQ0FBQ04sS0FBSyxDQUFDRyxNQUFNLENBQUMsQ0FBQztJQUM5RixPQUFPLElBQUksSUFBSUUsaUJBQWlCLEdBQUdFLGdCQUFnQixDQUFDO0VBQ3hEO0VBQ0FDLE9BQU9BLENBQUNDLEtBQUssRUFBRTtJQUNYLE9BQU8sSUFBSSxDQUFDVCxLQUFLLENBQUNVLEtBQUssQ0FBQ0QsS0FBSyxDQUFDRSxLQUFLLEVBQUVGLEtBQUssQ0FBQ0csWUFBWSxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDdkU7RUFDQUMsZUFBZUEsQ0FBQ0MsT0FBTyxFQUFFQyxPQUFPLEVBQUU7SUFDOUIsT0FBTyxJQUFJLENBQUNoQixLQUFLLENBQUNlLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQ2YsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDO0VBQ3REO0FBQ0o7QUFDQSxTQUFTVixjQUFjQSxDQUFDVyxHQUFHLEVBQUU7RUFDekIsSUFBSUMsQ0FBQyxHQUFHLENBQUM7RUFDVCxPQUFPQSxDQUFDLEdBQUdELEdBQUcsQ0FBQ2QsTUFBTSxLQUFLYyxHQUFHLENBQUNFLFVBQVUsQ0FBQ0QsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLHdCQUF3QkQsR0FBRyxDQUFDRSxVQUFVLENBQUNELENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxtQkFBbUIsRUFBRTtJQUNwSEEsQ0FBQyxFQUFFO0VBQ1A7RUFDQSxPQUFPQSxDQUFDO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9kZWZhdWx0TGluZXNEaWZmQ29tcHV0ZXIvbGluZVNlcXVlbmNlLmpzPzMwMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgY2xhc3MgTGluZVNlcXVlbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmltbWVkSGFzaCwgbGluZXMpIHtcbiAgICAgICAgdGhpcy50cmltbWVkSGFzaCA9IHRyaW1tZWRIYXNoO1xuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgfVxuICAgIGdldEVsZW1lbnQob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyaW1tZWRIYXNoW29mZnNldF07XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyaW1tZWRIYXNoLmxlbmd0aDtcbiAgICB9XG4gICAgZ2V0Qm91bmRhcnlTY29yZShsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgaW5kZW50YXRpb25CZWZvcmUgPSBsZW5ndGggPT09IDAgPyAwIDogZ2V0SW5kZW50YXRpb24odGhpcy5saW5lc1tsZW5ndGggLSAxXSk7XG4gICAgICAgIGNvbnN0IGluZGVudGF0aW9uQWZ0ZXIgPSBsZW5ndGggPT09IHRoaXMubGluZXMubGVuZ3RoID8gMCA6IGdldEluZGVudGF0aW9uKHRoaXMubGluZXNbbGVuZ3RoXSk7XG4gICAgICAgIHJldHVybiAxMDAwIC0gKGluZGVudGF0aW9uQmVmb3JlICsgaW5kZW50YXRpb25BZnRlcik7XG4gICAgfVxuICAgIGdldFRleHQocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZXMuc2xpY2UocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZEV4Y2x1c2l2ZSkuam9pbignXFxuJyk7XG4gICAgfVxuICAgIGlzU3Ryb25nbHlFcXVhbChvZmZzZXQxLCBvZmZzZXQyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVzW29mZnNldDFdID09PSB0aGlzLmxpbmVzW29mZnNldDJdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEluZGVudGF0aW9uKHN0cikge1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHN0ci5sZW5ndGggJiYgKHN0ci5jaGFyQ29kZUF0KGkpID09PSAzMiAvKiBDaGFyQ29kZS5TcGFjZSAqLyB8fCBzdHIuY2hhckNvZGVBdChpKSA9PT0gOSAvKiBDaGFyQ29kZS5UYWIgKi8pKSB7XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIGk7XG59XG4iXSwibmFtZXMiOlsiTGluZVNlcXVlbmNlIiwiY29uc3RydWN0b3IiLCJ0cmltbWVkSGFzaCIsImxpbmVzIiwiZ2V0RWxlbWVudCIsIm9mZnNldCIsImxlbmd0aCIsImdldEJvdW5kYXJ5U2NvcmUiLCJpbmRlbnRhdGlvbkJlZm9yZSIsImdldEluZGVudGF0aW9uIiwiaW5kZW50YXRpb25BZnRlciIsImdldFRleHQiLCJyYW5nZSIsInNsaWNlIiwic3RhcnQiLCJlbmRFeGNsdXNpdmUiLCJqb2luIiwiaXNTdHJvbmdseUVxdWFsIiwib2Zmc2V0MSIsIm9mZnNldDIiLCJzdHIiLCJpIiwiY2hhckNvZGVBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LinesSliceCharSequence\": function() { return /* binding */ LinesSliceCharSequence; }\n/* harmony export */ });\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\nclass LinesSliceCharSequence {\n  constructor(lines, lineRange, considerWhitespaceChanges) {\n    // This slice has to have lineRange.length many \\n! (otherwise diffing against an empty slice will be problematic)\n    // (Unless it covers the entire document, in that case the other slice also has to cover the entire document ands it's okay)\n    this.lines = lines;\n    this.considerWhitespaceChanges = considerWhitespaceChanges;\n    this.elements = [];\n    this.firstCharOffsetByLine = [];\n    // To account for trimming\n    this.additionalOffsetByLine = [];\n    // If the slice covers the end, but does not start at the beginning, we include just the \\n of the previous line.\n    let trimFirstLineFully = false;\n    if (lineRange.start > 0 && lineRange.endExclusive >= lines.length) {\n      lineRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lineRange.start - 1, lineRange.endExclusive);\n      trimFirstLineFully = true;\n    }\n    this.lineRange = lineRange;\n    this.firstCharOffsetByLine[0] = 0;\n    for (let i = this.lineRange.start; i < this.lineRange.endExclusive; i++) {\n      let line = lines[i];\n      let offset = 0;\n      if (trimFirstLineFully) {\n        offset = line.length;\n        line = '';\n        trimFirstLineFully = false;\n      } else if (!considerWhitespaceChanges) {\n        const trimmedStartLine = line.trimStart();\n        offset = line.length - trimmedStartLine.length;\n        line = trimmedStartLine.trimEnd();\n      }\n      this.additionalOffsetByLine.push(offset);\n      for (let i = 0; i < line.length; i++) {\n        this.elements.push(line.charCodeAt(i));\n      }\n      // Don't add an \\n that does not exist in the document.\n      if (i < lines.length - 1) {\n        this.elements.push('\\n'.charCodeAt(0));\n        this.firstCharOffsetByLine[i - this.lineRange.start + 1] = this.elements.length;\n      }\n    }\n    // To account for the last line\n    this.additionalOffsetByLine.push(0);\n  }\n  toString() {\n    return `Slice: \"${this.text}\"`;\n  }\n  get text() {\n    return this.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(0, this.length));\n  }\n  getText(range) {\n    return this.elements.slice(range.start, range.endExclusive).map(e => String.fromCharCode(e)).join('');\n  }\n  getElement(offset) {\n    return this.elements[offset];\n  }\n  get length() {\n    return this.elements.length;\n  }\n  getBoundaryScore(length) {\n    //   a   b   c   ,           d   e   f\n    // 11  0   0   12  15  6   13  0   0   11\n    const prevCategory = getCategory(length > 0 ? this.elements[length - 1] : -1);\n    const nextCategory = getCategory(length < this.elements.length ? this.elements[length] : -1);\n    if (prevCategory === 7 /* CharBoundaryCategory.LineBreakCR */ && nextCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\n      // don't break between \\r and \\n\n      return 0;\n    }\n    if (prevCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\n      // prefer the linebreak before the change\n      return 150;\n    }\n    let score = 0;\n    if (prevCategory !== nextCategory) {\n      score += 10;\n      if (prevCategory === 0 /* CharBoundaryCategory.WordLower */ && nextCategory === 1 /* CharBoundaryCategory.WordUpper */) {\n        score += 1;\n      }\n    }\n    score += getCategoryBoundaryScore(prevCategory);\n    score += getCategoryBoundaryScore(nextCategory);\n    return score;\n  }\n  translateOffset(offset) {\n    // find smallest i, so that lineBreakOffsets[i] <= offset using binary search\n    if (this.lineRange.isEmpty) {\n      return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + 1, 1);\n    }\n    const i = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastIdxMonotonous)(this.firstCharOffsetByLine, value => value <= offset);\n    return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + i + 1, offset - this.firstCharOffsetByLine[i] + this.additionalOffsetByLine[i] + 1);\n  }\n  translateRange(range) {\n    return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(this.translateOffset(range.start), this.translateOffset(range.endExclusive));\n  }\n  /**\n   * Finds the word that contains the character at the given offset\n   */\n  findWordContaining(offset) {\n    if (offset < 0 || offset >= this.elements.length) {\n      return undefined;\n    }\n    if (!isWordChar(this.elements[offset])) {\n      return undefined;\n    }\n    // find start\n    let start = offset;\n    while (start > 0 && isWordChar(this.elements[start - 1])) {\n      start--;\n    }\n    // find end\n    let end = offset;\n    while (end < this.elements.length && isWordChar(this.elements[end])) {\n      end++;\n    }\n    return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);\n  }\n  countLinesIn(range) {\n    return this.translateOffset(range.endExclusive).lineNumber - this.translateOffset(range.start).lineNumber;\n  }\n  isStronglyEqual(offset1, offset2) {\n    return this.elements[offset1] === this.elements[offset2];\n  }\n  extendToFullLines(range) {\n    var _a, _b;\n    const start = (_a = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastMonotonous)(this.firstCharOffsetByLine, x => x <= range.start)) !== null && _a !== void 0 ? _a : 0;\n    const end = (_b = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findFirstMonotonous)(this.firstCharOffsetByLine, x => range.endExclusive <= x)) !== null && _b !== void 0 ? _b : this.elements.length;\n    return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);\n  }\n}\nfunction isWordChar(charCode) {\n  return charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */ || charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */ || charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */;\n}\nconst score = {\n  [0 /* CharBoundaryCategory.WordLower */]: 0,\n  [1 /* CharBoundaryCategory.WordUpper */]: 0,\n  [2 /* CharBoundaryCategory.WordNumber */]: 0,\n  [3 /* CharBoundaryCategory.End */]: 10,\n  [4 /* CharBoundaryCategory.Other */]: 2,\n  [5 /* CharBoundaryCategory.Separator */]: 30,\n  [6 /* CharBoundaryCategory.Space */]: 3,\n  [7 /* CharBoundaryCategory.LineBreakCR */]: 10,\n  [8 /* CharBoundaryCategory.LineBreakLF */]: 10\n};\nfunction getCategoryBoundaryScore(category) {\n  return score[category];\n}\nfunction getCategory(charCode) {\n  if (charCode === 10 /* CharCode.LineFeed */) {\n    return 8 /* CharBoundaryCategory.LineBreakLF */;\n  } else if (charCode === 13 /* CharCode.CarriageReturn */) {\n    return 7 /* CharBoundaryCategory.LineBreakCR */;\n  } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isSpace)(charCode)) {\n    return 6 /* CharBoundaryCategory.Space */;\n  } else if (charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */) {\n    return 0 /* CharBoundaryCategory.WordLower */;\n  } else if (charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */) {\n    return 1 /* CharBoundaryCategory.WordUpper */;\n  } else if (charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */) {\n    return 2 /* CharBoundaryCategory.WordNumber */;\n  } else if (charCode === -1) {\n    return 3 /* CharBoundaryCategory.End */;\n  } else if (charCode === 44 /* CharCode.Comma */ || charCode === 59 /* CharCode.Semicolon */) {\n    return 5 /* CharBoundaryCategory.Separator */;\n  } else {\n    return 4 /* CharBoundaryCategory.Other */;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Array2D\": function() { return /* binding */ Array2D; },\n/* harmony export */   \"LineRangeFragment\": function() { return /* binding */ LineRangeFragment; },\n/* harmony export */   \"isSpace\": function() { return /* binding */ isSpace; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Array2D {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.array = [];\n    this.array = new Array(width * height);\n  }\n  get(x, y) {\n    return this.array[x + y * this.width];\n  }\n  set(x, y, value) {\n    this.array[x + y * this.width] = value;\n  }\n}\nfunction isSpace(charCode) {\n  return charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */;\n}\nclass LineRangeFragment {\n  static getKey(chr) {\n    let key = this.chrKeys.get(chr);\n    if (key === undefined) {\n      key = this.chrKeys.size;\n      this.chrKeys.set(chr, key);\n    }\n    return key;\n  }\n  constructor(range, lines, source) {\n    this.range = range;\n    this.lines = lines;\n    this.source = source;\n    this.histogram = [];\n    let counter = 0;\n    for (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {\n      const line = lines[i];\n      for (let j = 0; j < line.length; j++) {\n        counter++;\n        const chr = line[j];\n        const key = LineRangeFragment.getKey(chr);\n        this.histogram[key] = (this.histogram[key] || 0) + 1;\n      }\n      counter++;\n      const key = LineRangeFragment.getKey('\\n');\n      this.histogram[key] = (this.histogram[key] || 0) + 1;\n    }\n    this.totalCount = counter;\n  }\n  computeSimilarity(other) {\n    var _a, _b;\n    let sumDifferences = 0;\n    const maxLength = Math.max(this.histogram.length, other.histogram.length);\n    for (let i = 0; i < maxLength; i++) {\n      sumDifferences += Math.abs(((_a = this.histogram[i]) !== null && _a !== void 0 ? _a : 0) - ((_b = other.histogram[i]) !== null && _b !== void 0 ? _b : 0));\n    }\n    return 1 - sumDifferences / (this.totalCount + other.totalCount);\n  }\n}\nLineRangeFragment.chrKeys = new Map();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci91dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLE9BQU8sQ0FBQztFQUNqQkMsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFQyxNQUFNLEVBQUU7SUFDdkIsSUFBSSxDQUFDRCxLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsRUFBRTtJQUNmLElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUlDLEtBQUssQ0FBQ0gsS0FBSyxHQUFHQyxNQUFNLENBQUM7RUFDMUM7RUFDQUcsR0FBR0EsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7SUFDTixPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDRyxDQUFDLEdBQUdDLENBQUMsR0FBRyxJQUFJLENBQUNOLEtBQUssQ0FBQztFQUN6QztFQUNBTyxHQUFHQSxDQUFDRixDQUFDLEVBQUVDLENBQUMsRUFBRUUsS0FBSyxFQUFFO0lBQ2IsSUFBSSxDQUFDTixLQUFLLENBQUNHLENBQUMsR0FBR0MsQ0FBQyxHQUFHLElBQUksQ0FBQ04sS0FBSyxDQUFDLEdBQUdRLEtBQUs7RUFDMUM7QUFDSjtBQUNPLFNBQVNDLE9BQU9BLENBQUNDLFFBQVEsRUFBRTtFQUM5QixPQUFPQSxRQUFRLEtBQUssRUFBRSxDQUFDLHdCQUF3QkEsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUNsRTtBQUNPLE1BQU1DLGlCQUFpQixDQUFDO0VBQzNCLE9BQU9DLE1BQU1BLENBQUNDLEdBQUcsRUFBRTtJQUNmLElBQUlDLEdBQUcsR0FBRyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1gsR0FBRyxDQUFDUyxHQUFHLENBQUM7SUFDL0IsSUFBSUMsR0FBRyxLQUFLRSxTQUFTLEVBQUU7TUFDbkJGLEdBQUcsR0FBRyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0UsSUFBSTtNQUN2QixJQUFJLENBQUNGLE9BQU8sQ0FBQ1IsR0FBRyxDQUFDTSxHQUFHLEVBQUVDLEdBQUcsQ0FBQztJQUM5QjtJQUNBLE9BQU9BLEdBQUc7RUFDZDtFQUNBZixXQUFXQSxDQUFDbUIsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRTtJQUM5QixJQUFJLENBQUNGLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFNBQVMsR0FBRyxFQUFFO0lBQ25CLElBQUlDLE9BQU8sR0FBRyxDQUFDO0lBQ2YsS0FBSyxJQUFJQyxDQUFDLEdBQUdMLEtBQUssQ0FBQ00sZUFBZSxHQUFHLENBQUMsRUFBRUQsQ0FBQyxHQUFHTCxLQUFLLENBQUNPLHNCQUFzQixHQUFHLENBQUMsRUFBRUYsQ0FBQyxFQUFFLEVBQUU7TUFDL0UsTUFBTUcsSUFBSSxHQUFHUCxLQUFLLENBQUNJLENBQUMsQ0FBQztNQUNyQixLQUFLLElBQUlJLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsSUFBSSxDQUFDRSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO1FBQ2xDTCxPQUFPLEVBQUU7UUFDVCxNQUFNVCxHQUFHLEdBQUdhLElBQUksQ0FBQ0MsQ0FBQyxDQUFDO1FBQ25CLE1BQU1iLEdBQUcsR0FBR0gsaUJBQWlCLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDO1FBQ3pDLElBQUksQ0FBQ1EsU0FBUyxDQUFDUCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQ08sU0FBUyxDQUFDUCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztNQUN4RDtNQUNBUSxPQUFPLEVBQUU7TUFDVCxNQUFNUixHQUFHLEdBQUdILGlCQUFpQixDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO01BQzFDLElBQUksQ0FBQ1MsU0FBUyxDQUFDUCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQ08sU0FBUyxDQUFDUCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN4RDtJQUNBLElBQUksQ0FBQ2UsVUFBVSxHQUFHUCxPQUFPO0VBQzdCO0VBQ0FRLGlCQUFpQkEsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3JCLElBQUlDLEVBQUUsRUFBRUMsRUFBRTtJQUNWLElBQUlDLGNBQWMsR0FBRyxDQUFDO0lBQ3RCLE1BQU1DLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDaEIsU0FBUyxDQUFDTyxNQUFNLEVBQUVHLEtBQUssQ0FBQ1YsU0FBUyxDQUFDTyxNQUFNLENBQUM7SUFDekUsS0FBSyxJQUFJTCxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdZLFNBQVMsRUFBRVosQ0FBQyxFQUFFLEVBQUU7TUFDaENXLGNBQWMsSUFBSUUsSUFBSSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDTixFQUFFLEdBQUcsSUFBSSxDQUFDWCxTQUFTLENBQUNFLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSVMsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUNDLEVBQUUsR0FBR0YsS0FBSyxDQUFDVixTQUFTLENBQUNFLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSVUsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUo7SUFDQSxPQUFPLENBQUMsR0FBSUMsY0FBYyxJQUFJLElBQUksQ0FBQ0wsVUFBVSxHQUFHRSxLQUFLLENBQUNGLFVBQVUsQ0FBRTtFQUN0RTtBQUNKO0FBQ0FsQixpQkFBaUIsQ0FBQ0ksT0FBTyxHQUFHLElBQUl3QixHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci91dGlscy5qcz83ODdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGNsYXNzIEFycmF5MkQge1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5hcnJheSA9IFtdO1xuICAgICAgICB0aGlzLmFycmF5ID0gbmV3IEFycmF5KHdpZHRoICogaGVpZ2h0KTtcbiAgICB9XG4gICAgZ2V0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXlbeCArIHkgKiB0aGlzLndpZHRoXTtcbiAgICB9XG4gICAgc2V0KHgsIHksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYXJyYXlbeCArIHkgKiB0aGlzLndpZHRoXSA9IHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NwYWNlKGNoYXJDb2RlKSB7XG4gICAgcmV0dXJuIGNoYXJDb2RlID09PSAzMiAvKiBDaGFyQ29kZS5TcGFjZSAqLyB8fCBjaGFyQ29kZSA9PT0gOSAvKiBDaGFyQ29kZS5UYWIgKi87XG59XG5leHBvcnQgY2xhc3MgTGluZVJhbmdlRnJhZ21lbnQge1xuICAgIHN0YXRpYyBnZXRLZXkoY2hyKSB7XG4gICAgICAgIGxldCBrZXkgPSB0aGlzLmNocktleXMuZ2V0KGNocik7XG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAga2V5ID0gdGhpcy5jaHJLZXlzLnNpemU7XG4gICAgICAgICAgICB0aGlzLmNocktleXMuc2V0KGNociwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihyYW5nZSwgbGluZXMsIHNvdXJjZSkge1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMubGluZXMgPSBsaW5lcztcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuaGlzdG9ncmFtID0gW107XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDE7IGkgPCByYW5nZS5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpbmUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hyID0gbGluZVtqXTtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBMaW5lUmFuZ2VGcmFnbWVudC5nZXRLZXkoY2hyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvZ3JhbVtrZXldID0gKHRoaXMuaGlzdG9ncmFtW2tleV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gTGluZVJhbmdlRnJhZ21lbnQuZ2V0S2V5KCdcXG4nKTtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9ncmFtW2tleV0gPSAodGhpcy5oaXN0b2dyYW1ba2V5XSB8fCAwKSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b3RhbENvdW50ID0gY291bnRlcjtcbiAgICB9XG4gICAgY29tcHV0ZVNpbWlsYXJpdHkob3RoZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgbGV0IHN1bURpZmZlcmVuY2VzID0gMDtcbiAgICAgICAgY29uc3QgbWF4TGVuZ3RoID0gTWF0aC5tYXgodGhpcy5oaXN0b2dyYW0ubGVuZ3RoLCBvdGhlci5oaXN0b2dyYW0ubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3VtRGlmZmVyZW5jZXMgKz0gTWF0aC5hYnMoKChfYSA9IHRoaXMuaGlzdG9ncmFtW2ldKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSAtICgoX2IgPSBvdGhlci5oaXN0b2dyYW1baV0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMSAtIChzdW1EaWZmZXJlbmNlcyAvICh0aGlzLnRvdGFsQ291bnQgKyBvdGhlci50b3RhbENvdW50KSk7XG4gICAgfVxufVxuTGluZVJhbmdlRnJhZ21lbnQuY2hyS2V5cyA9IG5ldyBNYXAoKTtcbiJdLCJuYW1lcyI6WyJBcnJheTJEIiwiY29uc3RydWN0b3IiLCJ3aWR0aCIsImhlaWdodCIsImFycmF5IiwiQXJyYXkiLCJnZXQiLCJ4IiwieSIsInNldCIsInZhbHVlIiwiaXNTcGFjZSIsImNoYXJDb2RlIiwiTGluZVJhbmdlRnJhZ21lbnQiLCJnZXRLZXkiLCJjaHIiLCJrZXkiLCJjaHJLZXlzIiwidW5kZWZpbmVkIiwic2l6ZSIsInJhbmdlIiwibGluZXMiLCJzb3VyY2UiLCJoaXN0b2dyYW0iLCJjb3VudGVyIiwiaSIsInN0YXJ0TGluZU51bWJlciIsImVuZExpbmVOdW1iZXJFeGNsdXNpdmUiLCJsaW5lIiwiaiIsImxlbmd0aCIsInRvdGFsQ291bnQiLCJjb21wdXRlU2ltaWxhcml0eSIsIm90aGVyIiwiX2EiLCJfYiIsInN1bURpZmZlcmVuY2VzIiwibWF4TGVuZ3RoIiwiTWF0aCIsIm1heCIsImFicyIsIk1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiffComputer\": function() { return /* binding */ DiffComputer; },\n/* harmony export */   \"LegacyLinesDiffComputer\": function() { return /* binding */ LegacyLinesDiffComputer; }\n/* harmony export */ });\n/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\");\n/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./linesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nclass LegacyLinesDiffComputer {\n  computeDiff(originalLines, modifiedLines, options) {\n    var _a;\n    const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n      maxComputationTime: options.maxComputationTimeMs,\n      shouldIgnoreTrimWhitespace: options.ignoreTrimWhitespace,\n      shouldComputeCharChanges: true,\n      shouldMakePrettyDiff: true,\n      shouldPostProcessCharChanges: true\n    });\n    const result = diffComputer.computeDiff();\n    const changes = [];\n    let lastChange = null;\n    for (const c of result.changes) {\n      let originalRange;\n      if (c.originalEndLineNumber === 0) {\n        // Insertion\n        originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber + 1, c.originalStartLineNumber + 1);\n      } else {\n        originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber, c.originalEndLineNumber + 1);\n      }\n      let modifiedRange;\n      if (c.modifiedEndLineNumber === 0) {\n        // Deletion\n        modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber + 1, c.modifiedStartLineNumber + 1);\n      } else {\n        modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber, c.modifiedEndLineNumber + 1);\n      }\n      let change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(originalRange, modifiedRange, (_a = c.charChanges) === null || _a === void 0 ? void 0 : _a.map(c => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.originalStartLineNumber, c.originalStartColumn, c.originalEndLineNumber, c.originalEndColumn), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.modifiedStartLineNumber, c.modifiedStartColumn, c.modifiedEndLineNumber, c.modifiedEndColumn))));\n      if (lastChange) {\n        if (lastChange.modified.endLineNumberExclusive === change.modified.startLineNumber || lastChange.original.endLineNumberExclusive === change.original.startLineNumber) {\n          // join touching diffs. Probably moving diffs up/down in the algorithm causes touching diffs.\n          change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(lastChange.original.join(change.original), lastChange.modified.join(change.modified), lastChange.innerChanges && change.innerChanges ? lastChange.innerChanges.concat(change.innerChanges) : undefined);\n          changes.pop();\n        }\n      }\n      changes.push(change);\n      lastChange = change;\n    }\n    (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.assertFn)(() => {\n      return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n      // There has to be an unchanged line in between (otherwise both diffs should have been joined)\n      m1.original.endLineNumberExclusive < m2.original.startLineNumber && m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\n    });\n    return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.LinesDiff(changes, [], result.quitEarly);\n  }\n}\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n  const diffAlgo = new _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n  return diffAlgo.ComputeDiff(pretty);\n}\nclass LineSequence {\n  constructor(lines) {\n    const startColumns = [];\n    const endColumns = [];\n    for (let i = 0, length = lines.length; i < length; i++) {\n      startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n      endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n    }\n    this.lines = lines;\n    this._startColumns = startColumns;\n    this._endColumns = endColumns;\n  }\n  getElements() {\n    const elements = [];\n    for (let i = 0, len = this.lines.length; i < len; i++) {\n      elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n    }\n    return elements;\n  }\n  getStrictElement(index) {\n    return this.lines[index];\n  }\n  getStartLineNumber(i) {\n    return i + 1;\n  }\n  getEndLineNumber(i) {\n    return i + 1;\n  }\n  createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n    const charCodes = [];\n    const lineNumbers = [];\n    const columns = [];\n    let len = 0;\n    for (let index = startIndex; index <= endIndex; index++) {\n      const lineContent = this.lines[index];\n      const startColumn = shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1;\n      const endColumn = shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1;\n      for (let col = startColumn; col < endColumn; col++) {\n        charCodes[len] = lineContent.charCodeAt(col - 1);\n        lineNumbers[len] = index + 1;\n        columns[len] = col;\n        len++;\n      }\n      if (!shouldIgnoreTrimWhitespace && index < endIndex) {\n        // Add \\n if trim whitespace is not ignored\n        charCodes[len] = 10 /* CharCode.LineFeed */;\n        lineNumbers[len] = index + 1;\n        columns[len] = lineContent.length + 1;\n        len++;\n      }\n    }\n    return new CharSequence(charCodes, lineNumbers, columns);\n  }\n}\nclass CharSequence {\n  constructor(charCodes, lineNumbers, columns) {\n    this._charCodes = charCodes;\n    this._lineNumbers = lineNumbers;\n    this._columns = columns;\n  }\n  toString() {\n    return '[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']';\n  }\n  _assertIndex(index, arr) {\n    if (index < 0 || index >= arr.length) {\n      throw new Error(`Illegal index`);\n    }\n  }\n  getElements() {\n    return this._charCodes;\n  }\n  getStartLineNumber(i) {\n    if (i > 0 && i === this._lineNumbers.length) {\n      // the start line number of the element after the last element\n      // is the end line number of the last element\n      return this.getEndLineNumber(i - 1);\n    }\n    this._assertIndex(i, this._lineNumbers);\n    return this._lineNumbers[i];\n  }\n  getEndLineNumber(i) {\n    if (i === -1) {\n      // the end line number of the element before the first element\n      // is the start line number of the first element\n      return this.getStartLineNumber(i + 1);\n    }\n    this._assertIndex(i, this._lineNumbers);\n    if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n      return this._lineNumbers[i] + 1;\n    }\n    return this._lineNumbers[i];\n  }\n  getStartColumn(i) {\n    if (i > 0 && i === this._columns.length) {\n      // the start column of the element after the last element\n      // is the end column of the last element\n      return this.getEndColumn(i - 1);\n    }\n    this._assertIndex(i, this._columns);\n    return this._columns[i];\n  }\n  getEndColumn(i) {\n    if (i === -1) {\n      // the end column of the element before the first element\n      // is the start column of the first element\n      return this.getStartColumn(i + 1);\n    }\n    this._assertIndex(i, this._columns);\n    if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n      return 1;\n    }\n    return this._columns[i] + 1;\n  }\n}\nclass CharChange {\n  constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n    this.originalStartLineNumber = originalStartLineNumber;\n    this.originalStartColumn = originalStartColumn;\n    this.originalEndLineNumber = originalEndLineNumber;\n    this.originalEndColumn = originalEndColumn;\n    this.modifiedStartLineNumber = modifiedStartLineNumber;\n    this.modifiedStartColumn = modifiedStartColumn;\n    this.modifiedEndLineNumber = modifiedEndLineNumber;\n    this.modifiedEndColumn = modifiedEndColumn;\n  }\n  static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n    const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n    const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n    const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n    const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n    const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n    const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n    const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n    const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n    return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n  }\n}\nfunction postProcessCharChanges(rawChanges) {\n  if (rawChanges.length <= 1) {\n    return rawChanges;\n  }\n  const result = [rawChanges[0]];\n  let prevChange = result[0];\n  for (let i = 1, len = rawChanges.length; i < len; i++) {\n    const currChange = rawChanges[i];\n    const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n    const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n    // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n    const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n    if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n      // Merge the current change into the previous one\n      prevChange.originalLength = currChange.originalStart + currChange.originalLength - prevChange.originalStart;\n      prevChange.modifiedLength = currChange.modifiedStart + currChange.modifiedLength - prevChange.modifiedStart;\n    } else {\n      // Add the current change\n      result.push(currChange);\n      prevChange = currChange;\n    }\n  }\n  return result;\n}\nclass LineChange {\n  constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n    this.originalStartLineNumber = originalStartLineNumber;\n    this.originalEndLineNumber = originalEndLineNumber;\n    this.modifiedStartLineNumber = modifiedStartLineNumber;\n    this.modifiedEndLineNumber = modifiedEndLineNumber;\n    this.charChanges = charChanges;\n  }\n  static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n    let originalStartLineNumber;\n    let originalEndLineNumber;\n    let modifiedStartLineNumber;\n    let modifiedEndLineNumber;\n    let charChanges = undefined;\n    if (diffChange.originalLength === 0) {\n      originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n      originalEndLineNumber = 0;\n    } else {\n      originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n      originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n    }\n    if (diffChange.modifiedLength === 0) {\n      modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n      modifiedEndLineNumber = 0;\n    } else {\n      modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n      modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n    }\n    if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n      // Compute character changes for diff chunks of at most 20 lines...\n      const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n      const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n      if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {\n        let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n        if (shouldPostProcessCharChanges) {\n          rawChanges = postProcessCharChanges(rawChanges);\n        }\n        charChanges = [];\n        for (let i = 0, length = rawChanges.length; i < length; i++) {\n          charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n        }\n      }\n    }\n    return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n  }\n}\nclass DiffComputer {\n  constructor(originalLines, modifiedLines, opts) {\n    this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n    this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n    this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n    this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n    this.originalLines = originalLines;\n    this.modifiedLines = modifiedLines;\n    this.original = new LineSequence(originalLines);\n    this.modified = new LineSequence(modifiedLines);\n    this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n    this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n  }\n  computeDiff() {\n    if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n      // empty original => fast path\n      if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n        return {\n          quitEarly: false,\n          changes: []\n        };\n      }\n      return {\n        quitEarly: false,\n        changes: [{\n          originalStartLineNumber: 1,\n          originalEndLineNumber: 1,\n          modifiedStartLineNumber: 1,\n          modifiedEndLineNumber: this.modified.lines.length,\n          charChanges: undefined\n        }]\n      };\n    }\n    if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n      // empty modified => fast path\n      return {\n        quitEarly: false,\n        changes: [{\n          originalStartLineNumber: 1,\n          originalEndLineNumber: this.original.lines.length,\n          modifiedStartLineNumber: 1,\n          modifiedEndLineNumber: 1,\n          charChanges: undefined\n        }]\n      };\n    }\n    const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n    const rawChanges = diffResult.changes;\n    const quitEarly = diffResult.quitEarly;\n    // The diff is always computed with ignoring trim whitespace\n    // This ensures we get the prettiest diff\n    if (this.shouldIgnoreTrimWhitespace) {\n      const lineChanges = [];\n      for (let i = 0, length = rawChanges.length; i < length; i++) {\n        lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n      }\n      return {\n        quitEarly: quitEarly,\n        changes: lineChanges\n      };\n    }\n    // Need to post-process and introduce changes where the trim whitespace is different\n    // Note that we are looping starting at -1 to also cover the lines before the first change\n    const result = [];\n    let originalLineIndex = 0;\n    let modifiedLineIndex = 0;\n    for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n      const nextChange = i + 1 < len ? rawChanges[i + 1] : null;\n      const originalStop = nextChange ? nextChange.originalStart : this.originalLines.length;\n      const modifiedStop = nextChange ? nextChange.modifiedStart : this.modifiedLines.length;\n      while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n        const originalLine = this.originalLines[originalLineIndex];\n        const modifiedLine = this.modifiedLines[modifiedLineIndex];\n        if (originalLine !== modifiedLine) {\n          // These lines differ only in trim whitespace\n          // Check the leading whitespace\n          {\n            let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n            let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n            while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n              const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n              const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n              if (originalChar !== modifiedChar) {\n                break;\n              }\n              originalStartColumn--;\n              modifiedStartColumn--;\n            }\n            if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n              this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n            }\n          }\n          // Check the trailing whitespace\n          {\n            let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n            let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n            const originalMaxColumn = originalLine.length + 1;\n            const modifiedMaxColumn = modifiedLine.length + 1;\n            while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n              const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n              const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n              if (originalChar !== modifiedChar) {\n                break;\n              }\n              originalEndColumn++;\n              modifiedEndColumn++;\n            }\n            if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n              this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n            }\n          }\n        }\n        originalLineIndex++;\n        modifiedLineIndex++;\n      }\n      if (nextChange) {\n        // Emit the actual change\n        result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n        originalLineIndex += nextChange.originalLength;\n        modifiedLineIndex += nextChange.modifiedLength;\n      }\n    }\n    return {\n      quitEarly: quitEarly,\n      changes: result\n    };\n  }\n  _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n    if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n      // Merged into previous\n      return;\n    }\n    let charChanges = undefined;\n    if (this.shouldComputeCharChanges) {\n      charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n    }\n    result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n  }\n  _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n    const len = result.length;\n    if (len === 0) {\n      return false;\n    }\n    const prevChange = result[len - 1];\n    if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n      // Don't merge with inserts/deletes\n      return false;\n    }\n    if (prevChange.originalEndLineNumber === originalLineNumber && prevChange.modifiedEndLineNumber === modifiedLineNumber) {\n      if (this.shouldComputeCharChanges && prevChange.charChanges) {\n        prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n      }\n      return true;\n    }\n    if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n      prevChange.originalEndLineNumber = originalLineNumber;\n      prevChange.modifiedEndLineNumber = modifiedLineNumber;\n      if (this.shouldComputeCharChanges && prevChange.charChanges) {\n        prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n      }\n      return true;\n    }\n    return false;\n  }\n}\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n  const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.firstNonWhitespaceIndex(txt);\n  if (r === -1) {\n    return defaultValue;\n  }\n  return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n  const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.lastNonWhitespaceIndex(txt);\n  if (r === -1) {\n    return defaultValue;\n  }\n  return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n  if (maximumRuntime === 0) {\n    return () => true;\n  }\n  const startTime = Date.now();\n  return () => {\n    return Date.now() - startTime < maximumRuntime;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LinesDiff\": function() { return /* binding */ LinesDiff; },\n/* harmony export */   \"MovedText\": function() { return /* binding */ MovedText; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass LinesDiff {\n  constructor(changes,\n  /**\n   * Sorted by original line ranges.\n   * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n   */\n  moves,\n  /**\n   * Indicates if the time out was reached.\n   * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n   */\n  hitTimeout) {\n    this.changes = changes;\n    this.moves = moves;\n    this.hitTimeout = hitTimeout;\n  }\n}\nclass MovedText {\n  constructor(lineRangeMapping, changes) {\n    this.lineRangeMapping = lineRangeMapping;\n    this.changes = changes;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxTQUFTLENBQUM7RUFDbkJDLFdBQVdBLENBQUNDLE9BQU87RUFDbkI7QUFDSjtBQUNBO0FBQ0E7RUFDSUMsS0FBSztFQUNMO0FBQ0o7QUFDQTtBQUNBO0VBQ0lDLFVBQVUsRUFBRTtJQUNSLElBQUksQ0FBQ0YsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0VBQ2hDO0FBQ0o7QUFDTyxNQUFNQyxTQUFTLENBQUM7RUFDbkJKLFdBQVdBLENBQUNLLGdCQUFnQixFQUFFSixPQUFPLEVBQUU7SUFDbkMsSUFBSSxDQUFDSSxnQkFBZ0IsR0FBR0EsZ0JBQWdCO0lBQ3hDLElBQUksQ0FBQ0osT0FBTyxHQUFHQSxPQUFPO0VBQzFCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9saW5lc0RpZmZDb21wdXRlci5qcz9jNGUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGNsYXNzIExpbmVzRGlmZiB7XG4gICAgY29uc3RydWN0b3IoY2hhbmdlcywgXG4gICAgLyoqXG4gICAgICogU29ydGVkIGJ5IG9yaWdpbmFsIGxpbmUgcmFuZ2VzLlxuICAgICAqIFRoZSBvcmlnaW5hbCBsaW5lIHJhbmdlcyBhbmQgdGhlIG1vZGlmaWVkIGxpbmUgcmFuZ2VzIG11c3QgYmUgZGlzam9pbnQgKGJ1dCBjYW4gYmUgdG91Y2hpbmcpLlxuICAgICAqL1xuICAgIG1vdmVzLCBcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHRpbWUgb3V0IHdhcyByZWFjaGVkLlxuICAgICAqIEluIHRoYXQgY2FzZSwgdGhlIGRpZmZzIG1pZ2h0IGJlIGFuIGFwcHJveGltYXRpb24gYW5kIHRoZSB1c2VyIHNob3VsZCBiZSBhc2tlZCB0byByZXJ1biB0aGUgZGlmZiB3aXRoIG1vcmUgdGltZS5cbiAgICAgKi9cbiAgICBoaXRUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IGNoYW5nZXM7XG4gICAgICAgIHRoaXMubW92ZXMgPSBtb3ZlcztcbiAgICAgICAgdGhpcy5oaXRUaW1lb3V0ID0gaGl0VGltZW91dDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTW92ZWRUZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihsaW5lUmFuZ2VNYXBwaW5nLCBjaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMubGluZVJhbmdlTWFwcGluZyA9IGxpbmVSYW5nZU1hcHBpbmc7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IGNoYW5nZXM7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkxpbmVzRGlmZiIsImNvbnN0cnVjdG9yIiwiY2hhbmdlcyIsIm1vdmVzIiwiaGl0VGltZW91dCIsIk1vdmVkVGV4dCIsImxpbmVSYW5nZU1hcHBpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"linesDiffComputers\": function() { return /* binding */ linesDiffComputers; }\n/* harmony export */ });\n/* harmony import */ var _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legacyLinesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js\");\n/* harmony import */ var _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultLinesDiffComputer/defaultLinesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst linesDiffComputers = {\n  getLegacy: () => new _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__.LegacyLinesDiffComputer(),\n  getDefault: () => new _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.DefaultLinesDiffComputer()\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUN1RTtBQUMyQjtBQUMzRixNQUFNRSxrQkFBa0IsR0FBRztFQUM5QkMsU0FBUyxFQUFFQSxDQUFBLEtBQU0sSUFBSUgsZ0ZBQXVCLENBQUMsQ0FBQztFQUM5Q0ksVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSUgsMkdBQXdCLENBQUM7QUFDbkQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVycy5qcz9iMGZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgTGVnYWN5TGluZXNEaWZmQ29tcHV0ZXIgfSBmcm9tICcuL2xlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyLmpzJztcbmltcG9ydCB7IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlciB9IGZyb20gJy4vZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci5qcyc7XG5leHBvcnQgY29uc3QgbGluZXNEaWZmQ29tcHV0ZXJzID0ge1xuICAgIGdldExlZ2FjeTogKCkgPT4gbmV3IExlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyKCksXG4gICAgZ2V0RGVmYXVsdDogKCkgPT4gbmV3IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlcigpLFxufTtcbiJdLCJuYW1lcyI6WyJMZWdhY3lMaW5lc0RpZmZDb21wdXRlciIsIkRlZmF1bHRMaW5lc0RpZmZDb21wdXRlciIsImxpbmVzRGlmZkNvbXB1dGVycyIsImdldExlZ2FjeSIsImdldERlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DetailedLineRangeMapping\": function() { return /* binding */ DetailedLineRangeMapping; },\n/* harmony export */   \"LineRangeMapping\": function() { return /* binding */ LineRangeMapping; },\n/* harmony export */   \"RangeMapping\": function() { return /* binding */ RangeMapping; }\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _core_textEdit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/textEdit.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nclass LineRangeMapping {\n  static inverse(mapping, originalLineCount, modifiedLineCount) {\n    const result = [];\n    let lastOriginalEndLineNumber = 1;\n    let lastModifiedEndLineNumber = 1;\n    for (const m of mapping) {\n      const r = new LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber));\n      if (!r.modified.isEmpty) {\n        result.push(r);\n      }\n      lastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n      lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n    }\n    const r = new LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1));\n    if (!r.modified.isEmpty) {\n      result.push(r);\n    }\n    return result;\n  }\n  static clip(mapping, originalRange, modifiedRange) {\n    const result = [];\n    for (const m of mapping) {\n      const original = m.original.intersect(originalRange);\n      const modified = m.modified.intersect(modifiedRange);\n      if (original && !original.isEmpty && modified && !modified.isEmpty) {\n        result.push(new LineRangeMapping(original, modified));\n      }\n    }\n    return result;\n  }\n  constructor(originalRange, modifiedRange) {\n    this.original = originalRange;\n    this.modified = modifiedRange;\n  }\n  toString() {\n    return `{${this.original.toString()}->${this.modified.toString()}}`;\n  }\n  flip() {\n    return new LineRangeMapping(this.modified, this.original);\n  }\n  join(other) {\n    return new LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));\n  }\n  /**\n   * This method assumes that the LineRangeMapping describes a valid diff!\n   * I.e. if one range is empty, the other range cannot be the entire document.\n   * It avoids various problems when the line range points to non-existing line-numbers.\n  */\n  toRangeMapping() {\n    const origInclusiveRange = this.original.toInclusiveRange();\n    const modInclusiveRange = this.modified.toInclusiveRange();\n    if (origInclusiveRange && modInclusiveRange) {\n      return new RangeMapping(origInclusiveRange, modInclusiveRange);\n    } else if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {\n      if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1)) {\n        // If one line range starts at 1, the other one must start at 1 as well.\n        throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('not a valid diff');\n      }\n      // Because one range is empty and both ranges start at line 1, none of the ranges can cover all lines.\n      // Thus, `endLineNumberExclusive` is a valid line number.\n      return new RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));\n    } else {\n      // We can assume here that both startLineNumbers are greater than 1.\n      return new RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER));\n    }\n  }\n}\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nclass DetailedLineRangeMapping extends LineRangeMapping {\n  static fromRangeMappings(rangeMappings) {\n    const originalRange = _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.join(rangeMappings.map(r => _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.fromRangeInclusive(r.originalRange)));\n    const modifiedRange = _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.join(rangeMappings.map(r => _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.fromRangeInclusive(r.modifiedRange)));\n    return new DetailedLineRangeMapping(originalRange, modifiedRange, rangeMappings);\n  }\n  constructor(originalRange, modifiedRange, innerChanges) {\n    super(originalRange, modifiedRange);\n    this.innerChanges = innerChanges;\n  }\n  flip() {\n    var _a;\n    return new DetailedLineRangeMapping(this.modified, this.original, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\n  }\n  withInnerChangesFromLineRanges() {\n    return new DetailedLineRangeMapping(this.original, this.modified, [this.toRangeMapping()]);\n  }\n}\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nclass RangeMapping {\n  constructor(originalRange, modifiedRange) {\n    this.originalRange = originalRange;\n    this.modifiedRange = modifiedRange;\n  }\n  toString() {\n    return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n  }\n  flip() {\n    return new RangeMapping(this.modifiedRange, this.originalRange);\n  }\n  /**\n   * Creates a single text edit that describes the change from the original to the modified text.\n  */\n  toTextEdit(modified) {\n    const newText = modified.getValueOfRange(this.modifiedRange);\n    return new _core_textEdit_js__WEBPACK_IMPORTED_MODULE_3__.SingleTextEdit(this.originalRange, newText);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Command\": function() { return /* binding */ Command; },\n/* harmony export */   \"CompletionItemKinds\": function() { return /* binding */ CompletionItemKinds; },\n/* harmony export */   \"DocumentHighlightKind\": function() { return /* binding */ DocumentHighlightKind; },\n/* harmony export */   \"DocumentPasteTriggerKind\": function() { return /* binding */ DocumentPasteTriggerKind; },\n/* harmony export */   \"EncodedTokenizationResult\": function() { return /* binding */ EncodedTokenizationResult; },\n/* harmony export */   \"FoldingRangeKind\": function() { return /* binding */ FoldingRangeKind; },\n/* harmony export */   \"HoverVerbosityAction\": function() { return /* binding */ HoverVerbosityAction; },\n/* harmony export */   \"InlayHintKind\": function() { return /* binding */ InlayHintKind; },\n/* harmony export */   \"InlineCompletionTriggerKind\": function() { return /* binding */ InlineCompletionTriggerKind; },\n/* harmony export */   \"InlineEditTriggerKind\": function() { return /* binding */ InlineEditTriggerKind; },\n/* harmony export */   \"LazyTokenizationSupport\": function() { return /* binding */ LazyTokenizationSupport; },\n/* harmony export */   \"NewSymbolNameTag\": function() { return /* binding */ NewSymbolNameTag; },\n/* harmony export */   \"NewSymbolNameTriggerKind\": function() { return /* binding */ NewSymbolNameTriggerKind; },\n/* harmony export */   \"SelectedSuggestionInfo\": function() { return /* binding */ SelectedSuggestionInfo; },\n/* harmony export */   \"SignatureHelpTriggerKind\": function() { return /* binding */ SignatureHelpTriggerKind; },\n/* harmony export */   \"SymbolKinds\": function() { return /* binding */ SymbolKinds; },\n/* harmony export */   \"TextEdit\": function() { return /* binding */ TextEdit; },\n/* harmony export */   \"Token\": function() { return /* binding */ Token; },\n/* harmony export */   \"TokenizationRegistry\": function() { return /* binding */ TokenizationRegistry; },\n/* harmony export */   \"TokenizationResult\": function() { return /* binding */ TokenizationResult; },\n/* harmony export */   \"getAriaLabelForSymbol\": function() { return /* binding */ getAriaLabelForSymbol; },\n/* harmony export */   \"isLocationLink\": function() { return /* binding */ isLocationLink; },\n/* harmony export */   \"symbolKindNames\": function() { return /* binding */ symbolKindNames; }\n/* harmony export */ });\n/* harmony import */ var _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/codicons.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codicons.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tokenizationRegistry.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js\");\n/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../nls.js */ \"./node_modules/monaco-editor/esm/vs/nls.js\");\n\n\n\n\n\nclass Token {\n  constructor(offset, type, language) {\n    this.offset = offset;\n    this.type = type;\n    this.language = language;\n    this._tokenBrand = undefined;\n  }\n  toString() {\n    return '(' + this.offset + ', ' + this.type + ')';\n  }\n}\n/**\n * @internal\n */\nclass TokenizationResult {\n  constructor(tokens, endState) {\n    this.tokens = tokens;\n    this.endState = endState;\n    this._tokenizationResultBrand = undefined;\n  }\n}\n/**\n * @internal\n */\nclass EncodedTokenizationResult {\n  constructor(\n  /**\n   * The tokens in binary format. Each token occupies two array indices. For token i:\n   *  - at offset 2*i => startIndex\n   *  - at offset 2*i + 1 => metadata\n   *\n   */\n  tokens, endState) {\n    this.tokens = tokens;\n    this.endState = endState;\n    this._encodedTokenizationResultBrand = undefined;\n  }\n}\nvar HoverVerbosityAction;\n(function (HoverVerbosityAction) {\n  /**\n   * Increase the verbosity of the hover\n   */\n  HoverVerbosityAction[HoverVerbosityAction[\"Increase\"] = 0] = \"Increase\";\n  /**\n   * Decrease the verbosity of the hover\n   */\n  HoverVerbosityAction[HoverVerbosityAction[\"Decrease\"] = 1] = \"Decrease\";\n})(HoverVerbosityAction || (HoverVerbosityAction = {}));\n/**\n * @internal\n */\nvar CompletionItemKinds;\n(function (CompletionItemKinds) {\n  const byKind = new Map();\n  byKind.set(0 /* CompletionItemKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);\n  byKind.set(1 /* CompletionItemKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);\n  byKind.set(2 /* CompletionItemKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);\n  byKind.set(3 /* CompletionItemKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);\n  byKind.set(4 /* CompletionItemKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);\n  byKind.set(5 /* CompletionItemKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);\n  byKind.set(6 /* CompletionItemKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);\n  byKind.set(7 /* CompletionItemKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);\n  byKind.set(8 /* CompletionItemKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);\n  byKind.set(9 /* CompletionItemKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);\n  byKind.set(10 /* CompletionItemKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);\n  byKind.set(11 /* CompletionItemKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);\n  byKind.set(12 /* CompletionItemKind.Unit */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolUnit);\n  byKind.set(13 /* CompletionItemKind.Value */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolValue);\n  byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\n  byKind.set(14 /* CompletionItemKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);\n  byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\n  byKind.set(16 /* CompletionItemKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);\n  byKind.set(17 /* CompletionItemKind.Keyword */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKeyword);\n  byKind.set(27 /* CompletionItemKind.Snippet */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolSnippet);\n  byKind.set(18 /* CompletionItemKind.Text */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolText);\n  byKind.set(19 /* CompletionItemKind.Color */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolColor);\n  byKind.set(20 /* CompletionItemKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);\n  byKind.set(21 /* CompletionItemKind.Reference */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolReference);\n  byKind.set(22 /* CompletionItemKind.Customcolor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolCustomColor);\n  byKind.set(23 /* CompletionItemKind.Folder */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFolder);\n  byKind.set(24 /* CompletionItemKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);\n  byKind.set(25 /* CompletionItemKind.User */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.account);\n  byKind.set(26 /* CompletionItemKind.Issue */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.issues);\n  /**\n   * @internal\n   */\n  function toIcon(kind) {\n    let codicon = byKind.get(kind);\n    if (!codicon) {\n      console.info('No codicon found for CompletionItemKind ' + kind);\n      codicon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;\n    }\n    return codicon;\n  }\n  CompletionItemKinds.toIcon = toIcon;\n  const data = new Map();\n  data.set('method', 0 /* CompletionItemKind.Method */);\n  data.set('function', 1 /* CompletionItemKind.Function */);\n  data.set('constructor', 2 /* CompletionItemKind.Constructor */);\n  data.set('field', 3 /* CompletionItemKind.Field */);\n  data.set('variable', 4 /* CompletionItemKind.Variable */);\n  data.set('class', 5 /* CompletionItemKind.Class */);\n  data.set('struct', 6 /* CompletionItemKind.Struct */);\n  data.set('interface', 7 /* CompletionItemKind.Interface */);\n  data.set('module', 8 /* CompletionItemKind.Module */);\n  data.set('property', 9 /* CompletionItemKind.Property */);\n  data.set('event', 10 /* CompletionItemKind.Event */);\n  data.set('operator', 11 /* CompletionItemKind.Operator */);\n  data.set('unit', 12 /* CompletionItemKind.Unit */);\n  data.set('value', 13 /* CompletionItemKind.Value */);\n  data.set('constant', 14 /* CompletionItemKind.Constant */);\n  data.set('enum', 15 /* CompletionItemKind.Enum */);\n  data.set('enum-member', 16 /* CompletionItemKind.EnumMember */);\n  data.set('enumMember', 16 /* CompletionItemKind.EnumMember */);\n  data.set('keyword', 17 /* CompletionItemKind.Keyword */);\n  data.set('snippet', 27 /* CompletionItemKind.Snippet */);\n  data.set('text', 18 /* CompletionItemKind.Text */);\n  data.set('color', 19 /* CompletionItemKind.Color */);\n  data.set('file', 20 /* CompletionItemKind.File */);\n  data.set('reference', 21 /* CompletionItemKind.Reference */);\n  data.set('customcolor', 22 /* CompletionItemKind.Customcolor */);\n  data.set('folder', 23 /* CompletionItemKind.Folder */);\n  data.set('type-parameter', 24 /* CompletionItemKind.TypeParameter */);\n  data.set('typeParameter', 24 /* CompletionItemKind.TypeParameter */);\n  data.set('account', 25 /* CompletionItemKind.User */);\n  data.set('issue', 26 /* CompletionItemKind.Issue */);\n  /**\n   * @internal\n   */\n  function fromString(value, strict) {\n    let res = data.get(value);\n    if (typeof res === 'undefined' && !strict) {\n      res = 9 /* CompletionItemKind.Property */;\n    }\n    return res;\n  }\n  CompletionItemKinds.fromString = fromString;\n})(CompletionItemKinds || (CompletionItemKinds = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nvar InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n  /**\n   * Completion was triggered automatically while editing.\n   * It is sufficient to return a single completion item in this case.\n   */\n  InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n  /**\n   * Completion was triggered explicitly by a user gesture.\n   * Return multiple completion items to enable cycling through them.\n   */\n  InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nclass SelectedSuggestionInfo {\n  constructor(range, text, completionKind, isSnippetText) {\n    this.range = range;\n    this.text = text;\n    this.completionKind = completionKind;\n    this.isSnippetText = isSnippetText;\n  }\n  equals(other) {\n    return _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(this.range).equalsRange(other.range) && this.text === other.text && this.completionKind === other.completionKind && this.isSnippetText === other.isSnippetText;\n  }\n}\n/**\n * @internal\n */\nvar DocumentPasteTriggerKind;\n(function (DocumentPasteTriggerKind) {\n  DocumentPasteTriggerKind[DocumentPasteTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n  DocumentPasteTriggerKind[DocumentPasteTriggerKind[\"PasteAs\"] = 1] = \"PasteAs\";\n})(DocumentPasteTriggerKind || (DocumentPasteTriggerKind = {}));\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n  SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n  SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n  SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n  /**\n   * A textual occurrence.\n   */\n  DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n  /**\n   * Read-access of a symbol, like reading a variable.\n   */\n  DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n  /**\n   * Write-access of a symbol, like writing to a variable.\n   */\n  DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * @internal\n */\nfunction isLocationLink(thing) {\n  return thing && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(thing.uri) && _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.range) && (_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.originSelectionRange) || _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.targetSelectionRange));\n}\n/**\n * @internal\n */\nconst symbolKindNames = {\n  [17 /* SymbolKind.Array */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Array', \"array\"),\n  [16 /* SymbolKind.Boolean */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Boolean', \"boolean\"),\n  [4 /* SymbolKind.Class */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Class', \"class\"),\n  [13 /* SymbolKind.Constant */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constant', \"constant\"),\n  [8 /* SymbolKind.Constructor */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constructor', \"constructor\"),\n  [9 /* SymbolKind.Enum */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Enum', \"enumeration\"),\n  [21 /* SymbolKind.EnumMember */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('EnumMember', \"enumeration member\"),\n  [23 /* SymbolKind.Event */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Event', \"event\"),\n  [7 /* SymbolKind.Field */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Field', \"field\"),\n  [0 /* SymbolKind.File */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('File', \"file\"),\n  [11 /* SymbolKind.Function */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Function', \"function\"),\n  [10 /* SymbolKind.Interface */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Interface', \"interface\"),\n  [19 /* SymbolKind.Key */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Key', \"key\"),\n  [5 /* SymbolKind.Method */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Method', \"method\"),\n  [1 /* SymbolKind.Module */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Module', \"module\"),\n  [2 /* SymbolKind.Namespace */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Namespace', \"namespace\"),\n  [20 /* SymbolKind.Null */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Null', \"null\"),\n  [15 /* SymbolKind.Number */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Number', \"number\"),\n  [18 /* SymbolKind.Object */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Object', \"object\"),\n  [24 /* SymbolKind.Operator */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Operator', \"operator\"),\n  [3 /* SymbolKind.Package */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Package', \"package\"),\n  [6 /* SymbolKind.Property */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Property', \"property\"),\n  [14 /* SymbolKind.String */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('String', \"string\"),\n  [22 /* SymbolKind.Struct */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Struct', \"struct\"),\n  [25 /* SymbolKind.TypeParameter */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('TypeParameter', \"type parameter\"),\n  [12 /* SymbolKind.Variable */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Variable', \"variable\")\n};\n/**\n * @internal\n */\nfunction getAriaLabelForSymbol(symbolName, kind) {\n  return (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);\n}\n/**\n * @internal\n */\nvar SymbolKinds;\n(function (SymbolKinds) {\n  const byKind = new Map();\n  byKind.set(0 /* SymbolKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);\n  byKind.set(1 /* SymbolKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);\n  byKind.set(2 /* SymbolKind.Namespace */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNamespace);\n  byKind.set(3 /* SymbolKind.Package */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolPackage);\n  byKind.set(4 /* SymbolKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);\n  byKind.set(5 /* SymbolKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);\n  byKind.set(6 /* SymbolKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);\n  byKind.set(7 /* SymbolKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);\n  byKind.set(8 /* SymbolKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);\n  byKind.set(9 /* SymbolKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\n  byKind.set(10 /* SymbolKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);\n  byKind.set(11 /* SymbolKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);\n  byKind.set(12 /* SymbolKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);\n  byKind.set(13 /* SymbolKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);\n  byKind.set(14 /* SymbolKind.String */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolString);\n  byKind.set(15 /* SymbolKind.Number */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNumber);\n  byKind.set(16 /* SymbolKind.Boolean */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolBoolean);\n  byKind.set(17 /* SymbolKind.Array */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolArray);\n  byKind.set(18 /* SymbolKind.Object */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolObject);\n  byKind.set(19 /* SymbolKind.Key */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKey);\n  byKind.set(20 /* SymbolKind.Null */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNull);\n  byKind.set(21 /* SymbolKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);\n  byKind.set(22 /* SymbolKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);\n  byKind.set(23 /* SymbolKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);\n  byKind.set(24 /* SymbolKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);\n  byKind.set(25 /* SymbolKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);\n  /**\n   * @internal\n   */\n  function toIcon(kind) {\n    let icon = byKind.get(kind);\n    if (!icon) {\n      console.info('No codicon found for SymbolKind ' + kind);\n      icon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;\n    }\n    return icon;\n  }\n  SymbolKinds.toIcon = toIcon;\n})(SymbolKinds || (SymbolKinds = {}));\n/** @internal */\nclass TextEdit {}\nclass FoldingRangeKind {\n  /**\n   * Returns a {@link FoldingRangeKind} for the given value.\n   *\n   * @param value of the kind.\n   */\n  static fromValue(value) {\n    switch (value) {\n      case 'comment':\n        return FoldingRangeKind.Comment;\n      case 'imports':\n        return FoldingRangeKind.Imports;\n      case 'region':\n        return FoldingRangeKind.Region;\n    }\n    return new FoldingRangeKind(value);\n  }\n  /**\n   * Creates a new {@link FoldingRangeKind}.\n   *\n   * @param value of the kind.\n   */\n  constructor(value) {\n    this.value = value;\n  }\n}\n/**\n * Kind for folding range representing a comment. The value of the kind is 'comment'.\n */\nFoldingRangeKind.Comment = new FoldingRangeKind('comment');\n/**\n * Kind for folding range representing a import. The value of the kind is 'imports'.\n */\nFoldingRangeKind.Imports = new FoldingRangeKind('imports');\n/**\n * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n * The value of the kind is 'region'.\n */\nFoldingRangeKind.Region = new FoldingRangeKind('region');\nvar NewSymbolNameTag;\n(function (NewSymbolNameTag) {\n  NewSymbolNameTag[NewSymbolNameTag[\"AIGenerated\"] = 1] = \"AIGenerated\";\n})(NewSymbolNameTag || (NewSymbolNameTag = {}));\nvar NewSymbolNameTriggerKind;\n(function (NewSymbolNameTriggerKind) {\n  NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n  NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));\n/**\n * @internal\n */\nvar Command;\n(function (Command) {\n  /**\n   * @internal\n   */\n  function is(obj) {\n    if (!obj || typeof obj !== 'object') {\n      return false;\n    }\n    return typeof obj.id === 'string' && typeof obj.title === 'string';\n  }\n  Command.is = is;\n})(Command || (Command = {}));\nvar InlayHintKind;\n(function (InlayHintKind) {\n  InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n  InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * @internal\n */\nclass LazyTokenizationSupport {\n  constructor(createSupport) {\n    this.createSupport = createSupport;\n    this._tokenizationSupport = null;\n  }\n  dispose() {\n    if (this._tokenizationSupport) {\n      this._tokenizationSupport.then(support => {\n        if (support) {\n          support.dispose();\n        }\n      });\n    }\n  }\n  get tokenizationSupport() {\n    if (!this._tokenizationSupport) {\n      this._tokenizationSupport = this.createSupport();\n    }\n    return this._tokenizationSupport;\n  }\n}\n/**\n * @internal\n */\nconst TokenizationRegistry = new _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__.TokenizationRegistry();\nvar InlineEditTriggerKind;\n(function (InlineEditTriggerKind) {\n  InlineEditTriggerKind[InlineEditTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n  InlineEditTriggerKind[InlineEditTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(InlineEditTriggerKind || (InlineEditTriggerKind = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9sYW5ndWFnZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RDtBQUNUO0FBQ1A7QUFDcUQ7QUFDckQ7QUFDakMsTUFBTU0sS0FBSyxDQUFDO0VBQ2ZDLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUU7SUFDaEMsSUFBSSxDQUFDRixNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDQyxXQUFXLEdBQUdDLFNBQVM7RUFDaEM7RUFDQUMsUUFBUUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDTCxNQUFNLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEdBQUc7RUFDckQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1LLGtCQUFrQixDQUFDO0VBQzVCUCxXQUFXQSxDQUFDUSxNQUFNLEVBQUVDLFFBQVEsRUFBRTtJQUMxQixJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNDLHdCQUF3QixHQUFHTCxTQUFTO0VBQzdDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNTSx5QkFBeUIsQ0FBQztFQUNuQ1gsV0FBV0E7RUFDWDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSVEsTUFBTSxFQUFFQyxRQUFRLEVBQUU7SUFDZCxJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNHLCtCQUErQixHQUFHUCxTQUFTO0VBQ3BEO0FBQ0o7QUFDTyxJQUFJUSxvQkFBb0I7QUFDL0IsQ0FBQyxVQUFVQSxvQkFBb0IsRUFBRTtFQUM3QjtBQUNKO0FBQ0E7RUFDSUEsb0JBQW9CLENBQUNBLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVU7RUFDdkU7QUFDSjtBQUNBO0VBQ0lBLG9CQUFvQixDQUFDQSxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVO0FBQzNFLENBQUMsRUFBRUEsb0JBQW9CLEtBQUtBLG9CQUFvQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ08sSUFBSUMsbUJBQW1CO0FBQzlCLENBQUMsVUFBVUEsbUJBQW1CLEVBQUU7RUFDNUIsTUFBTUMsTUFBTSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0VBQ3hCRCxNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUNBQWlDeEIsMEVBQW9CLENBQUM7RUFDbkVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUNBQW1DeEIsNEVBQXNCLENBQUM7RUFDdkVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsc0NBQXNDeEIsK0VBQXlCLENBQUM7RUFDN0VzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDeEIseUVBQW1CLENBQUM7RUFDakVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUNBQW1DeEIsNEVBQXNCLENBQUM7RUFDdkVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDeEIseUVBQW1CLENBQUM7RUFDakVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUNBQWlDeEIsMEVBQW9CLENBQUM7RUFDbkVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsb0NBQW9DeEIsNkVBQXVCLENBQUM7RUFDekVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUNBQWlDeEIsMEVBQW9CLENBQUM7RUFDbkVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUNBQW1DeEIsNEVBQXNCLENBQUM7RUFDdkVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsZ0NBQWdDeEIseUVBQW1CLENBQUM7RUFDbEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsbUNBQW1DeEIsNEVBQXNCLENBQUM7RUFDeEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsK0JBQStCeEIsd0VBQWtCLENBQUM7RUFDaEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsZ0NBQWdDeEIseUVBQW1CLENBQUM7RUFDbEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsK0JBQStCeEIsd0VBQWtCLENBQUM7RUFDaEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsbUNBQW1DeEIsNEVBQXNCLENBQUM7RUFDeEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsK0JBQStCeEIsd0VBQWtCLENBQUM7RUFDaEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMscUNBQXFDeEIsOEVBQXdCLENBQUM7RUFDNUVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsa0NBQWtDeEIsMkVBQXFCLENBQUM7RUFDdEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsa0NBQWtDeEIsMkVBQXFCLENBQUM7RUFDdEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsK0JBQStCeEIsd0VBQWtCLENBQUM7RUFDaEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsZ0NBQWdDeEIseUVBQW1CLENBQUM7RUFDbEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsK0JBQStCeEIsd0VBQWtCLENBQUM7RUFDaEVzQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxFQUFFLENBQUMsb0NBQW9DeEIsNkVBQXVC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QU0sRUFBRSxNQUFNLENBQUM7RUFDbkQsQ0FBQyxFQUFFLENBQUMsNEJBQTRCQSxpREFBUSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7RUFDaEUsQ0FBQyxFQUFFLENBQUMsNkJBQTZCQSxpREFBUSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7RUFDbkUsQ0FBQyxFQUFFLENBQUMsdUJBQXVCQSxpREFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7RUFDakQsQ0FBQyxDQUFDLENBQUMsMEJBQTBCQSxpREFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7RUFDekQsQ0FBQyxDQUFDLENBQUMsMEJBQTBCQSxpREFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7RUFDekQsQ0FBQyxDQUFDLENBQUMsNkJBQTZCQSxpREFBUSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7RUFDbEUsQ0FBQyxFQUFFLENBQUMsd0JBQXdCQSxpREFBUSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7RUFDcEQsQ0FBQyxFQUFFLENBQUMsMEJBQTBCQSxpREFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7RUFDMUQsQ0FBQyxFQUFFLENBQUMsMEJBQTBCQSxpREFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7RUFDMUQsQ0FBQyxFQUFFLENBQUMsNEJBQTRCQSxpREFBUSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7RUFDaEUsQ0FBQyxDQUFDLENBQUMsMkJBQTJCQSxpREFBUSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7RUFDNUQsQ0FBQyxDQUFDLENBQUMsNEJBQTRCQSxpREFBUSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7RUFDL0QsQ0FBQyxFQUFFLENBQUMsMEJBQTBCQSxpREFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7RUFDMUQsQ0FBQyxFQUFFLENBQUMsMEJBQTBCQSxpREFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7RUFDMUQsQ0FBQyxFQUFFLENBQUMsaUNBQWlDQSxpREFBUSxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQztFQUNoRixDQUFDLEVBQUUsQ0FBQyw0QkFBNEJBLGlEQUFRLENBQUMsVUFBVSxFQUFFLFVBQVU7QUFDbkUsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNPLFNBQVNnRixxQkFBcUJBLENBQUNDLFVBQVUsRUFBRWhDLElBQUksRUFBRTtFQUNwRCxPQUFPakQsaURBQVEsQ0FBQyxpQkFBaUIsRUFBRSxXQUFXLEVBQUVpRixVQUFVLEVBQUVGLGVBQWUsQ0FBQzlCLElBQUksQ0FBQyxDQUFDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBSWlDLFdBQVc7QUFDdEIsQ0FBQyxVQUFVQSxXQUFXLEVBQUU7RUFDcEIsTUFBTWpFLE1BQU0sR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztFQUN4QkQsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHVCQUF1QnhCLHdFQUFrQixDQUFDO0VBQ3ZEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHlCQUF5QnhCLDBFQUFvQixDQUFDO0VBQzNEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDRCQUE0QnhCLDZFQUF1QixDQUFDO0VBQ2pFc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDBCQUEwQnhCLDJFQUFxQixDQUFDO0VBQzdEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHdCQUF3QnhCLHlFQUFtQixDQUFDO0VBQ3pEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHlCQUF5QnhCLDBFQUFvQixDQUFDO0VBQzNEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDJCQUEyQnhCLDRFQUFzQixDQUFDO0VBQy9Ec0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHdCQUF3QnhCLHlFQUFtQixDQUFDO0VBQ3pEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDhCQUE4QnhCLCtFQUF5QixDQUFDO0VBQ3JFc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHVCQUF1QnhCLHdFQUFrQixDQUFDO0VBQ3ZEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLDRCQUE0QnhCLDZFQUF1QixDQUFDO0VBQ2xFc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLDJCQUEyQnhCLDRFQUFzQixDQUFDO0VBQ2hFc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLDJCQUEyQnhCLDRFQUFzQixDQUFDO0VBQ2hFc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLDJCQUEyQnhCLDRFQUFzQixDQUFDO0VBQ2hFc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHlCQUF5QnhCLDBFQUFvQixDQUFDO0VBQzVEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHlCQUF5QnhCLDBFQUFvQixDQUFDO0VBQzVEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLDBCQUEwQnhCLDJFQUFxQixDQUFDO0VBQzlEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHdCQUF3QnhCLHlFQUFtQixDQUFDO0VBQzFEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHlCQUF5QnhCLDBFQUFvQixDQUFDO0VBQzVEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHNCQUFzQnhCLHVFQUFpQixDQUFDO0VBQ3REc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHVCQUF1QnhCLHdFQUFrQixDQUFDO0VBQ3hEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLDZCQUE2QnhCLDhFQUF3QixDQUFDO0VBQ3BFc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHlCQUF5QnhCLDBFQUFvQixDQUFDO0VBQzVEc0IsTUFBTSxDQUFDRSxHQUFHLENBQUMsRUFBRSxDQUFDLHdCQUF3QnhCLHlFQUFtQixDQUFDO0VBQzFEc0IsTUFBTSxDQUFD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QSxxQkFBcUIsQ0FBQ0EscUJBQXFCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUTtFQUNyRUEscUJBQXFCLENBQUNBLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFdBQVc7QUFDL0UsQ0FBQyxFQUFFQSxxQkFBcUIsS0FBS0EscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9sYW5ndWFnZXMuanM/MDg3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RpY29uIH0gZnJvbSAnLi4vLi4vYmFzZS9jb21tb24vY29kaWNvbnMuanMnO1xuaW1wb3J0IHsgVVJJIH0gZnJvbSAnLi4vLi4vYmFzZS9jb21tb24vdXJpLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi9jb3JlL3JhbmdlLmpzJztcbmltcG9ydCB7IFRva2VuaXphdGlvblJlZ2lzdHJ5IGFzIFRva2VuaXphdGlvblJlZ2lzdHJ5SW1wbCB9IGZyb20gJy4vdG9rZW5pemF0aW9uUmVnaXN0cnkuanMnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICcuLi8uLi9ubHMuanMnO1xuZXhwb3J0IGNsYXNzIFRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcihvZmZzZXQsIHR5cGUsIGxhbmd1YWdlKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gICAgICAgIHRoaXMuX3Rva2VuQnJhbmQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJygnICsgdGhpcy5vZmZzZXQgKyAnLCAnICsgdGhpcy50eXBlICsgJyknO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBUb2tlbml6YXRpb25SZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKHRva2VucywgZW5kU3RhdGUpIHtcbiAgICAgICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgICAgIHRoaXMuZW5kU3RhdGUgPSBlbmRTdGF0ZTtcbiAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uUmVzdWx0QnJhbmQgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEVuY29kZWRUb2tlbml6YXRpb25SZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSB0b2tlbnMgaW4gYmluYXJ5IGZvcm1hdC4gRWFjaCB0b2tlbiBvY2N1cGllcyB0d28gYXJyYXkgaW5kaWNlcy4gRm9yIHRva2VuIGk6XG4gICAgICogIC0gYXQgb2Zmc2V0IDIqaSA9PiBzdGFydEluZGV4XG4gICAgICogIC0gYXQgb2Zmc2V0IDIqaSArIDEgPT4gbWV0YWRhdGFcbiAgICAgKlxuICAgICAqL1xuICAgIHRva2VucywgZW5kU3RhdGUpIHtcbiAgICAgICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgICAgIHRoaXMuZW5kU3RhdGUgPSBlbmRTdGF0ZTtcbiAgICAgICAgdGhpcy5fZW5jb2RlZFRva2VuaXphdGlvblJlc3VsdEJyYW5kID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydCB2YXIgSG92ZXJWZXJib3NpdHlBY3Rpb247XG4oZnVuY3Rpb24gKEhvdmVyVmVyYm9zaXR5QWN0aW9uKSB7XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2UgdGhlIHZlcmJvc2l0eSBvZiB0aGUgaG92ZXJcbiAgICAgKi9cbiAgICBIb3ZlclZlcmJvc2l0eUFjdGlvbltIb3ZlclZlcmJvc2l0eUFjdGlvbltcIkluY3JlYXNlXCJdID0gMF0gPSBcIkluY3JlYXNlXCI7XG4gICAgLyoqXG4gICAgICogRGVjcmVhc2UgdGhlIHZlcmJvc2l0eSBvZiB0aGUgaG92ZXJcbiAgICAgKi9cbiAgICBIb3ZlclZlcmJvc2l0eUFjdGlvbltIb3ZlclZlcmJvc2l0eUFjdGlvbltcIkRlY3JlYXNlXCJdID0gMV0gPSBcIkRlY3JlYXNlXCI7XG59KShIb3ZlclZlcmJvc2l0eUFjdGlvbiB8fCAoSG92ZXJWZXJib3NpdHlBY3Rpb24gPSB7fSkpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHZhciBDb21wbGV0aW9uSXRlbUtpbmRzO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbUtpbmRzKSB7XG4gICAgY29uc3QgYnlLaW5kID0gbmV3IE1hcCgpO1xuICAgIGJ5S2luZC5zZXQoMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kICovLCBDb2RpY29uLnN5bWJvbE1ldGhvZCk7XG4gICAgYnlLaW5kLnNldCgxIC8qIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiAqLywgQ29kaWNvbi5zeW1ib2xGdW5jdGlvbik7XG4gICAgYnlLaW5kLnNldCgyIC8qIENvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvciAqLywgQ29kaWNvbi5zeW1ib2xDb25zdHJ1Y3Rvcik7XG4gICAgYnlLaW5kLnNldCgzIC8qIENvbXBsZXRpb25JdGVtS2luZC5GaWVsZCAqLywgQ29kaWNvbi5zeW1ib2xGaWVsZCk7XG4gICAgYnlLaW5kLnNldCg0IC8qIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSAqLywgQ29kaWNvbi5zeW1ib2xWYXJpYWJsZSk7XG4gICAgYnlLaW5kLnNldCg1IC8qIENvbXBsZXRpb25JdGVtS2luZC5DbGFzcyAqLywgQ29kaWNvbi5zeW1ib2xDbGFzcyk7XG4gICAgYnlLaW5kLnNldCg2IC8qIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgKi8sIENvZGljb24uc3ltYm9sU3RydWN0KTtcbiAgICBieUtpbmQuc2V0KDcgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZSAqLywgQ29kaWNvbi5zeW1ib2xJbnRlcmZhY2UpO1xuICAgIGJ5S2luZC5zZXQoOCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlICovLCBDb2RpY29uLnN5bWJvbE1vZHVsZSk7XG4gICAgYnlLaW5kLnNldCg5IC8qIENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eSAqLywgQ29kaWNvbi5zeW1ib2xQcm9wZXJ0eSk7XG4gICAgYnlLaW5kLnNldCgxMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgKi8sIENvZGljb24uc3ltYm9sRXZlbnQpO1xuICAgIGJ5S2luZC5zZXQoMTEgLyogQ29tcGxldGlvbkl0ZW1LaW5kLk9wZXJhdG9yICovLCBDb2RpY29uLnN5bWJvbE9wZXJhdG9yKTtcbiAgICBieUtpbmQuc2V0KDEyIC8qIENvbXBsZXRpb25JdGVtS2luZC5Vbml0ICovLCBDb2RpY29uLnN5bWJvbFVuaXQpO1xuICAgIGJ5S2luZC5zZXQoMTMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlICovLCBDb2RpY29uLnN5bWJvbFZhbHVlKTtcbiAgICBieUtpbmQuc2V0KDE1IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtICovLCBDb2RpY29uLnN5bWJvbEVudW0pO1xuICAgIGJ5S2luZC5zZXQoMTQgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0YW50ICovLCBDb2RpY29uLnN5bWJvbENvbnN0YW50KTtcbiAgICBieUtpbmQuc2V0KDE1IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtICovLCBDb2RpY29uLnN5bWJvbEVudW0pO1xuICAgIGJ5S2luZC5zZXQoMTYgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkVudW1NZW1iZXIgKi8sIENvZGljb24uc3ltYm9sRW51bU1lbWJlcik7XG4gICAgYnlLaW5kLnNldCgxNyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCAqLywgQ29kaWNvbi5zeW1ib2xLZXl3b3JkKTtcbiAgICBieUtpbmQuc2V0KDI3IC8qIENvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0ICovLCBDb2RpY29uLnN5bWJvbFNuaXBwZXQpO1xuICAgIGJ5S2luZC5zZXQoMTggLyogQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQgKi8sIENvZGljb24uc3ltYm9sVGV4dCk7XG4gICAgYnlLaW5kLnNldCgxOSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29sb3IgKi8sIENvZGljb24uc3ltYm9sQ29sb3IpO1xuICAgIGJ5S2luZC5zZXQoMjAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGUgKi8sIENvZGljb24uc3ltYm9sRmlsZSk7XG4gICAgYnlLaW5kLnNldCgyMSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlICovLCBDb2RpY29uLnN5bWJvbFJlZmVyZW5jZSk7XG4gICAgYnlLaW5kLnNldCgyMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ3VzdG9tY29sb3IgKi8sIENvZGljb24uc3ltYm9sQ3VzdG9tQ29sb3IpO1xuICAgIGJ5S2luZC5zZXQoMjMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZvbGRlciAqLywgQ29kaWNvbi5zeW1ib2xGb2xkZXIpO1xuICAgIGJ5S2luZC5zZXQoMjQgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlR5cGVQYXJhbWV0ZXIgKi8sIENvZGljb24uc3ltYm9sVHlwZVBhcmFtZXRlcik7XG4gICAgYnlLaW5kLnNldCgyNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVXNlciAqLywgQ29kaWNvbi5hY2NvdW50KTtcbiAgICBieUtpbmQuc2V0KDI2IC8qIENvbXBsZXRpb25JdGVtS2luZC5Jc3N1ZSAqLywgQ29kaWNvbi5pc3N1ZXMpO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSWNvbihraW5kKSB7XG4gICAgICAgIGxldCBjb2RpY29uID0gYnlLaW5kLmdldChraW5kKTtcbiAgICAgICAgaWYgKCFjb2RpY29uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ05vIGNvZGljb24gZm91bmQgZm9yIENvbXBsZXRpb25JdGVtS2luZCAnICsga2luZCk7XG4gICAgICAgICAgICBjb2RpY29uID0gQ29kaWNvbi5zeW1ib2xQcm9wZXJ0eTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kaWNvbjtcbiAgICB9XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kcy50b0ljb24gPSB0b0ljb247XG4gICAgY29uc3QgZGF0YSA9IG5ldyBNYXAoKTtcbiAgICBkYXRhLnNldCgnbWV0aG9kJywgMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kICovKTtcbiAgICBkYXRhLnNldCgnZnVuY3Rpb24nLCAxIC8qIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiAqLyk7XG4gICAgZGF0YS5zZXQoJ2NvbnN0cnVjdG9yJywgMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RydWN0b3IgKi8pO1xuICAgIGRhdGEuc2V0KCdmaWVsZCcsIDMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZpZWxkICovKTtcbiAgICBkYXRhLnNldCgndmFyaWFibGUnLCA0IC8qIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSAqLyk7XG4gICAgZGF0YS5zZXQoJ2NsYXNzJywgNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ2xhc3MgKi8pO1xuICAgIGRhdGEuc2V0KCdzdHJ1Y3QnLCA2IC8qIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgKi8pO1xuICAgIGRhdGEuc2V0KCdpbnRlcmZhY2UnLCA3IC8qIENvbXBsZXRpb25JdGVtS2luZC5JbnRlcmZhY2UgKi8pO1xuICAgIGRhdGEuc2V0KCdtb2R1bGUnLCA4IC8qIENvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGUgKi8pO1xuICAgIGRhdGEuc2V0KCdwcm9wZXJ0eScsIDkgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5ICovKTtcbiAgICBkYXRhLnNldCgnZXZlbnQnLCAxMCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgKi8pO1xuICAgIGRhdGEuc2V0KCdvcGVyYXRvcicsIDExIC8qIENvbXBsZXRpb25JdGVtS2luZC5PcGVyYXRvciAqLyk7XG4gICAgZGF0YS5zZXQoJ3VuaXQnLCAxMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCAqLyk7XG4gICAgZGF0YS5zZXQoJ3ZhbHVlJywgMTMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlICovKTtcbiAgICBkYXRhLnNldCgnY29uc3RhbnQnLCAxNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RhbnQgKi8pO1xuICAgIGRhdGEuc2V0KCdlbnVtJywgMTUgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkVudW0gKi8pO1xuICAgIGRhdGEuc2V0KCdlbnVtLW1lbWJlcicsIDE2IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtTWVtYmVyICovKTtcbiAgICBkYXRhLnNldCgnZW51bU1lbWJlcicsIDE2IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtTWVtYmVyICovKTtcbiAgICBkYXRhLnNldCgna2V5d29yZCcsIDE3IC8qIENvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkICovKTtcbiAgICBkYXRhLnNldCgnc25pcHBldCcsIDI3IC8qIENvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0ICovKTtcbiAgICBkYXRhLnNldCgndGV4dCcsIDE4IC8qIENvbXBsZXRpb25JdGVtS2luZC5UZXh0ICovKTtcbiAgICBkYXRhLnNldCgnY29sb3InLCAxOSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29sb3IgKi8pO1xuICAgIGRhdGEuc2V0KCdmaWxlJywgMjAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGUgKi8pO1xuICAgIGRhdGEuc2V0KCdyZWZlcmVuY2UnLCAyMSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlICovKTtcbiAgICBkYXRhLnNldCgnY3VzdG9tY29sb3InLCAyMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ3VzdG9tY29sb3IgKi8pO1xuICAgIGRhdGEuc2V0KCdmb2xkZXInLCAyMyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRm9sZGVyICovKTtcbiAgICBkYXRhLnNldCgndHlwZS1wYXJhbWV0ZXInLCAyNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciAqLyk7XG4gICAgZGF0YS5zZXQoJ3R5cGVQYXJhbWV0ZXInLCAyNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciAqLyk7XG4gICAgZGF0YS5zZXQoJ2FjY291bnQnLCAyNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVXNlciAqLyk7XG4gICAgZGF0YS5zZXQoJ2lzc3VlJywgMjYgLyogQ29tcGxldGlvbkl0ZW1LaW5kLklzc3VlICovKTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tU3RyaW5nKHZhbHVlLCBzdHJpY3QpIHtcbiAgICAgICAgbGV0IHJlcyA9IGRhdGEuZ2V0KHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09ICd1bmRlZmluZWQnICYmICFzdHJpY3QpIHtcbiAgICAgICAgICAgIHJlcyA9IDkgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5ICovO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIENvbXBsZXRpb25JdGVtS2luZHMuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XG59KShDb21wbGV0aW9uSXRlbUtpbmRzIHx8IChDb21wbGV0aW9uSXRlbUtpbmRzID0ge30pKTtcbi8qKlxuICogSG93IGFuIHtAbGluayBJbmxpbmVDb21wbGV0aW9uc1Byb3ZpZGVyIGlubGluZSBjb21wbGV0aW9uIHByb3ZpZGVyfSB3YXMgdHJpZ2dlcmVkLlxuICovXG5leHBvcnQgdmFyIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGF1dG9tYXRpY2FsbHkgd2hpbGUgZWRpdGluZy5cbiAgICAgKiBJdCBpcyBzdWZmaWNpZW50IHRvIHJldHVybiBhIHNpbmdsZSBjb21wbGV0aW9uIGl0ZW0gaW4gdGhpcyBjYXNlLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZFtJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJBdXRvbWF0aWNcIl0gPSAwXSA9IFwiQXV0b21hdGljXCI7XG4gICAgLyoqXG4gICAgICogQ29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkIGV4cGxpY2l0bHkgYnkgYSB1c2VyIGdlc3R1cmUuXG4gICAgICogUmV0dXJuIG11bHRpcGxlIGNvbXBsZXRpb24gaXRlbXMgdG8gZW5hYmxlIGN5Y2xpbmcgdGhyb3VnaCB0aGVtLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZFtJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJFeHBsaWNpdFwiXSA9IDFdID0gXCJFeHBsaWNpdFwiO1xufSkoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kIHx8IChJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIFNlbGVjdGVkU3VnZ2VzdGlvbkluZm8ge1xuICAgIGNvbnN0cnVjdG9yKHJhbmdlLCB0ZXh0LCBjb21wbGV0aW9uS2luZCwgaXNTbmlwcGV0VGV4dCkge1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbktpbmQgPSBjb21wbGV0aW9uS2luZDtcbiAgICAgICAgdGhpcy5pc1NuaXBwZXRUZXh0ID0gaXNTbmlwcGV0VGV4dDtcbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBSYW5nZS5saWZ0KHRoaXMucmFuZ2UpLmVxdWFsc1JhbmdlKG90aGVyLnJhbmdlKVxuICAgICAgICAgICAgJiYgdGhpcy50ZXh0ID09PSBvdGhlci50ZXh0XG4gICAgICAgICAgICAmJiB0aGlzLmNvbXBsZXRpb25LaW5kID09PSBvdGhlci5jb21wbGV0aW9uS2luZFxuICAgICAgICAgICAgJiYgdGhpcy5pc1NuaXBwZXRUZXh0ID09PSBvdGhlci5pc1NuaXBwZXRUZXh0O1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmQpIHtcbiAgICBEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmRbRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kW1wiQXV0b21hdGljXCJdID0gMF0gPSBcIkF1dG9tYXRpY1wiO1xuICAgIERvY3VtZW50UGFzdGVUcmlnZ2VyS2luZFtEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmRbXCJQYXN0ZUFzXCJdID0gMV0gPSBcIlBhc3RlQXNcIjtcbn0pKERvY3VtZW50UGFzdGVUcmlnZ2VyS2luZCB8fCAoRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kID0ge30pKTtcbmV4cG9ydCB2YXIgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQpIHtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMV0gPSBcIkludm9rZVwiO1xuICAgIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbXCJUcmlnZ2VyQ2hhcmFjdGVyXCJdID0gMl0gPSBcIlRyaWdnZXJDaGFyYWN0ZXJcIjtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiQ29udGVudENoYW5nZVwiXSA9IDNdID0gXCJDb250ZW50Q2hhbmdlXCI7XG59KShTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgfHwgKFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRIaWdobGlnaHRLaW5kO1xuKGZ1bmN0aW9uIChEb2N1bWVudEhpZ2hsaWdodEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBIHRleHR1YWwgb2NjdXJyZW5jZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmRbRG9jdW1lbnRIaWdobGlnaHRLaW5kW1wiVGV4dFwiXSA9IDBdID0gXCJUZXh0XCI7XG4gICAgLyoqXG4gICAgICogUmVhZC1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2UgcmVhZGluZyBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZFtEb2N1bWVudEhpZ2hsaWdodEtpbmRbXCJSZWFkXCJdID0gMV0gPSBcIlJlYWRcIjtcbiAgICAvKipcbiAgICAgKiBXcml0ZS1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2Ugd3JpdGluZyB0byBhIHZhcmlhYmxlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZFtEb2N1bWVudEhpZ2hsaWdodEtpbmRbXCJXcml0ZVwiXSA9IDJdID0gXCJXcml0ZVwiO1xufSkoRG9jdW1lbnRIaWdobGlnaHRLaW5kIHx8IChEb2N1bWVudEhpZ2hsaWdodEtpbmQgPSB7fSkpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYXRpb25MaW5rKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nXG4gICAgICAgICYmIFVSSS5pc1VyaSh0aGluZy51cmkpXG4gICAgICAgICYmIFJhbmdlLmlzSVJhbmdlKHRoaW5nLnJhbmdlKVxuICAgICAgICAmJiAoUmFuZ2UuaXNJUmFuZ2UodGhpbmcub3JpZ2luU2VsZWN0aW9uUmFuZ2UpIHx8IFJhbmdlLmlzSVJhbmdlKHRoaW5nLnRhcmdldFNlbGVjdGlvblJhbmdlKSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3Qgc3ltYm9sS2luZE5hbWVzID0ge1xuICAgIFsxNyAvKiBTeW1ib2xLaW5kLkFycmF5ICovXTogbG9jYWxpemUoJ0FycmF5JywgXCJhcnJheVwiKSxcbiAgICBbMTYgLyogU3ltYm9sS2luZC5Cb29sZWFuICovXTogbG9jYWxpemUoJ0Jvb2xlYW4nLCBcImJvb2xlYW5cIiksXG4gICAgWzQgLyogU3ltYm9sS2luZC5DbGFzcyAqL106IGxvY2FsaXplKCdDbGFzcycsIFwiY2xhc3NcIiksXG4gICAgWzEzIC8qIFN5bWJvbEtpbmQuQ29uc3RhbnQgKi9dOiBsb2NhbGl6ZSgnQ29uc3RhbnQnLCBcImNvbnN0YW50XCIpLFxuICAgIFs4IC8qIFN5bWJvbEtpbmQuQ29uc3RydWN0b3IgKi9dOiBsb2NhbGl6ZSgnQ29uc3RydWN0b3InLCBcImNvbnN0cnVjdG9yXCIpLFxuICAgIFs5IC8qIFN5bWJvbEtpbmQuRW51bSAqL106IGxvY2FsaXplKCdFbnVtJywgXCJlbnVtZXJhdGlvblwiKSxcbiAgICBbMjEgLyogU3ltYm9sS2luZC5FbnVtTWVtYmVyICovXTogbG9jYWxpemUoJ0VudW1NZW1iZXInLCBcImVudW1lcmF0aW9uIG1lbWJlclwiKSxcbiAgICBbMjMgLyogU3ltYm9sS2luZC5FdmVudCAqL106IGxvY2FsaXplKCdFdmVudCcsIFwiZXZlbnRcIiksXG4gICAgWzcgLyogU3ltYm9sS2luZC5GaWVsZCAqL106IGxvY2FsaXplKCdGaWVsZCcsIFwiZmllbGRcIiksXG4gICAgWzAgLyogU3ltYm9sS2luZC5GaWxlICovXTogbG9jYWxpemUoJ0ZpbGUnLCBcImZpbGVcIiksXG4gICAgWzExIC8qIFN5bWJvbEtpbmQuRnVuY3Rpb24gKi9dOiBsb2NhbGl6ZSgnRnVuY3Rpb24nLCBcImZ1bmN0aW9uXCIpLFxuICAgIFsxMCAvKiBTeW1ib2xLaW5kLkludGVyZmFjZSAqL106IGxvY2FsaXplKCdJbnRlcmZhY2UnLCBcImludGVyZmFjZVwiKSxcbiAgICBbMTkgLyogU3ltYm9sS2luZC5LZXkgKi9dOiBsb2NhbGl6ZSgnS2V5JywgXCJrZXlcIiksXG4gICAgWzUgLyogU3ltYm9sS2luZC5NZXRob2QgKi9dOiBsb2NhbGl6ZSgnTWV0aG9kJywgXCJtZXRob2RcIiksXG4gICAgWzEgLyogU3ltYm9sS2luZC5Nb2R1bGUgKi9dOiBsb2NhbGl6ZSgnTW9kdWxlJywgXCJtb2R1bGVcIiksXG4gICAgWzIgLyogU3ltYm9sS2luZC5OYW1lc3BhY2UgKi9dOiBsb2NhbGl6ZSgnTmFtZXNwYWNlJywgXCJuYW1lc3BhY2VcIiksXG4gICAgWzIwIC8qIFN5bWJvbEtpbmQuTnVsbCAqL106IGxvY2FsaXplKCdOdWxsJywgXCJudWxsXCIpLFxuICAgIFsxNSAvKiBTeW1ib2xLaW5kLk51bWJlciAqL106IGxvY2FsaXplKCdOdW1iZXInLCBcIm51bWJlclwiKSxcbiAgICBbMTggLyogU3ltYm9sS2luZC5PYmplY3QgKi9dOiBsb2NhbGl6ZSgnT2JqZWN0JywgXCJvYmplY3RcIiksXG4gICAgWzI0IC8qIFN5bWJvbEtpbmQuT3BlcmF0b3IgKi9dOiBsb2NhbGl6ZSgnT3BlcmF0b3InLCBcIm9wZXJhdG9yXCIpLFxuICAgIFszIC8qIFN5bWJvbEtpbmQuUGFja2FnZSAqL106IGxvY2FsaXplKCdQYWNrYWdlJywgXCJwYWNrYWdlXCIpLFxuICAgIFs2IC8qIFN5bWJvbEtpbmQuUHJvcGVydHkgKi9dOiBsb2NhbGl6ZSgnUHJvcGVydHknLCBcInByb3BlcnR5XCIpLFxuICAgIFsxNCAvKiBTeW1ib2xLaW5kLlN0cmluZyAqL106IGxvY2FsaXplKCdTdHJpbmcnLCBcInN0cmluZ1wiKSxcbiAgICBbMjIgLyogU3ltYm9sS2luZC5TdHJ1Y3QgKi9dOiBsb2NhbGl6ZSgnU3RydWN0JywgXCJzdHJ1Y3RcIiksXG4gICAgWzI1IC8qIFN5bWJvbEtpbmQuVHlwZVBhcmFtZXRlciAqL106IGxvY2FsaXplKCdUeXBlUGFyYW1ldGVyJywgXCJ0eXBlIHBhcmFtZXRlclwiKSxcbiAgICBbMTIgLyogU3ltYm9sS2luZC5WYXJpYWJsZSAqL106IGxvY2FsaXplKCdWYXJpYWJsZScsIFwidmFyaWFibGVcIiksXG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFyaWFMYWJlbEZvclN5bWJvbChzeW1ib2xOYW1lLCBraW5kKSB7XG4gICAgcmV0dXJuIGxvY2FsaXplKCdzeW1ib2xBcmlhTGFiZWwnLCAnezB9ICh7MX0pJywgc3ltYm9sTmFtZSwgc3ltYm9sS2luZE5hbWVzW2tpbmRdKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgU3ltYm9sS2luZHM7XG4oZnVuY3Rpb24gKFN5bWJvbEtpbmRzKSB7XG4gICAgY29uc3QgYnlLaW5kID0gbmV3IE1hcCgpO1xuICAgIGJ5S2luZC5zZXQoMCAvKiBTeW1ib2xLaW5kLkZpbGUgKi8sIENvZGljb24uc3ltYm9sRmlsZSk7XG4gICAgYnlLaW5kLnNldCgxIC8qIFN5bWJvbEtpbmQuTW9kdWxlICovLCBDb2RpY29uLnN5bWJvbE1vZHVsZSk7XG4gICAgYnlLaW5kLnNldCgyIC8qIFN5bWJvbEtpbmQuTmFtZXNwYWNlICovLCBDb2RpY29uLnN5bWJvbE5hbWVzcGFjZSk7XG4gICAgYnlLaW5kLnNldCgzIC8qIFN5bWJvbEtpbmQuUGFja2FnZSAqLywgQ29kaWNvbi5zeW1ib2xQYWNrYWdlKTtcbiAgICBieUtpbmQuc2V0KDQgLyogU3ltYm9sS2luZC5DbGFzcyAqLywgQ29kaWNvbi5zeW1ib2xDbGFzcyk7XG4gICAgYnlLaW5kLnNldCg1IC8qIFN5bWJvbEtpbmQuTWV0aG9kICovLCBDb2RpY29uLnN5bWJvbE1ldGhvZCk7XG4gICAgYnlLaW5kLnNldCg2IC8qIFN5bWJvbEtpbmQuUHJvcGVydHkgKi8sIENvZGljb24uc3ltYm9sUHJvcGVydHkpO1xuICAgIGJ5S2luZC5zZXQoNyAvKiBTeW1ib2xLaW5kLkZpZWxkICovLCBDb2RpY29uLnN5bWJvbEZpZWxkKTtcbiAgICBieUtpbmQuc2V0KDggLyogU3ltYm9sS2luZC5Db25zdHJ1Y3RvciAqLywgQ29kaWNvbi5zeW1ib2xDb25zdHJ1Y3Rvcik7XG4gICAgYnlLaW5kLnNldCg5IC8qIFN5bWJvbEtpbmQuRW51bSAqLywgQ29kaWNvbi5zeW1ib2xFbnVtKTtcbiAgICBieUtpbmQuc2V0KDEwIC8qIFN5bWJvbEtpbmQuSW50ZXJmYWNlICovLCBDb2RpY29uLnN5bWJvbEludGVyZmFjZSk7XG4gICAgYnlLaW5kLnNldCgxMSAvKiBTeW1ib2xLaW5kLkZ1bmN0aW9uICovLCBDb2RpY29uLnN5bWJvbEZ1bmN0aW9uKTtcbiAgICBieUtpbmQuc2V0KDEyIC8qIFN5bWJvbEtpbmQuVmFyaWFibGUgKi8sIENvZGljb24uc3ltYm9sVmFyaWFibGUpO1xuICAgIGJ5S2luZC5zZXQoMTMgLyogU3ltYm9sS2luZC5Db25zdGFudCAqLywgQ29kaWNvbi5zeW1ib2xDb25zdGFudCk7XG4gICAgYnlLaW5kLnNldCgxNCAvKiBTeW1ib2xLaW5kLlN0cmluZyAqLywgQ29kaWNvbi5zeW1ib2xTdHJpbmcpO1xuICAgIGJ5S2luZC5zZXQoMTUgLyogU3ltYm9sS2luZC5OdW1iZXIgKi8sIENvZGljb24uc3ltYm9sTnVtYmVyKTtcbiAgICBieUtpbmQuc2V0KDE2IC8qIFN5bWJvbEtpbmQuQm9vbGVhbiAqLywgQ29kaWNvbi5zeW1ib2xCb29sZWFuKTtcbiAgICBieUtpbmQuc2V0KDE3IC8qIFN5bWJvbEtpbmQuQXJyYXkgKi8sIENvZGljb24uc3ltYm9sQXJyYXkpO1xuICAgIGJ5S2luZC5zZXQoMTggLyogU3ltYm9sS2luZC5PYmplY3QgKi8sIENvZGljb24uc3ltYm9sT2JqZWN0KTtcbiAgICBieUtpbmQuc2V0KDE5IC8qIFN5bWJvbEtpbmQuS2V5ICovLCBDb2RpY29uLnN5bWJvbEtleSk7XG4gICAgYnlLaW5kLnNldCgyMCAvKiBTeW1ib2xLaW5kLk51bGwgKi8sIENvZGljb24uc3ltYm9sTnVsbCk7XG4gICAgYnlLaW5kLnNldCgyMSAvKiBTeW1ib2xLaW5kLkVudW1NZW1iZXIgKi8sIENvZGljb24uc3ltYm9sRW51bU1lbWJlcik7XG4gICAgYnlLaW5kLnNldCgyMiAvKiBTeW1ib2xLaW5kLlN0cnVjdCAqLywgQ29kaWNvbi5zeW1ib2xTdHJ1Y3QpO1xuICAgIGJ5S2luZC5zZXQoMjMgLyogU3ltYm9sS2luZC5FdmVudCAqLywgQ29kaWNvbi5zeW1ib2xFdmVudCk7XG4gICAgYnlLaW5kLnNldCgyNCAvKiBTeW1ib2xLaW5kLk9wZXJhdG9yICovLCBDb2RpY29uLnN5bWJvbE9wZXJhdG9yKTtcbiAgICBieUtpbmQuc2V0KDI1IC8qIFN5bWJvbEtpbmQuVHlwZVBhcmFtZXRlciAqLywgQ29kaWNvbi5zeW1ib2xUeXBlUGFyYW1ldGVyKTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ljb24oa2luZCkge1xuICAgICAgICBsZXQgaWNvbiA9IGJ5S2luZC5nZXQoa2luZCk7XG4gICAgICAgIGlmICghaWNvbikge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdObyBjb2RpY29uIGZvdW5kIGZvciBTeW1ib2xLaW5kICcgKyBraW5kKTtcbiAgICAgICAgICAgIGljb24gPSBDb2RpY29uLnN5bWJvbFByb3BlcnR5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpY29uO1xuICAgIH1cbiAgICBTeW1ib2xLaW5kcy50b0ljb24gPSB0b0ljb247XG59KShTeW1ib2xLaW5kcyB8fCAoU3ltYm9sS2luZHMgPSB7fSkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIFRleHRFZGl0IHtcbn1cbmV4cG9ydCBjbGFzcyBGb2xkaW5nUmFuZ2VLaW5kIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEge0BsaW5rIEZvbGRpbmdSYW5nZUtpbmR9IGZvciB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgb2YgdGhlIGtpbmQuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21WYWx1ZSh2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzogcmV0dXJuIEZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudDtcbiAgICAgICAgICAgIGNhc2UgJ2ltcG9ydHMnOiByZXR1cm4gRm9sZGluZ1JhbmdlS2luZC5JbXBvcnRzO1xuICAgICAgICAgICAgY2FzZSAncmVnaW9uJzogcmV0dXJuIEZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRm9sZGluZ1JhbmdlS2luZCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIEZvbGRpbmdSYW5nZUtpbmR9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIG9mIHRoZSBraW5kLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG4vKipcbiAqIEtpbmQgZm9yIGZvbGRpbmcgcmFuZ2UgcmVwcmVzZW50aW5nIGEgY29tbWVudC4gVGhlIHZhbHVlIG9mIHRoZSBraW5kIGlzICdjb21tZW50Jy5cbiAqL1xuRm9sZGluZ1JhbmdlS2luZC5Db21tZW50ID0gbmV3IEZvbGRpbmdSYW5nZUtpbmQoJ2NvbW1lbnQnKTtcbi8qKlxuICogS2luZCBmb3IgZm9sZGluZyByYW5nZSByZXByZXNlbnRpbmcgYSBpbXBvcnQuIFRoZSB2YWx1ZSBvZiB0aGUga2luZCBpcyAnaW1wb3J0cycuXG4gKi9cbkZvbGRpbmdSYW5nZUtpbmQuSW1wb3J0cyA9IG5ldyBGb2xkaW5nUmFuZ2VLaW5kKCdpbXBvcnRzJyk7XG4vKipcbiAqIEtpbmQgZm9yIGZvbGRpbmcgcmFuZ2UgcmVwcmVzZW50aW5nIHJlZ2lvbnMgKGZvciBleGFtcGxlIG1hcmtlZCBieSBgI3JlZ2lvbmAsIGAjZW5kcmVnaW9uYCkuXG4gKiBUaGUgdmFsdWUgb2YgdGhlIGtpbmQgaXMgJ3JlZ2lvbicuXG4gKi9cbkZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uID0gbmV3IEZvbGRpbmdSYW5nZUtpbmQoJ3JlZ2lvbicpO1xuZXhwb3J0IHZhciBOZXdTeW1ib2xOYW1lVGFnO1xuKGZ1bmN0aW9uIChOZXdTeW1ib2xOYW1lVGFnKSB7XG4gICAgTmV3U3ltYm9sTmFtZVRhZ1tOZXdTeW1ib2xOYW1lVGFnW1wiQUlHZW5lcmF0ZWRcIl0gPSAxXSA9IFwiQUlHZW5lcmF0ZWRcIjtcbn0pKE5ld1N5bWJvbE5hbWVUYWcgfHwgKE5ld1N5bWJvbE5hbWVUYWcgPSB7fSkpO1xuZXhwb3J0IHZhciBOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZCkge1xuICAgIE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZFtOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmRbXCJJbnZva2VcIl0gPSAwXSA9IFwiSW52b2tlXCI7XG4gICAgTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kW05ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZFtcIkF1dG9tYXRpY1wiXSA9IDFdID0gXCJBdXRvbWF0aWNcIjtcbn0pKE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZCB8fCAoTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kID0ge30pKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgQ29tbWFuZDtcbihmdW5jdGlvbiAoQ29tbWFuZCkge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKG9iaikge1xuICAgICAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqLmlkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgdHlwZW9mIG9iai50aXRsZSA9PT0gJ3N0cmluZyc7XG4gICAgfVxuICAgIENvbW1hbmQuaXMgPSBpcztcbn0pKENvbW1hbmQgfHwgKENvbW1hbmQgPSB7fSkpO1xuZXhwb3J0IHZhciBJbmxheUhpbnRLaW5kO1xuKGZ1bmN0aW9uIChJbmxheUhpbnRLaW5kKSB7XG4gICAgSW5sYXlIaW50S2luZFtJbmxheUhpbnRLaW5kW1wiVHlwZVwiXSA9IDFdID0gXCJUeXBlXCI7XG4gICAgSW5sYXlIaW50S2luZFtJbmxheUhpbnRLaW5kW1wiUGFyYW1ldGVyXCJdID0gMl0gPSBcIlBhcmFtZXRlclwiO1xufSkoSW5sYXlIaW50S2luZCB8fCAoSW5sYXlIaW50S2luZCA9IHt9KSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgTGF6eVRva2VuaXphdGlvblN1cHBvcnQge1xuICAgIGNvbnN0cnVjdG9yKGNyZWF0ZVN1cHBvcnQpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydDtcbiAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydCA9IG51bGw7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0LnRoZW4oKHN1cHBvcnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwb3J0LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgdG9rZW5pemF0aW9uU3VwcG9ydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0ID0gdGhpcy5jcmVhdGVTdXBwb3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnQ7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFRva2VuaXphdGlvblJlZ2lzdHJ5ID0gbmV3IFRva2VuaXphdGlvblJlZ2lzdHJ5SW1wbCgpO1xuZXhwb3J0IHZhciBJbmxpbmVFZGl0VHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKElubGluZUVkaXRUcmlnZ2VyS2luZCkge1xuICAgIElubGluZUVkaXRUcmlnZ2VyS2luZFtJbmxpbmVFZGl0VHJpZ2dlcktpbmRbXCJJbnZva2VcIl0gPSAwXSA9IFwiSW52b2tlXCI7XG4gICAgSW5saW5lRWRpdFRyaWdnZXJLaW5kW0lubGluZUVkaXRUcmlnZ2VyS2luZFtcIkF1dG9tYXRpY1wiXSA9IDFdID0gXCJBdXRvbWF0aWNcIjtcbn0pKElubGluZUVkaXRUcmlnZ2VyS2luZCB8fCAoSW5saW5lRWRpdFRyaWdnZXJLaW5kID0ge30pKTtcbiJdLCJuYW1lcyI6WyJDb2RpY29uIiwiVVJJIiwiUmFuZ2UiLCJUb2tlbml6YXRpb25SZWdpc3RyeSIsIlRva2VuaXphdGlvblJlZ2lzdHJ5SW1wbCIsImxvY2FsaXplIiwiVG9rZW4iLCJjb25zdHJ1Y3RvciIsIm9mZnNldCIsInR5cGUiLCJsYW5ndWFnZSIsIl90b2tlbkJyYW5kIiwidW5kZWZpbmVkIiwidG9TdHJpbmciLCJUb2tlbml6YXRpb25SZXN1bHQiLCJ0b2tlbnMiLCJlbmRTdGF0ZSIsIl90b2tlbml6YXRpb25SZXN1bHRCcmFuZCIsIkVuY29kZWRUb2tlbml6YXRpb25SZXN1bHQiLCJfZW5jb2RlZFRva2VuaXphdGlvblJlc3VsdEJyYW5kIiwiSG92ZXJWZXJib3NpdHlBY3Rpb24iLCJDb21wbGV0aW9uSXRlbUtpbmRzIiwiYnlLaW5kIiwiTWFwIiwic2V0Iiwic3ltYm9sTWV0aG9kIiwic3ltYm9sRnVuY3Rpb24iLCJzeW1ib2xDb25zdHJ1Y3RvciIsInN5bWJvbEZpZWxkIiwic3ltYm9sVmFyaWFibGUiLCJzeW1ib2xDbGFzcyIsInN5bWJvbFN0cnVjdCIsInN5bWJvbEludGVyZmFjZSIsInN5bWJvbE1vZHVsZSIsInN5bWJvbFByb3BlcnR5Iiwic3ltYm9sRXZlbnQiLCJzeW1ib2xPcGVyYXRvciIsInN5bWJvbFVuaXQiLCJzeW1ib2xWYWx1ZSIsInN5bWJvbEVudW0iLCJzeW1ib2xDb25zdGFudCIsInN5bWJvbEVudW1NZW1iZXIiLCJzeW1ib2xLZXl3b3JkIiwic3ltYm9sU25pcHBldCIsInN5bWJvbFRleHQiLCJzeW1ib2xDb2xvciIsInN5bWJvbEZpbGUiLCJzeW1ib2xSZWZlcmVuY2UiLCJzeW1ib2xDdXN0b21Db2xvciIsInN5bWJvbEZvbGRlciIsInN5bWJvbFR5cGVQYXJhbWV0ZXIiLCJhY2NvdW50IiwiaXNzdWVzIiwidG9JY29uIiwia2luZCIsImNvZGljb24iLCJnZXQiLCJjb25zb2xlIiwiaW5mbyIsImRhdGEiLCJmcm9tU3RyaW5nIiwidmFsdWUiLCJzdHJpY3QiLCJyZXMiLCJJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCJTZWxlY3RlZFN1Z2dlc3Rpb25JbmZvIiwicmFuZ2UiLCJ0ZXh0IiwiY29tcGxldGlvbktpbmQiLCJpc1NuaXBwZXRUZXh0IiwiZXF1YWxzIiwib3RoZXIiLCJsaWZ0IiwiZXF1YWxzUmFuZ2UiLCJEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmQiLCJTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQiLCJEb2N1bWVudEhpZ2hsaWdodEtpbmQiLCJpc0xvY2F0aW9uTGluayIsInRoaW5nIiwiaXNVcmkiLCJ1cmkiLCJpc0lSYW5nZSIsIm9yaWdpblNlbGVjdGlvblJhbmdlIiwidGFyZ2V0U2VsZWN0aW9uUmFuZ2UiLCJzeW1ib2xLaW5kTmFtZXMiLCJnZXRBcmlhTGFiZWxGb3JTeW1ib2wiLCJzeW1ib2xOYW1lIiwiU3ltYm9sS2luZHMiLCJzeW1ib2xOYW1lc3BhY2UiLCJzeW1ib2xQYWNrYWdlIiwic3ltYm9sU3RyaW5nIiwic3ltYm9sTnVtYmVyIiwic3ltYm9sQm9vbGVhbiIsInN5bWJvbEFycmF5Iiwic3ltYm9sT2JqZWN0Iiwic3ltYm9sS2V5Iiwic3ltYm9sTnVsbCIsImljb24iLCJUZXh0RWRpdCIsIkZvbGRpbmdSYW5nZUtpbmQiLCJmcm9tVmFsdWUiLCJDb21tZW50IiwiSW1wb3J0cyIsIlJlZ2lvbiIsIk5ld1N5bWJvbE5hbWVUYWciLCJOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQiLCJDb21tYW5kIiwiaXMiLCJvYmoiLCJpZCIsInRpdGxlIiwiSW5sYXlIaW50S2luZCIsIkxhenlUb2tlbml6YXRpb25TdXBwb3J0IiwiY3JlYXRlU3VwcG9ydCIsIl90b2tlbml6YXRpb25TdXBwb3J0IiwiZGlzcG9zZSIsInRoZW4iLCJzdXBwb3J0IiwidG9rZW5pemF0aW9uU3VwcG9ydCIsIklubGluZUVkaXRUcmlnZ2VyS2luZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computeDefaultDocumentColors\": function() { return /* binding */ computeDefaultDocumentColors; }\n/* harmony export */ });\n/* harmony import */ var _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/color.js */ \"./node_modules/monaco-editor/esm/vs/base/common/color.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nfunction _parseCaptureGroups(captureGroups) {\n  const values = [];\n  for (const captureGroup of captureGroups) {\n    const parsedNumber = Number(captureGroup);\n    if (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\\s/g, '') !== '') {\n      values.push(parsedNumber);\n    }\n  }\n  return values;\n}\nfunction _toIColor(r, g, b, a) {\n  return {\n    red: r / 255,\n    blue: b / 255,\n    green: g / 255,\n    alpha: a\n  };\n}\nfunction _findRange(model, match) {\n  const index = match.index;\n  const length = match[0].length;\n  if (!index) {\n    return;\n  }\n  const startPosition = model.positionAt(index);\n  const range = {\n    startLineNumber: startPosition.lineNumber,\n    startColumn: startPosition.column,\n    endLineNumber: startPosition.lineNumber,\n    endColumn: startPosition.column + length\n  };\n  return range;\n}\nfunction _findHexColorInformation(range, hexValue) {\n  if (!range) {\n    return;\n  }\n  const parsedHexColor = _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color.Format.CSS.parseHex(hexValue);\n  if (!parsedHexColor) {\n    return;\n  }\n  return {\n    range: range,\n    color: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)\n  };\n}\nfunction _findRGBColorInformation(range, matches, isAlpha) {\n  if (!range || matches.length !== 1) {\n    return;\n  }\n  const match = matches[0];\n  const captureGroups = match.values();\n  const parsedRegex = _parseCaptureGroups(captureGroups);\n  return {\n    range: range,\n    color: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)\n  };\n}\nfunction _findHSLColorInformation(range, matches, isAlpha) {\n  if (!range || matches.length !== 1) {\n    return;\n  }\n  const match = matches[0];\n  const captureGroups = match.values();\n  const parsedRegex = _parseCaptureGroups(captureGroups);\n  const colorEquivalent = new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));\n  return {\n    range: range,\n    color: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)\n  };\n}\nfunction _findMatches(model, regex) {\n  if (typeof model === 'string') {\n    return [...model.matchAll(regex)];\n  } else {\n    return model.findMatches(regex);\n  }\n}\nfunction computeColors(model) {\n  const result = [];\n  // Early validation for RGB and HSL\n  const initialValidationRegex = /\\b(rgb|rgba|hsl|hsla)(\\([0-9\\s,.\\%]*\\))|(#)([A-Fa-f0-9]{3})\\b|(#)([A-Fa-f0-9]{4})\\b|(#)([A-Fa-f0-9]{6})\\b|(#)([A-Fa-f0-9]{8})\\b/gm;\n  const initialValidationMatches = _findMatches(model, initialValidationRegex);\n  // Potential colors have been found, validate the parameters\n  if (initialValidationMatches.length > 0) {\n    for (const initialMatch of initialValidationMatches) {\n      const initialCaptureGroups = initialMatch.filter(captureGroup => captureGroup !== undefined);\n      const colorScheme = initialCaptureGroups[1];\n      const colorParameters = initialCaptureGroups[2];\n      if (!colorParameters) {\n        continue;\n      }\n      let colorInformation;\n      if (colorScheme === 'rgb') {\n        const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*\\)$/gm;\n        colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n      } else if (colorScheme === 'rgba') {\n        const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n        colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n      } else if (colorScheme === 'hsl') {\n        const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*\\)$/gm;\n        colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n      } else if (colorScheme === 'hsla') {\n        const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n        colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n      } else if (colorScheme === '#') {\n        colorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);\n      }\n      if (colorInformation) {\n        result.push(colorInformation);\n      }\n    }\n  }\n  return result;\n}\n/**\n * Returns an array of all default document colors in the provided document\n */\nfunction computeDefaultDocumentColors(model) {\n  if (!model || typeof model.getValue !== 'function' || typeof model.positionAt !== 'function') {\n    // Unknown caller!\n    return [];\n  }\n  return computeColors(model);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LinkComputer\": function() { return /* binding */ LinkComputer; },\n/* harmony export */   \"StateMachine\": function() { return /* binding */ StateMachine; },\n/* harmony export */   \"computeLinks\": function() { return /* binding */ computeLinks; }\n/* harmony export */ });\n/* harmony import */ var _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/characterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nclass Uint8Matrix {\n  constructor(rows, cols, defaultValue) {\n    const data = new Uint8Array(rows * cols);\n    for (let i = 0, len = rows * cols; i < len; i++) {\n      data[i] = defaultValue;\n    }\n    this._data = data;\n    this.rows = rows;\n    this.cols = cols;\n  }\n  get(row, col) {\n    return this._data[row * this.cols + col];\n  }\n  set(row, col, value) {\n    this._data[row * this.cols + col] = value;\n  }\n}\nclass StateMachine {\n  constructor(edges) {\n    let maxCharCode = 0;\n    let maxState = 0 /* State.Invalid */;\n    for (let i = 0, len = edges.length; i < len; i++) {\n      const [from, chCode, to] = edges[i];\n      if (chCode > maxCharCode) {\n        maxCharCode = chCode;\n      }\n      if (from > maxState) {\n        maxState = from;\n      }\n      if (to > maxState) {\n        maxState = to;\n      }\n    }\n    maxCharCode++;\n    maxState++;\n    const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n    for (let i = 0, len = edges.length; i < len; i++) {\n      const [from, chCode, to] = edges[i];\n      states.set(from, chCode, to);\n    }\n    this._states = states;\n    this._maxCharCode = maxCharCode;\n  }\n  nextState(currentState, chCode) {\n    if (chCode < 0 || chCode >= this._maxCharCode) {\n      return 0 /* State.Invalid */;\n    }\n    return this._states.get(currentState, chCode);\n  }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n  if (_stateMachine === null) {\n    _stateMachine = new StateMachine([[1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */], [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */], [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */], [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */], [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */], [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */], [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */], [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */], [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */], [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */], [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */], [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */], [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */], [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */], [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */], [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */], [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */], [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */], [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */], [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */], [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */], [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */]]);\n  }\n  return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n  if (_classifier === null) {\n    _classifier = new _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__.CharacterClassifier(0 /* CharacterClass.None */);\n    // allow-any-unicode-next-line\n    const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n    for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n      _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n    }\n    const CANNOT_END_WITH_CHARACTERS = '.,;:';\n    for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n      _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n    }\n  }\n  return _classifier;\n}\nclass LinkComputer {\n  static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n    // Do not allow to end link in certain characters...\n    let lastIncludedCharIndex = linkEndIndex - 1;\n    do {\n      const chCode = line.charCodeAt(lastIncludedCharIndex);\n      const chClass = classifier.get(chCode);\n      if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n        break;\n      }\n      lastIncludedCharIndex--;\n    } while (lastIncludedCharIndex > linkBeginIndex);\n    // Handle links enclosed in parens, square brackets and curlys.\n    if (linkBeginIndex > 0) {\n      const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n      const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n      if (charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */ || charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */ || charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */) {\n        // Do not end in ) if ( is before the link start\n        // Do not end in ] if [ is before the link start\n        // Do not end in } if { is before the link start\n        lastIncludedCharIndex--;\n      }\n    }\n    return {\n      range: {\n        startLineNumber: lineNumber,\n        startColumn: linkBeginIndex + 1,\n        endLineNumber: lineNumber,\n        endColumn: lastIncludedCharIndex + 2\n      },\n      url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n    };\n  }\n  static computeLinks(model, stateMachine = getStateMachine()) {\n    const classifier = getClassifier();\n    const result = [];\n    for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n      const line = model.getLineContent(i);\n      const len = line.length;\n      let j = 0;\n      let linkBeginIndex = 0;\n      let linkBeginChCode = 0;\n      let state = 1 /* State.Start */;\n      let hasOpenParens = false;\n      let hasOpenSquareBracket = false;\n      let inSquareBrackets = false;\n      let hasOpenCurlyBracket = false;\n      while (j < len) {\n        let resetStateMachine = false;\n        const chCode = line.charCodeAt(j);\n        if (state === 13 /* State.Accept */) {\n          let chClass;\n          switch (chCode) {\n            case 40 /* CharCode.OpenParen */:\n              hasOpenParens = true;\n              chClass = 0 /* CharacterClass.None */;\n              break;\n            case 41 /* CharCode.CloseParen */:\n              chClass = hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n              break;\n            case 91 /* CharCode.OpenSquareBracket */:\n              inSquareBrackets = true;\n              hasOpenSquareBracket = true;\n              chClass = 0 /* CharacterClass.None */;\n              break;\n            case 93 /* CharCode.CloseSquareBracket */:\n              inSquareBrackets = false;\n              chClass = hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n              break;\n            case 123 /* CharCode.OpenCurlyBrace */:\n              hasOpenCurlyBracket = true;\n              chClass = 0 /* CharacterClass.None */;\n              break;\n            case 125 /* CharCode.CloseCurlyBrace */:\n              chClass = hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n              break;\n            // The following three rules make it that ' or \" or ` are allowed inside links\n            // only if the link is wrapped by some other quote character\n            case 39 /* CharCode.SingleQuote */:\n            case 34 /* CharCode.DoubleQuote */:\n            case 96 /* CharCode.BackTick */:\n              if (linkBeginChCode === chCode) {\n                chClass = 1 /* CharacterClass.ForceTermination */;\n              } else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\n                chClass = 0 /* CharacterClass.None */;\n              } else {\n                chClass = 1 /* CharacterClass.ForceTermination */;\n              }\n              break;\n            case 42 /* CharCode.Asterisk */:\n              // `*` terminates a link if the link began with `*`\n              chClass = linkBeginChCode === 42 /* CharCode.Asterisk */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n              break;\n            case 124 /* CharCode.Pipe */:\n              // `|` terminates a link if the link began with `|`\n              chClass = linkBeginChCode === 124 /* CharCode.Pipe */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n              break;\n            case 32 /* CharCode.Space */:\n              // ` ` allow space in between [ and ]\n              chClass = inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n              break;\n            default:\n              chClass = classifier.get(chCode);\n          }\n          // Check if character terminates link\n          if (chClass === 1 /* CharacterClass.ForceTermination */) {\n            result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n            resetStateMachine = true;\n          }\n        } else if (state === 12 /* State.End */) {\n          let chClass;\n          if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n            // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n            hasOpenSquareBracket = true;\n            chClass = 0 /* CharacterClass.None */;\n          } else {\n            chClass = classifier.get(chCode);\n          }\n          // Check if character terminates link\n          if (chClass === 1 /* CharacterClass.ForceTermination */) {\n            resetStateMachine = true;\n          } else {\n            state = 13 /* State.Accept */;\n          }\n        } else {\n          state = stateMachine.nextState(state, chCode);\n          if (state === 0 /* State.Invalid */) {\n            resetStateMachine = true;\n          }\n        }\n        if (resetStateMachine) {\n          state = 1 /* State.Start */;\n          hasOpenParens = false;\n          hasOpenSquareBracket = false;\n          hasOpenCurlyBracket = false;\n          // Record where the link started\n          linkBeginIndex = j + 1;\n          linkBeginChCode = chCode;\n        }\n        j++;\n      }\n      if (state === 13 /* State.Accept */) {\n        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n      }\n    }\n    return result;\n  }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nfunction computeLinks(model) {\n  if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n    // Unknown caller!\n    return [];\n  }\n  return LinkComputer.computeLinks(model);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BasicInplaceReplace\": function() { return /* binding */ BasicInplaceReplace; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass BasicInplaceReplace {\n  constructor() {\n    this._defaultValueSet = [['true', 'false'], ['True', 'False'], ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'], ['public', 'protected', 'private']];\n  }\n  navigateValueSet(range1, text1, range2, text2, up) {\n    if (range1 && text1) {\n      const result = this.doNavigateValueSet(text1, up);\n      if (result) {\n        return {\n          range: range1,\n          value: result\n        };\n      }\n    }\n    if (range2 && text2) {\n      const result = this.doNavigateValueSet(text2, up);\n      if (result) {\n        return {\n          range: range2,\n          value: result\n        };\n      }\n    }\n    return null;\n  }\n  doNavigateValueSet(text, up) {\n    const numberResult = this.numberReplace(text, up);\n    if (numberResult !== null) {\n      return numberResult;\n    }\n    return this.textReplace(text, up);\n  }\n  numberReplace(value, up) {\n    const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n    let n1 = Number(value);\n    const n2 = parseFloat(value);\n    if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n      if (n1 === 0 && !up) {\n        return null; // don't do negative\n        //\t\t\t} else if(n1 === 9 && up) {\n        //\t\t\t\treturn null; // don't insert 10 into a number\n      } else {\n        n1 = Math.floor(n1 * precision);\n        n1 += up ? precision : -precision;\n        return String(n1 / precision);\n      }\n    }\n    return null;\n  }\n  textReplace(value, up) {\n    return this.valueSetsReplace(this._defaultValueSet, value, up);\n  }\n  valueSetsReplace(valueSets, value, up) {\n    let result = null;\n    for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n      result = this.valueSetReplace(valueSets[i], value, up);\n    }\n    return result;\n  }\n  valueSetReplace(valueSet, value, up) {\n    let idx = valueSet.indexOf(value);\n    if (idx >= 0) {\n      idx += up ? +1 : -1;\n      if (idx < 0) {\n        idx = valueSet.length - 1;\n      } else {\n        idx %= valueSet.length;\n      }\n      return valueSet[idx];\n    }\n    return null;\n  }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ApplyEditsResult\": function() { return /* binding */ ApplyEditsResult; },\n/* harmony export */   \"FindMatch\": function() { return /* binding */ FindMatch; },\n/* harmony export */   \"GlyphMarginLane\": function() { return /* binding */ GlyphMarginLane; },\n/* harmony export */   \"InjectedTextCursorStops\": function() { return /* binding */ InjectedTextCursorStops; },\n/* harmony export */   \"OverviewRulerLane\": function() { return /* binding */ OverviewRulerLane; },\n/* harmony export */   \"SearchData\": function() { return /* binding */ SearchData; },\n/* harmony export */   \"TextModelResolvedOptions\": function() { return /* binding */ TextModelResolvedOptions; },\n/* harmony export */   \"ValidAnnotatedEditOperation\": function() { return /* binding */ ValidAnnotatedEditOperation; },\n/* harmony export */   \"isITextSnapshot\": function() { return /* binding */ isITextSnapshot; },\n/* harmony export */   \"shouldSynchronizeModel\": function() { return /* binding */ shouldSynchronizeModel; }\n/* harmony export */ });\n/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nvar OverviewRulerLane;\n(function (OverviewRulerLane) {\n  OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n  OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n  OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n  OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nvar GlyphMarginLane;\n(function (GlyphMarginLane) {\n  GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\n  GlyphMarginLane[GlyphMarginLane[\"Center\"] = 2] = \"Center\";\n  GlyphMarginLane[GlyphMarginLane[\"Right\"] = 3] = \"Right\";\n})(GlyphMarginLane || (GlyphMarginLane = {}));\nvar InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n  InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n  InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n  InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n  InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nclass TextModelResolvedOptions {\n  get originalIndentSize() {\n    return this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;\n  }\n  /**\n   * @internal\n   */\n  constructor(src) {\n    this._textModelResolvedOptionsBrand = undefined;\n    this.tabSize = Math.max(1, src.tabSize | 0);\n    if (src.indentSize === 'tabSize') {\n      this.indentSize = this.tabSize;\n      this._indentSizeIsTabSize = true;\n    } else {\n      this.indentSize = Math.max(1, src.indentSize | 0);\n      this._indentSizeIsTabSize = false;\n    }\n    this.insertSpaces = Boolean(src.insertSpaces);\n    this.defaultEOL = src.defaultEOL | 0;\n    this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n    this.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n  }\n  /**\n   * @internal\n   */\n  equals(other) {\n    return this.tabSize === other.tabSize && this._indentSizeIsTabSize === other._indentSizeIsTabSize && this.indentSize === other.indentSize && this.insertSpaces === other.insertSpaces && this.defaultEOL === other.defaultEOL && this.trimAutoWhitespace === other.trimAutoWhitespace && (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions);\n  }\n  /**\n   * @internal\n   */\n  createChangeEvent(newOpts) {\n    return {\n      tabSize: this.tabSize !== newOpts.tabSize,\n      indentSize: this.indentSize !== newOpts.indentSize,\n      insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n      trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace\n    };\n  }\n}\nclass FindMatch {\n  /**\n   * @internal\n   */\n  constructor(range, matches) {\n    this._findMatchBrand = undefined;\n    this.range = range;\n    this.matches = matches;\n  }\n}\n/**\n * @internal\n */\nfunction isITextSnapshot(obj) {\n  return obj && typeof obj.read === 'function';\n}\n/**\n * @internal\n */\nclass ValidAnnotatedEditOperation {\n  constructor(identifier, range, text, forceMoveMarkers, isAutoWhitespaceEdit, _isTracked) {\n    this.identifier = identifier;\n    this.range = range;\n    this.text = text;\n    this.forceMoveMarkers = forceMoveMarkers;\n    this.isAutoWhitespaceEdit = isAutoWhitespaceEdit;\n    this._isTracked = _isTracked;\n  }\n}\n/**\n * @internal\n */\nclass SearchData {\n  constructor(regex, wordSeparators, simpleSearch) {\n    this.regex = regex;\n    this.wordSeparators = wordSeparators;\n    this.simpleSearch = simpleSearch;\n  }\n}\n/**\n * @internal\n */\nclass ApplyEditsResult {\n  constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\n    this.reverseEdits = reverseEdits;\n    this.changes = changes;\n    this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\n  }\n}\n/**\n * @internal\n */\nfunction shouldSynchronizeModel(model) {\n  return !model.isTooLargeForSyncing() && !model.isForSimpleWidget;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MirrorTextModel\": function() { return /* binding */ MirrorTextModel; }\n/* harmony export */ });\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prefixSumComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nclass MirrorTextModel {\n  constructor(uri, lines, eol, versionId) {\n    this._uri = uri;\n    this._lines = lines;\n    this._eol = eol;\n    this._versionId = versionId;\n    this._lineStarts = null;\n    this._cachedTextValue = null;\n  }\n  dispose() {\n    this._lines.length = 0;\n  }\n  get version() {\n    return this._versionId;\n  }\n  getText() {\n    if (this._cachedTextValue === null) {\n      this._cachedTextValue = this._lines.join(this._eol);\n    }\n    return this._cachedTextValue;\n  }\n  onEvents(e) {\n    if (e.eol && e.eol !== this._eol) {\n      this._eol = e.eol;\n      this._lineStarts = null;\n    }\n    // Update my lines\n    const changes = e.changes;\n    for (const change of changes) {\n      this._acceptDeleteRange(change.range);\n      this._acceptInsertText(new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(change.range.startLineNumber, change.range.startColumn), change.text);\n    }\n    this._versionId = e.versionId;\n    this._cachedTextValue = null;\n  }\n  _ensureLineStarts() {\n    if (!this._lineStarts) {\n      const eolLength = this._eol.length;\n      const linesLength = this._lines.length;\n      const lineStartValues = new Uint32Array(linesLength);\n      for (let i = 0; i < linesLength; i++) {\n        lineStartValues[i] = this._lines[i].length + eolLength;\n      }\n      this._lineStarts = new _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__.PrefixSumComputer(lineStartValues);\n    }\n  }\n  /**\n   * All changes to a line's text go through this method\n   */\n  _setLineText(lineIndex, newValue) {\n    this._lines[lineIndex] = newValue;\n    if (this._lineStarts) {\n      // update prefix sum\n      this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n    }\n  }\n  _acceptDeleteRange(range) {\n    if (range.startLineNumber === range.endLineNumber) {\n      if (range.startColumn === range.endColumn) {\n        // Nothing to delete\n        return;\n      }\n      // Delete text on the affected line\n      this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1) + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n      return;\n    }\n    // Take remaining text on last line and append it to remaining text on first line\n    this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1) + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n    // Delete middle lines\n    this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n    if (this._lineStarts) {\n      // update prefix sum\n      this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n    }\n  }\n  _acceptInsertText(position, insertText) {\n    if (insertText.length === 0) {\n      // Nothing to insert\n      return;\n    }\n    const insertLines = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.splitLines)(insertText);\n    if (insertLines.length === 1) {\n      // Inserting text on one line\n      this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1) + insertLines[0] + this._lines[position.lineNumber - 1].substring(position.column - 1));\n      return;\n    }\n    // Append overflowing text from first line to the end of text to insert\n    insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n    // Delete overflowing text from first line and insert text on first line\n    this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1) + insertLines[0]);\n    // Insert new lines & store lengths\n    const newLengths = new Uint32Array(insertLines.length - 1);\n    for (let i = 1; i < insertLines.length; i++) {\n      this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n      newLengths[i - 1] = insertLines[i].length + this._eol.length;\n    }\n    if (this._lineStarts) {\n      // update prefix sum\n      this._lineStarts.insertValues(position.lineNumber, newLengths);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ConstantTimePrefixSumComputer\": function() { return /* binding */ ConstantTimePrefixSumComputer; },\n/* harmony export */   \"PrefixSumComputer\": function() { return /* binding */ PrefixSumComputer; },\n/* harmony export */   \"PrefixSumIndexOfResult\": function() { return /* binding */ PrefixSumIndexOfResult; }\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uint.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uint.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass PrefixSumComputer {\n  constructor(values) {\n    this.values = values;\n    this.prefixSum = new Uint32Array(values.length);\n    this.prefixSumValidIndex = new Int32Array(1);\n    this.prefixSumValidIndex[0] = -1;\n  }\n  insertValues(insertIndex, insertValues) {\n    insertIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(insertIndex);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n    const insertValuesLen = insertValues.length;\n    if (insertValuesLen === 0) {\n      return false;\n    }\n    this.values = new Uint32Array(oldValues.length + insertValuesLen);\n    this.values.set(oldValues.subarray(0, insertIndex), 0);\n    this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n    this.values.set(insertValues, insertIndex);\n    if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = insertIndex - 1;\n    }\n    this.prefixSum = new Uint32Array(this.values.length);\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n    return true;\n  }\n  setValue(index, value) {\n    index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);\n    value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(value);\n    if (this.values[index] === value) {\n      return false;\n    }\n    this.values[index] = value;\n    if (index - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = index - 1;\n    }\n    return true;\n  }\n  removeValues(startIndex, count) {\n    startIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(startIndex);\n    count = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(count);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n    if (startIndex >= oldValues.length) {\n      return false;\n    }\n    const maxCount = oldValues.length - startIndex;\n    if (count >= maxCount) {\n      count = maxCount;\n    }\n    if (count === 0) {\n      return false;\n    }\n    this.values = new Uint32Array(oldValues.length - count);\n    this.values.set(oldValues.subarray(0, startIndex), 0);\n    this.values.set(oldValues.subarray(startIndex + count), startIndex);\n    this.prefixSum = new Uint32Array(this.values.length);\n    if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = startIndex - 1;\n    }\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n    return true;\n  }\n  getTotalSum() {\n    if (this.values.length === 0) {\n      return 0;\n    }\n    return this._getPrefixSum(this.values.length - 1);\n  }\n  /**\n   * Returns the sum of the first `index + 1` many items.\n   * @returns `SUM(0 <= j <= index, values[j])`.\n   */\n  getPrefixSum(index) {\n    if (index < 0) {\n      return 0;\n    }\n    index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);\n    return this._getPrefixSum(index);\n  }\n  _getPrefixSum(index) {\n    if (index <= this.prefixSumValidIndex[0]) {\n      return this.prefixSum[index];\n    }\n    let startIndex = this.prefixSumValidIndex[0] + 1;\n    if (startIndex === 0) {\n      this.prefixSum[0] = this.values[0];\n      startIndex++;\n    }\n    if (index >= this.values.length) {\n      index = this.values.length - 1;\n    }\n    for (let i = startIndex; i <= index; i++) {\n      this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n    }\n    this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n    return this.prefixSum[index];\n  }\n  getIndexOf(sum) {\n    sum = Math.floor(sum);\n    // Compute all sums (to get a fully valid prefixSum)\n    this.getTotalSum();\n    let low = 0;\n    let high = this.values.length - 1;\n    let mid = 0;\n    let midStop = 0;\n    let midStart = 0;\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      midStop = this.prefixSum[mid];\n      midStart = midStop - this.values[mid];\n      if (sum < midStart) {\n        high = mid - 1;\n      } else if (sum >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n    return new PrefixSumIndexOfResult(mid, sum - midStart);\n  }\n}\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\nclass ConstantTimePrefixSumComputer {\n  constructor(values) {\n    this._values = values;\n    this._isValid = false;\n    this._validEndIndex = -1;\n    this._prefixSum = [];\n    this._indexBySum = [];\n  }\n  /**\n   * @returns SUM(0 <= j < values.length, values[j])\n   */\n  getTotalSum() {\n    this._ensureValid();\n    return this._indexBySum.length;\n  }\n  /**\n   * Returns the sum of the first `count` many items.\n   * @returns `SUM(0 <= j < count, values[j])`.\n   */\n  getPrefixSum(count) {\n    this._ensureValid();\n    if (count === 0) {\n      return 0;\n    }\n    return this._prefixSum[count - 1];\n  }\n  /**\n   * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n   */\n  getIndexOf(sum) {\n    this._ensureValid();\n    const idx = this._indexBySum[sum];\n    const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n    return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n  }\n  removeValues(start, deleteCount) {\n    this._values.splice(start, deleteCount);\n    this._invalidate(start);\n  }\n  insertValues(insertIndex, insertArr) {\n    this._values = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.arrayInsert)(this._values, insertIndex, insertArr);\n    this._invalidate(insertIndex);\n  }\n  _invalidate(index) {\n    this._isValid = false;\n    this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n  }\n  _ensureValid() {\n    if (this._isValid) {\n      return;\n    }\n    for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n      const value = this._values[i];\n      const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n      this._prefixSum[i] = sumAbove + value;\n      for (let j = 0; j < value; j++) {\n        this._indexBySum[sumAbove + j] = i;\n      }\n    }\n    // trim things\n    this._prefixSum.length = this._values.length;\n    this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\n    // mark as valid\n    this._isValid = true;\n    this._validEndIndex = this._values.length - 1;\n  }\n  setValue(index, value) {\n    if (this._values[index] === value) {\n      // no change\n      return;\n    }\n    this._values[index] = value;\n    this._invalidate(index);\n  }\n}\nclass PrefixSumIndexOfResult {\n  constructor(index, remainder) {\n    this.index = index;\n    this.remainder = remainder;\n    this._prefixSumIndexOfResultBrand = undefined;\n    this.index = index;\n    this.remainder = remainder;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SearchParams\": function() { return /* binding */ SearchParams; },\n/* harmony export */   \"Searcher\": function() { return /* binding */ Searcher; },\n/* harmony export */   \"TextModelSearch\": function() { return /* binding */ TextModelSearch; },\n/* harmony export */   \"createFindMatch\": function() { return /* binding */ createFindMatch; },\n/* harmony export */   \"isMultilineRegexSource\": function() { return /* binding */ isMultilineRegexSource; },\n/* harmony export */   \"isValidMatch\": function() { return /* binding */ isValidMatch; }\n/* harmony export */ });\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/wordCharacterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\nconst LIMIT_FIND_COUNT = 999;\nclass SearchParams {\n  constructor(searchString, isRegex, matchCase, wordSeparators) {\n    this.searchString = searchString;\n    this.isRegex = isRegex;\n    this.matchCase = matchCase;\n    this.wordSeparators = wordSeparators;\n  }\n  parseSearchRequest() {\n    if (this.searchString === '') {\n      return null;\n    }\n    // Try to create a RegExp out of the params\n    let multiline;\n    if (this.isRegex) {\n      multiline = isMultilineRegexSource(this.searchString);\n    } else {\n      multiline = this.searchString.indexOf('\\n') >= 0;\n    }\n    let regex = null;\n    try {\n      regex = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.createRegExp(this.searchString, this.isRegex, {\n        matchCase: this.matchCase,\n        wholeWord: false,\n        multiline: multiline,\n        global: true,\n        unicode: true\n      });\n    } catch (err) {\n      return null;\n    }\n    if (!regex) {\n      return null;\n    }\n    let canUseSimpleSearch = !this.isRegex && !multiline;\n    if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\n      // casing might make a difference\n      canUseSimpleSearch = this.matchCase;\n    }\n    return new _model_js__WEBPACK_IMPORTED_MODULE_4__.SearchData(regex, this.wordSeparators ? (0,_core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__.getMapForWordSeparators)(this.wordSeparators, []) : null, canUseSimpleSearch ? this.searchString : null);\n  }\n}\nfunction isMultilineRegexSource(searchString) {\n  if (!searchString || searchString.length === 0) {\n    return false;\n  }\n  for (let i = 0, len = searchString.length; i < len; i++) {\n    const chCode = searchString.charCodeAt(i);\n    if (chCode === 10 /* CharCode.LineFeed */) {\n      return true;\n    }\n    if (chCode === 92 /* CharCode.Backslash */) {\n      // move to next char\n      i++;\n      if (i >= len) {\n        // string ends with a \\\n        break;\n      }\n      const nextChCode = searchString.charCodeAt(i);\n      if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction createFindMatch(range, rawMatches, captureMatches) {\n  if (!captureMatches) {\n    return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, null);\n  }\n  const matches = [];\n  for (let i = 0, len = rawMatches.length; i < len; i++) {\n    matches[i] = rawMatches[i];\n  }\n  return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, matches);\n}\nclass LineFeedCounter {\n  constructor(text) {\n    const lineFeedsOffsets = [];\n    let lineFeedsOffsetsLen = 0;\n    for (let i = 0, textLen = text.length; i < textLen; i++) {\n      if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {\n        lineFeedsOffsets[lineFeedsOffsetsLen++] = i;\n      }\n    }\n    this._lineFeedsOffsets = lineFeedsOffsets;\n  }\n  findLineFeedCountBeforeOffset(offset) {\n    const lineFeedsOffsets = this._lineFeedsOffsets;\n    let min = 0;\n    let max = lineFeedsOffsets.length - 1;\n    if (max === -1) {\n      // no line feeds\n      return 0;\n    }\n    if (offset <= lineFeedsOffsets[0]) {\n      // before first line feed\n      return 0;\n    }\n    while (min < max) {\n      const mid = min + ((max - min) / 2 >> 0);\n      if (lineFeedsOffsets[mid] >= offset) {\n        max = mid - 1;\n      } else {\n        if (lineFeedsOffsets[mid + 1] >= offset) {\n          // bingo!\n          min = mid;\n          max = mid;\n        } else {\n          min = mid + 1;\n        }\n      }\n    }\n    return min + 1;\n  }\n}\nclass TextModelSearch {\n  static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {\n    const searchData = searchParams.parseSearchRequest();\n    if (!searchData) {\n      return [];\n    }\n    if (searchData.regex.multiline) {\n      return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\n    }\n    return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\n  }\n  /**\n   * Multiline search always executes on the lines concatenated with \\n.\n   * We must therefore compensate for the count of \\n in case the model is CRLF\n   */\n  static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {\n    let startOffset;\n    let lineFeedCountBeforeMatch = 0;\n    if (lfCounter) {\n      lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\n      startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\n    } else {\n      startOffset = deltaOffset + matchIndex;\n    }\n    let endOffset;\n    if (lfCounter) {\n      const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\n      const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\n      endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\n    } else {\n      endOffset = startOffset + match0.length;\n    }\n    const startPosition = model.getPositionAt(startOffset);\n    const endPosition = model.getPositionAt(endOffset);\n    return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n  }\n  static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {\n    const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\n    // We always execute multiline search over the lines joined with \\n\n    // This makes it that \\n will match the EOL for both CRLF and LF models\n    // We compensate for offset errors in `_getMultilineMatchRange`\n    const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);\n    const lfCounter = model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null;\n    const result = [];\n    let counter = 0;\n    let m;\n    searcher.reset(0);\n    while (m = searcher.next(text)) {\n      result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n      if (counter >= limitResultCount) {\n        return result;\n      }\n    }\n    return result;\n  }\n  static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {\n    const result = [];\n    let resultLen = 0;\n    // Early case for a search range that starts & stops on the same line number\n    if (searchRange.startLineNumber === searchRange.endLineNumber) {\n      const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n      resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n      return result;\n    }\n    // Collect results from first line\n    const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\n    resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n    // Collect results from middle lines\n    for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\n      resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n    }\n    // Collect results from last line\n    if (resultLen < limitResultCount) {\n      const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\n      resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n    }\n    return result;\n  }\n  static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n    const wordSeparators = searchData.wordSeparators;\n    if (!captureMatches && searchData.simpleSearch) {\n      const searchString = searchData.simpleSearch;\n      const searchStringLen = searchString.length;\n      const textLength = text.length;\n      let lastMatchIndex = -searchStringLen;\n      while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n        if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n          result[resultLen++] = new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n          if (resultLen >= limitResultCount) {\n            return resultLen;\n          }\n        }\n      }\n      return resultLen;\n    }\n    const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n    let m;\n    // Reset regex to search from the beginning\n    searcher.reset(0);\n    do {\n      m = searcher.next(text);\n      if (m) {\n        result[resultLen++] = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n        if (resultLen >= limitResultCount) {\n          return resultLen;\n        }\n      }\n    } while (m);\n    return resultLen;\n  }\n  static findNextMatch(model, searchParams, searchStart, captureMatches) {\n    const searchData = searchParams.parseSearchRequest();\n    if (!searchData) {\n      return null;\n    }\n    const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n    if (searchData.regex.multiline) {\n      return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\n    }\n    return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\n  }\n  static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {\n    const searchTextStart = new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(searchStart.lineNumber, 1);\n    const deltaOffset = model.getOffsetAt(searchTextStart);\n    const lineCount = model.getLineCount();\n    // We always execute multiline search over the lines joined with \\n\n    // This makes it that \\n will match the EOL for both CRLF and LF models\n    // We compensate for offset errors in `_getMultilineMatchRange`\n    const text = model.getValueInRange(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);\n    const lfCounter = model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null;\n    searcher.reset(searchStart.column - 1);\n    const m = searcher.next(text);\n    if (m) {\n      return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n    }\n    if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\n      // Try again from the top\n      return this._doFindNextMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1), searcher, captureMatches);\n    }\n    return null;\n  }\n  static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {\n    const lineCount = model.getLineCount();\n    const startLineNumber = searchStart.lineNumber;\n    // Look in first line\n    const text = model.getLineContent(startLineNumber);\n    const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\n    if (r) {\n      return r;\n    }\n    for (let i = 1; i <= lineCount; i++) {\n      const lineIndex = (startLineNumber + i - 1) % lineCount;\n      const text = model.getLineContent(lineIndex + 1);\n      const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\n      if (r) {\n        return r;\n      }\n    }\n    return null;\n  }\n  static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {\n    // Set regex to search from column\n    searcher.reset(fromColumn - 1);\n    const m = searcher.next(text);\n    if (m) {\n      return createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n    }\n    return null;\n  }\n  static findPreviousMatch(model, searchParams, searchStart, captureMatches) {\n    const searchData = searchParams.parseSearchRequest();\n    if (!searchData) {\n      return null;\n    }\n    const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n    if (searchData.regex.multiline) {\n      return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\n    }\n    return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\n  }\n  static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {\n    const matches = this._doFindMatchesMultiline(model, new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\n    if (matches.length > 0) {\n      return matches[matches.length - 1];\n    }\n    const lineCount = model.getLineCount();\n    if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\n      // Try again with all content\n      return this._doFindPreviousMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\n    }\n    return null;\n  }\n  static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {\n    const lineCount = model.getLineCount();\n    const startLineNumber = searchStart.lineNumber;\n    // Look in first line\n    const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\n    const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\n    if (r) {\n      return r;\n    }\n    for (let i = 1; i <= lineCount; i++) {\n      const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n      const text = model.getLineContent(lineIndex + 1);\n      const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\n      if (r) {\n        return r;\n      }\n    }\n    return null;\n  }\n  static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {\n    let bestResult = null;\n    let m;\n    searcher.reset(0);\n    while (m = searcher.next(text)) {\n      bestResult = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n    }\n    return bestResult;\n  }\n}\nfunction leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n  if (matchStartIndex === 0) {\n    // Match starts at start of string\n    return true;\n  }\n  const charBefore = text.charCodeAt(matchStartIndex - 1);\n  if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {\n    // The character before the match is a word separator\n    return true;\n  }\n  if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {\n    // The character before the match is line break or carriage return.\n    return true;\n  }\n  if (matchLength > 0) {\n    const firstCharInMatch = text.charCodeAt(matchStartIndex);\n    if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n      // The first character inside the match is a word separator\n      return true;\n    }\n  }\n  return false;\n}\nfunction rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n  if (matchStartIndex + matchLength === textLength) {\n    // Match ends at end of string\n    return true;\n  }\n  const charAfter = text.charCodeAt(matchStartIndex + matchLength);\n  if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {\n    // The character after the match is a word separator\n    return true;\n  }\n  if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {\n    // The character after the match is line break or carriage return.\n    return true;\n  }\n  if (matchLength > 0) {\n    const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\n    if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n      // The last character in the match is a word separator\n      return true;\n    }\n  }\n  return false;\n}\nfunction isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n  return leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength);\n}\nclass Searcher {\n  constructor(wordSeparators, searchRegex) {\n    this._wordSeparators = wordSeparators;\n    this._searchRegex = searchRegex;\n    this._prevMatchStartIndex = -1;\n    this._prevMatchLength = 0;\n  }\n  reset(lastIndex) {\n    this._searchRegex.lastIndex = lastIndex;\n    this._prevMatchStartIndex = -1;\n    this._prevMatchLength = 0;\n  }\n  next(text) {\n    const textLength = text.length;\n    let m;\n    do {\n      if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\n        // Reached the end of the line\n        return null;\n      }\n      m = this._searchRegex.exec(text);\n      if (!m) {\n        return null;\n      }\n      const matchStartIndex = m.index;\n      const matchLength = m[0].length;\n      if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\n        if (matchLength === 0) {\n          // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\n          // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\n          if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\n            this._searchRegex.lastIndex += 2;\n          } else {\n            this._searchRegex.lastIndex += 1;\n          }\n          continue;\n        }\n        // Exit early if the regex matches the same range twice\n        return null;\n      }\n      this._prevMatchStartIndex = matchStartIndex;\n      this._prevMatchLength = matchLength;\n      if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\n        return m;\n      }\n    } while (m);\n    return null;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KeyMod\": function() { return /* binding */ KeyMod; },\n/* harmony export */   \"createMonacoBaseAPI\": function() { return /* binding */ createMonacoBaseAPI; }\n/* harmony export */ });\n/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ \"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js\");\n/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/keyCodes.js */ \"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _core_selection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/selection.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js\");\n/* harmony import */ var _languages_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages.js\");\n/* harmony import */ var _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../standalone/standaloneEnums.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\nclass KeyMod {\n  static chord(firstPart, secondPart) {\n    return (0,_base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__.KeyChord)(firstPart, secondPart);\n  }\n}\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\nfunction createMonacoBaseAPI() {\n  return {\n    editor: undefined,\n    // undefined override expected here\n    languages: undefined,\n    // undefined override expected here\n    CancellationTokenSource: _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource,\n    Emitter: _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter,\n    KeyCode: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.KeyCode,\n    KeyMod: KeyMod,\n    Position: _core_position_js__WEBPACK_IMPORTED_MODULE_4__.Position,\n    Range: _core_range_js__WEBPACK_IMPORTED_MODULE_5__.Range,\n    Selection: _core_selection_js__WEBPACK_IMPORTED_MODULE_6__.Selection,\n    SelectionDirection: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.SelectionDirection,\n    MarkerSeverity: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerSeverity,\n    MarkerTag: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerTag,\n    Uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI,\n    Token: _languages_js__WEBPACK_IMPORTED_MODULE_7__.Token\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JCYXNlQXBpLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDK0U7QUFDdkI7QUFDSTtBQUNWO0FBQ0g7QUFDTjtBQUNRO0FBQ1Q7QUFDNEI7QUFDN0QsTUFBTVMsTUFBTSxDQUFDO0VBQ2hCLE9BQU9DLEtBQUtBLENBQUNDLFNBQVMsRUFBRUMsVUFBVSxFQUFFO0lBQ2hDLE9BQU9WLGtFQUFRLENBQUNTLFNBQVMsRUFBRUMsVUFBVSxDQUFDO0VBQzFDO0FBQ0o7QUFDQUgsTUFBTSxDQUFDSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3RCSixNQUFNLENBQUNLLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDcEJMLE1BQU0sQ0FBQ00sR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNqQk4sTUFBTSxDQUFDTyxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBQ2QsU0FBU0MsbUJBQW1CQSxDQUFBLEVBQUc7RUFDbEMsT0FBTztJQUNIQyxNQUFNLEVBQUVDLFNBQVM7SUFBRTtJQUNuQkMsU0FBUyxFQUFFRCxTQUFTO0lBQUU7SUFDdEJuQix1QkFBdUIsRUFBRUEsaUZBQXVCO0lBQ2hEQyxPQUFPLEVBQUVBLDBEQUFPO0lBQ2hCb0IsT0FBTyxFQUFFYixtRUFBdUI7SUFDaENDLE1BQU0sRUFBRUEsTUFBTTtJQUNkTCxRQUFRLEVBQUVBLHVEQUFRO0lBQ2xCQyxLQUFLLEVBQUVBLGlEQUFLO0lBQ1pDLFNBQVMsRUFBRUEseURBQVM7SUFDcEJnQixrQkFBa0IsRUFBRWQsOEVBQWtDO0lBQ3REZSxjQUFjLEVBQUVmLDBFQUE4QjtJQUM5Q2dCLFNBQVMsRUFBRWhCLHFFQUF5QjtJQUNwQ2lCLEdBQUcsRUFBRXRCLG9EQUFHO0lBQ1JJLEtBQUssRUFBRUEsZ0RBQUtBO0VBQ2hCLENBQUM7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JCYXNlQXBpLmpzPzlkMmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2NhbmNlbGxhdGlvbi5qcyc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vZXZlbnQuanMnO1xuaW1wb3J0IHsgS2V5Q2hvcmQgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9rZXlDb2Rlcy5qcyc7XG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi91cmkuanMnO1xuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi9jb3JlL3Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi4vY29yZS9yYW5nZS5qcyc7XG5pbXBvcnQgeyBTZWxlY3Rpb24gfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gJy4uL2xhbmd1YWdlcy5qcyc7XG5pbXBvcnQgKiBhcyBzdGFuZGFsb25lRW51bXMgZnJvbSAnLi4vc3RhbmRhbG9uZS9zdGFuZGFsb25lRW51bXMuanMnO1xuZXhwb3J0IGNsYXNzIEtleU1vZCB7XG4gICAgc3RhdGljIGNob3JkKGZpcnN0UGFydCwgc2Vjb25kUGFydCkge1xuICAgICAgICByZXR1cm4gS2V5Q2hvcmQoZmlyc3RQYXJ0LCBzZWNvbmRQYXJ0KTtcbiAgICB9XG59XG5LZXlNb2QuQ3RybENtZCA9IDIwNDggLyogQ29uc3RLZXlNb2QuQ3RybENtZCAqLztcbktleU1vZC5TaGlmdCA9IDEwMjQgLyogQ29uc3RLZXlNb2QuU2hpZnQgKi87XG5LZXlNb2QuQWx0ID0gNTEyIC8qIENvbnN0S2V5TW9kLkFsdCAqLztcbktleU1vZC5XaW5DdHJsID0gMjU2IC8qIENvbnN0S2V5TW9kLldpbkN0cmwgKi87XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9uYWNvQmFzZUFQSSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlZGl0b3I6IHVuZGVmaW5lZCwgLy8gdW5kZWZpbmVkIG92ZXJyaWRlIGV4cGVjdGVkIGhlcmVcbiAgICAgICAgbGFuZ3VhZ2VzOiB1bmRlZmluZWQsIC8vIHVuZGVmaW5lZCBvdmVycmlkZSBleHBlY3RlZCBoZXJlXG4gICAgICAgIENhbmNlbGxhdGlvblRva2VuU291cmNlOiBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSxcbiAgICAgICAgRW1pdHRlcjogRW1pdHRlcixcbiAgICAgICAgS2V5Q29kZTogc3RhbmRhbG9uZUVudW1zLktleUNvZGUsXG4gICAgICAgIEtleU1vZDogS2V5TW9kLFxuICAgICAgICBQb3NpdGlvbjogUG9zaXRpb24sXG4gICAgICAgIFJhbmdlOiBSYW5nZSxcbiAgICAgICAgU2VsZWN0aW9uOiBTZWxlY3Rpb24sXG4gICAgICAgIFNlbGVjdGlvbkRpcmVjdGlvbjogc3RhbmRhbG9uZUVudW1zLlNlbGVjdGlvbkRpcmVjdGlvbixcbiAgICAgICAgTWFya2VyU2V2ZXJpdHk6IHN0YW5kYWxvbmVFbnVtcy5NYXJrZXJTZXZlcml0eSxcbiAgICAgICAgTWFya2VyVGFnOiBzdGFuZGFsb25lRW51bXMuTWFya2VyVGFnLFxuICAgICAgICBVcmk6IFVSSSxcbiAgICAgICAgVG9rZW46IFRva2VuXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSIsIkVtaXR0ZXIiLCJLZXlDaG9yZCIsIlVSSSIsIlBvc2l0aW9uIiwiUmFuZ2UiLCJTZWxlY3Rpb24iLCJUb2tlbiIsInN0YW5kYWxvbmVFbnVtcyIsIktleU1vZCIsImNob3JkIiwiZmlyc3RQYXJ0Iiwic2Vjb25kUGFydCIsIkN0cmxDbWQiLCJTaGlmdCIsIkFsdCIsIldpbkN0cmwiLCJjcmVhdGVNb25hY29CYXNlQVBJIiwiZWRpdG9yIiwidW5kZWZpbmVkIiwibGFuZ3VhZ2VzIiwiS2V5Q29kZSIsIlNlbGVjdGlvbkRpcmVjdGlvbiIsIk1hcmtlclNldmVyaXR5IiwiTWFya2VyVGFnIiwiVXJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EditorSimpleWorker\": function() { return /* binding */ EditorSimpleWorker; },\n/* harmony export */   \"create\": function() { return /* binding */ create; }\n/* harmony export */ });\n/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/mirrorTextModel.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js\");\n/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/wordHelper.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\");\n/* harmony import */ var _languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../languages/linkComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js\");\n/* harmony import */ var _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages/supports/inplaceReplaceSupport.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js\");\n/* harmony import */ var _editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./editorBaseApi.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js\");\n/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ \"./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\");\n/* harmony import */ var _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./unicodeTextModelHighlighter.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js\");\n/* harmony import */ var _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../diff/linesDiffComputers.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js\");\n/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/* harmony import */ var _languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../languages/defaultDocumentColorsComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js\");\n/* harmony import */ var _findSectionHeaders_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./findSectionHeaders.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @internal\n */\nclass MirrorModel extends _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__.MirrorTextModel {\n  get uri() {\n    return this._uri;\n  }\n  get eol() {\n    return this._eol;\n  }\n  getValue() {\n    return this.getText();\n  }\n  findMatches(regex) {\n    const matches = [];\n    for (let i = 0; i < this._lines.length; i++) {\n      const line = this._lines[i];\n      const offsetToAdd = this.offsetAt(new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(i + 1, 1));\n      const iteratorOverMatches = line.matchAll(regex);\n      for (const match of iteratorOverMatches) {\n        if (match.index || match.index === 0) {\n          match.index = match.index + offsetToAdd;\n        }\n        matches.push(match);\n      }\n    }\n    return matches;\n  }\n  getLinesContent() {\n    return this._lines.slice(0);\n  }\n  getLineCount() {\n    return this._lines.length;\n  }\n  getLineContent(lineNumber) {\n    return this._lines[lineNumber - 1];\n  }\n  getWordAtPosition(position, wordDefinition) {\n    const wordAtText = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.getWordAtText)(position.column, (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.ensureValidWordDefinition)(wordDefinition), this._lines[position.lineNumber - 1], 0);\n    if (wordAtText) {\n      return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n    }\n    return null;\n  }\n  words(wordDefinition) {\n    const lines = this._lines;\n    const wordenize = this._wordenize.bind(this);\n    let lineNumber = 0;\n    let lineText = '';\n    let wordRangesIdx = 0;\n    let wordRanges = [];\n    return {\n      *[Symbol.iterator]() {\n        while (true) {\n          if (wordRangesIdx < wordRanges.length) {\n            const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n            wordRangesIdx += 1;\n            yield value;\n          } else {\n            if (lineNumber < lines.length) {\n              lineText = lines[lineNumber];\n              wordRanges = wordenize(lineText, wordDefinition);\n              wordRangesIdx = 0;\n              lineNumber += 1;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    };\n  }\n  getLineWords(lineNumber, wordDefinition) {\n    const content = this._lines[lineNumber - 1];\n    const ranges = this._wordenize(content, wordDefinition);\n    const words = [];\n    for (const range of ranges) {\n      words.push({\n        word: content.substring(range.start, range.end),\n        startColumn: range.start + 1,\n        endColumn: range.end + 1\n      });\n    }\n    return words;\n  }\n  _wordenize(content, wordDefinition) {\n    const result = [];\n    let match;\n    wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n    while (match = wordDefinition.exec(content)) {\n      if (match[0].length === 0) {\n        // it did match the empty string\n        break;\n      }\n      result.push({\n        start: match.index,\n        end: match.index + match[0].length\n      });\n    }\n    return result;\n  }\n  getValueInRange(range) {\n    range = this._validateRange(range);\n    if (range.startLineNumber === range.endLineNumber) {\n      return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n    }\n    const lineEnding = this._eol;\n    const startLineIndex = range.startLineNumber - 1;\n    const endLineIndex = range.endLineNumber - 1;\n    const resultLines = [];\n    resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n    for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n      resultLines.push(this._lines[i]);\n    }\n    resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n    return resultLines.join(lineEnding);\n  }\n  offsetAt(position) {\n    position = this._validatePosition(position);\n    this._ensureLineStarts();\n    return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n  }\n  positionAt(offset) {\n    offset = Math.floor(offset);\n    offset = Math.max(0, offset);\n    this._ensureLineStarts();\n    const out = this._lineStarts.getIndexOf(offset);\n    const lineLength = this._lines[out.index].length;\n    // Ensure we return a valid position\n    return {\n      lineNumber: 1 + out.index,\n      column: 1 + Math.min(out.remainder, lineLength)\n    };\n  }\n  _validateRange(range) {\n    const start = this._validatePosition({\n      lineNumber: range.startLineNumber,\n      column: range.startColumn\n    });\n    const end = this._validatePosition({\n      lineNumber: range.endLineNumber,\n      column: range.endColumn\n    });\n    if (start.lineNumber !== range.startLineNumber || start.column !== range.startColumn || end.lineNumber !== range.endLineNumber || end.column !== range.endColumn) {\n      return {\n        startLineNumber: start.lineNumber,\n        startColumn: start.column,\n        endLineNumber: end.lineNumber,\n        endColumn: end.column\n      };\n    }\n    return range;\n  }\n  _validatePosition(position) {\n    if (!_core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position.isIPosition(position)) {\n      throw new Error('bad position');\n    }\n    let {\n      lineNumber,\n      column\n    } = position;\n    let hasChanged = false;\n    if (lineNumber < 1) {\n      lineNumber = 1;\n      column = 1;\n      hasChanged = true;\n    } else if (lineNumber > this._lines.length) {\n      lineNumber = this._lines.length;\n      column = this._lines[lineNumber - 1].length + 1;\n      hasChanged = true;\n    } else {\n      const maxCharacter = this._lines[lineNumber - 1].length + 1;\n      if (column < 1) {\n        column = 1;\n        hasChanged = true;\n      } else if (column > maxCharacter) {\n        column = maxCharacter;\n        hasChanged = true;\n      }\n    }\n    if (!hasChanged) {\n      return position;\n    } else {\n      return {\n        lineNumber,\n        column\n      };\n    }\n  }\n}\n/**\n * @internal\n */\nclass EditorSimpleWorker {\n  constructor(host, foreignModuleFactory) {\n    this._host = host;\n    this._models = Object.create(null);\n    this._foreignModuleFactory = foreignModuleFactory;\n    this._foreignModule = null;\n  }\n  dispose() {\n    this._models = Object.create(null);\n  }\n  _getModel(uri) {\n    return this._models[uri];\n  }\n  _getModels() {\n    const all = [];\n    Object.keys(this._models).forEach(key => all.push(this._models[key]));\n    return all;\n  }\n  acceptNewModel(data) {\n    this._models[data.url] = new MirrorModel(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.parse(data.url), data.lines, data.EOL, data.versionId);\n  }\n  acceptModelChanged(strURL, e) {\n    if (!this._models[strURL]) {\n      return;\n    }\n    const model = this._models[strURL];\n    model.onEvents(e);\n  }\n  acceptRemovedModel(strURL) {\n    if (!this._models[strURL]) {\n      return;\n    }\n    delete this._models[strURL];\n  }\n  async computeUnicodeHighlights(url, options, range) {\n    const model = this._getModel(url);\n    if (!model) {\n      return {\n        ranges: [],\n        hasMore: false,\n        ambiguousCharacterCount: 0,\n        invisibleCharacterCount: 0,\n        nonBasicAsciiCharacterCount: 0\n      };\n    }\n    return _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__.UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n  }\n  async findSectionHeaders(url, options) {\n    const model = this._getModel(url);\n    if (!model) {\n      return [];\n    }\n    return (0,_findSectionHeaders_js__WEBPACK_IMPORTED_MODULE_14__.findSectionHeaders)(model, options);\n  }\n  // ---- BEGIN diff --------------------------------------------------------------------------\n  async computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n    const original = this._getModel(originalUrl);\n    const modified = this._getModel(modifiedUrl);\n    if (!original || !modified) {\n      return null;\n    }\n    const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n    return result;\n  }\n  static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n    const diffAlgorithm = algorithm === 'advanced' ? _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getDefault() : _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getLegacy();\n    const originalLines = originalTextModel.getLinesContent();\n    const modifiedLines = modifiedTextModel.getLinesContent();\n    const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n    const identical = result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel);\n    function getLineChanges(changes) {\n      return changes.map(m => {\n        var _a;\n        return [m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a = m.innerChanges) === null || _a === void 0 ? void 0 : _a.map(m => [m.originalRange.startLineNumber, m.originalRange.startColumn, m.originalRange.endLineNumber, m.originalRange.endColumn, m.modifiedRange.startLineNumber, m.modifiedRange.startColumn, m.modifiedRange.endLineNumber, m.modifiedRange.endColumn])];\n      });\n    }\n    return {\n      identical,\n      quitEarly: result.hitTimeout,\n      changes: getLineChanges(result.changes),\n      moves: result.moves.map(m => [m.lineRangeMapping.original.startLineNumber, m.lineRangeMapping.original.endLineNumberExclusive, m.lineRangeMapping.modified.startLineNumber, m.lineRangeMapping.modified.endLineNumberExclusive, getLineChanges(m.changes)])\n    };\n  }\n  static _modelsAreIdentical(original, modified) {\n    const originalLineCount = original.getLineCount();\n    const modifiedLineCount = modified.getLineCount();\n    if (originalLineCount !== modifiedLineCount) {\n      return false;\n    }\n    for (let line = 1; line <= originalLineCount; line++) {\n      const originalLine = original.getLineContent(line);\n      const modifiedLine = modified.getLineContent(line);\n      if (originalLine !== modifiedLine) {\n        return false;\n      }\n    }\n    return true;\n  }\n  async computeMoreMinimalEdits(modelUrl, edits, pretty) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return edits;\n    }\n    const result = [];\n    let lastEol = undefined;\n    edits = edits.slice(0).sort((a, b) => {\n      if (a.range && b.range) {\n        return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.compareRangesUsingStarts(a.range, b.range);\n      }\n      // eol only changes should go to the end\n      const aRng = a.range ? 0 : 1;\n      const bRng = b.range ? 0 : 1;\n      return aRng - bRng;\n    });\n    // merge adjacent edits\n    let writeIndex = 0;\n    for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n      if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[writeIndex].range).equals(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[readIndex].range))) {\n        edits[writeIndex].range = _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[writeIndex].range), _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[readIndex].range));\n        edits[writeIndex].text += edits[readIndex].text;\n      } else {\n        writeIndex++;\n        edits[writeIndex] = edits[readIndex];\n      }\n    }\n    edits.length = writeIndex + 1;\n    for (let {\n      range,\n      text,\n      eol\n    } of edits) {\n      if (typeof eol === 'number') {\n        lastEol = eol;\n      }\n      if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.isEmpty(range) && !text) {\n        // empty change\n        continue;\n      }\n      const original = model.getValueInRange(range);\n      text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n      if (original === text) {\n        // noop\n        continue;\n      }\n      // make sure diff won't take too long\n      if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n        result.push({\n          range,\n          text\n        });\n        continue;\n      }\n      // compute diff between original and edit.text\n      const changes = (0,_base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.stringDiff)(original, text, pretty);\n      const editOffset = model.offsetAt(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.lift(range).getStartPosition());\n      for (const change of changes) {\n        const start = model.positionAt(editOffset + change.originalStart);\n        const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n        const newEdit = {\n          text: text.substr(change.modifiedStart, change.modifiedLength),\n          range: {\n            startLineNumber: start.lineNumber,\n            startColumn: start.column,\n            endLineNumber: end.lineNumber,\n            endColumn: end.column\n          }\n        };\n        if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n          result.push(newEdit);\n        }\n      }\n    }\n    if (typeof lastEol === 'number') {\n      result.push({\n        eol: lastEol,\n        text: '',\n        range: {\n          startLineNumber: 0,\n          startColumn: 0,\n          endLineNumber: 0,\n          endColumn: 0\n        }\n      });\n    }\n    return result;\n  }\n  // ---- END minimal edits ---------------------------------------------------------------\n  async computeLinks(modelUrl) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return null;\n    }\n    return (0,_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.computeLinks)(model);\n  }\n  // --- BEGIN default document colors -----------------------------------------------------------\n  async computeDefaultDocumentColors(modelUrl) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return null;\n    }\n    return (0,_languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__.computeDefaultDocumentColors)(model);\n  }\n  async textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n    const sw = new _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__.StopWatch();\n    const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n    const seen = new Set();\n    outer: for (const url of modelUrls) {\n      const model = this._getModel(url);\n      if (!model) {\n        continue;\n      }\n      for (const word of model.words(wordDefRegExp)) {\n        if (word === leadingWord || !isNaN(Number(word))) {\n          continue;\n        }\n        seen.add(word);\n        if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n          break outer;\n        }\n      }\n    }\n    return {\n      words: Array.from(seen),\n      duration: sw.elapsed()\n    };\n  }\n  // ---- END suggest --------------------------------------------------------------------------\n  //#region -- word ranges --\n  async computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return Object.create(null);\n    }\n    const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n    const result = Object.create(null);\n    for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n      const words = model.getLineWords(line, wordDefRegExp);\n      for (const word of words) {\n        if (!isNaN(Number(word.word))) {\n          continue;\n        }\n        let array = result[word.word];\n        if (!array) {\n          array = [];\n          result[word.word] = array;\n        }\n        array.push({\n          startLineNumber: line,\n          startColumn: word.startColumn,\n          endLineNumber: line,\n          endColumn: word.endColumn\n        });\n      }\n    }\n    return result;\n  }\n  //#endregion\n  async navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return null;\n    }\n    const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n    if (range.startColumn === range.endColumn) {\n      range = {\n        startLineNumber: range.startLineNumber,\n        startColumn: range.startColumn,\n        endLineNumber: range.endLineNumber,\n        endColumn: range.endColumn + 1\n      };\n    }\n    const selectionText = model.getValueInRange(range);\n    const wordRange = model.getWordAtPosition({\n      lineNumber: range.startLineNumber,\n      column: range.startColumn\n    }, wordDefRegExp);\n    if (!wordRange) {\n      return null;\n    }\n    const word = model.getValueInRange(wordRange);\n    const result = _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__.BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n    return result;\n  }\n  // ---- BEGIN foreign module support --------------------------------------------------------------------------\n  loadForeignModule(moduleId, createData, foreignHostMethods) {\n    const proxyMethodRequest = (method, args) => {\n      return this._host.fhr(method, args);\n    };\n    const foreignHost = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.createProxyObject)(foreignHostMethods, proxyMethodRequest);\n    const ctx = {\n      host: foreignHost,\n      getMirrorModels: () => {\n        return this._getModels();\n      }\n    };\n    if (this._foreignModuleFactory) {\n      this._foreignModule = this._foreignModuleFactory(ctx, createData);\n      // static foreing module\n      return Promise.resolve((0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.getAllMethodNames)(this._foreignModule));\n    }\n    // ESM-comment-begin\n    // \t\treturn new Promise<any>((resolve, reject) => {\n    // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n    // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n    // \n    // \t\t\t\tresolve(getAllMethodNames(this._foreignModule));\n    // \n    // \t\t\t}, reject);\n    // \t\t});\n    // ESM-comment-end\n    // ESM-uncomment-begin\n    return Promise.reject(new Error(`Unexpected usage`));\n    // ESM-uncomment-end\n  }\n  // foreign method request\n  fmr(method, args) {\n    if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n    try {\n      return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nfunction create(host) {\n  return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n  // Running in a web worker\n  globalThis.monaco = (0,_editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__.createMonacoBaseAPI)();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findSectionHeaders\": function() { return /* binding */ findSectionHeaders; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst markRegex = /\\bMARK:\\s*(.*)$/d;\nconst trimDashesRegex = /^-+|-+$/g;\n/**\n * Find section headers in the model.\n *\n * @param model the text model to search in\n * @param options options to search with\n * @returns an array of section headers\n */\nfunction findSectionHeaders(model, options) {\n  var _a;\n  let headers = [];\n  if (options.findRegionSectionHeaders && ((_a = options.foldingRules) === null || _a === void 0 ? void 0 : _a.markers)) {\n    const regionHeaders = collectRegionHeaders(model, options);\n    headers = headers.concat(regionHeaders);\n  }\n  if (options.findMarkSectionHeaders) {\n    const markHeaders = collectMarkHeaders(model);\n    headers = headers.concat(markHeaders);\n  }\n  return headers;\n}\nfunction collectRegionHeaders(model, options) {\n  const regionHeaders = [];\n  const endLineNumber = model.getLineCount();\n  for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n    const lineContent = model.getLineContent(lineNumber);\n    const match = lineContent.match(options.foldingRules.markers.start);\n    if (match) {\n      const range = {\n        startLineNumber: lineNumber,\n        startColumn: match[0].length + 1,\n        endLineNumber: lineNumber,\n        endColumn: lineContent.length + 1\n      };\n      if (range.endColumn > range.startColumn) {\n        const sectionHeader = {\n          range,\n          ...getHeaderText(lineContent.substring(match[0].length)),\n          shouldBeInComments: false\n        };\n        if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n          regionHeaders.push(sectionHeader);\n        }\n      }\n    }\n  }\n  return regionHeaders;\n}\nfunction collectMarkHeaders(model) {\n  const markHeaders = [];\n  const endLineNumber = model.getLineCount();\n  for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n    const lineContent = model.getLineContent(lineNumber);\n    addMarkHeaderIfFound(lineContent, lineNumber, markHeaders);\n  }\n  return markHeaders;\n}\nfunction addMarkHeaderIfFound(lineContent, lineNumber, sectionHeaders) {\n  markRegex.lastIndex = 0;\n  const match = markRegex.exec(lineContent);\n  if (match) {\n    const column = match.indices[1][0] + 1;\n    const endColumn = match.indices[1][1] + 1;\n    const range = {\n      startLineNumber: lineNumber,\n      startColumn: column,\n      endLineNumber: lineNumber,\n      endColumn: endColumn\n    };\n    if (range.endColumn > range.startColumn) {\n      const sectionHeader = {\n        range,\n        ...getHeaderText(match[1]),\n        shouldBeInComments: true\n      };\n      if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n        sectionHeaders.push(sectionHeader);\n      }\n    }\n  }\n}\nfunction getHeaderText(text) {\n  text = text.trim();\n  const hasSeparatorLine = text.startsWith('-');\n  text = text.replace(trimDashesRegex, '');\n  return {\n    text,\n    hasSeparatorLine\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UnicodeTextModelHighlighter\": function() { return /* binding */ UnicodeTextModelHighlighter; }\n/* harmony export */ });\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/textModelSearch.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js\");\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/wordHelper.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\nclass UnicodeTextModelHighlighter {\n  static computeUnicodeHighlights(model, options, range) {\n    const startLine = range ? range.startLineNumber : 1;\n    const endLine = range ? range.endLineNumber : model.getLineCount();\n    const codePointHighlighter = new CodePointHighlighter(options);\n    const candidates = codePointHighlighter.getCandidateCodePoints();\n    let regex;\n    if (candidates === 'allNonBasicAscii') {\n      regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n    } else {\n      regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n    }\n    const searcher = new _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__.Searcher(null, regex);\n    const ranges = [];\n    let hasMore = false;\n    let m;\n    let ambiguousCharacterCount = 0;\n    let invisibleCharacterCount = 0;\n    let nonBasicAsciiCharacterCount = 0;\n    forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n      const lineContent = model.getLineContent(lineNumber);\n      const lineLength = lineContent.length;\n      // Reset regex to search from the beginning\n      searcher.reset(0);\n      do {\n        m = searcher.next(lineContent);\n        if (m) {\n          let startIndex = m.index;\n          let endIndex = m.index + m[0].length;\n          // Extend range to entire code point\n          if (startIndex > 0) {\n            const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n            if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {\n              startIndex--;\n            }\n          }\n          if (endIndex + 1 < lineLength) {\n            const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n            if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {\n              endIndex++;\n            }\n          }\n          const str = lineContent.substring(startIndex, endIndex);\n          let word = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.getWordAtText)(startIndex + 1, _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_WORD_REGEXP, lineContent, 0);\n          if (word && word.endColumn <= startIndex + 1) {\n            // The word does not include the problematic character, ignore the word\n            word = null;\n          }\n          const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n          if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\n            if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\n              ambiguousCharacterCount++;\n            } else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\n              invisibleCharacterCount++;\n            } else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\n              nonBasicAsciiCharacterCount++;\n            } else {\n              (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assertNever)(highlightReason);\n            }\n            const MAX_RESULT_LENGTH = 1000;\n            if (ranges.length >= MAX_RESULT_LENGTH) {\n              hasMore = true;\n              break forLoop;\n            }\n            ranges.push(new _core_range_js__WEBPACK_IMPORTED_MODULE_0__.Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n          }\n        }\n      } while (m);\n    }\n    return {\n      ranges,\n      hasMore,\n      ambiguousCharacterCount,\n      invisibleCharacterCount,\n      nonBasicAsciiCharacterCount\n    };\n  }\n  static computeUnicodeHighlightReason(char, options) {\n    const codePointHighlighter = new CodePointHighlighter(options);\n    const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n    switch (reason) {\n      case 0 /* SimpleHighlightReason.None */:\n        return null;\n      case 2 /* SimpleHighlightReason.Invisible */:\n        return {\n          kind: 1 /* UnicodeHighlighterReasonKind.Invisible */\n        };\n      case 3 /* SimpleHighlightReason.Ambiguous */:\n        {\n          const codePoint = char.codePointAt(0);\n          const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\n          const notAmbiguousInLocales = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getLocales().filter(l => !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\n          return {\n            kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */,\n            confusableWith: String.fromCodePoint(primaryConfusable),\n            notAmbiguousInLocales\n          };\n        }\n      case 1 /* SimpleHighlightReason.NonBasicASCII */:\n        return {\n          kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */\n        };\n    }\n  }\n}\nfunction buildRegExpCharClassExpr(codePoints, flags) {\n  const src = `[${_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.escapeRegExpCharacters(codePoints.map(i => String.fromCodePoint(i)).join(''))}]`;\n  return src;\n}\nclass CodePointHighlighter {\n  constructor(options) {\n    this.options = options;\n    this.allowedCodePoints = new Set(options.allowedCodePoints);\n    this.ambiguousCharacters = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n  }\n  getCandidateCodePoints() {\n    if (this.options.nonBasicASCII) {\n      return 'allNonBasicAscii';\n    }\n    const set = new Set();\n    if (this.options.invisibleCharacters) {\n      for (const cp of _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.codePoints) {\n        if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n          set.add(cp);\n        }\n      }\n    }\n    if (this.options.ambiguousCharacters) {\n      for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n        set.add(cp);\n      }\n    }\n    for (const cp of this.allowedCodePoints) {\n      set.delete(cp);\n    }\n    return set;\n  }\n  shouldHighlightNonBasicASCII(character, wordContext) {\n    const codePoint = character.codePointAt(0);\n    if (this.allowedCodePoints.has(codePoint)) {\n      return 0 /* SimpleHighlightReason.None */;\n    }\n    if (this.options.nonBasicASCII) {\n      return 1 /* SimpleHighlightReason.NonBasicASCII */;\n    }\n    let hasBasicASCIICharacters = false;\n    let hasNonConfusableNonBasicAsciiCharacter = false;\n    if (wordContext) {\n      for (const char of wordContext) {\n        const codePoint = char.codePointAt(0);\n        const isBasicASCII = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isBasicASCII(char);\n        hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n        if (!isBasicASCII && !this.ambiguousCharacters.isAmbiguous(codePoint) && !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n          hasNonConfusableNonBasicAsciiCharacter = true;\n        }\n      }\n    }\n    if ( /* Don't allow mixing weird looking characters with ASCII */!hasBasicASCIICharacters && /* Is there an obviously weird looking character? */hasNonConfusableNonBasicAsciiCharacter) {\n      return 0 /* SimpleHighlightReason.None */;\n    }\n    if (this.options.invisibleCharacters) {\n      // TODO check for emojis\n      if (!isAllowedInvisibleCharacter(character) && _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n        return 2 /* SimpleHighlightReason.Invisible */;\n      }\n    }\n    if (this.options.ambiguousCharacters) {\n      if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n        return 3 /* SimpleHighlightReason.Ambiguous */;\n      }\n    }\n    return 0 /* SimpleHighlightReason.None */;\n  }\n}\nfunction isAllowedInvisibleCharacter(character) {\n  return character === ' ' || character === '\\n' || character === '\\t';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AccessibilitySupport\": function() { return /* binding */ AccessibilitySupport; },\n/* harmony export */   \"CodeActionTriggerType\": function() { return /* binding */ CodeActionTriggerType; },\n/* harmony export */   \"CompletionItemInsertTextRule\": function() { return /* binding */ CompletionItemInsertTextRule; },\n/* harmony export */   \"CompletionItemKind\": function() { return /* binding */ CompletionItemKind; },\n/* harmony export */   \"CompletionItemTag\": function() { return /* binding */ CompletionItemTag; },\n/* harmony export */   \"CompletionTriggerKind\": function() { return /* binding */ CompletionTriggerKind; },\n/* harmony export */   \"ContentWidgetPositionPreference\": function() { return /* binding */ ContentWidgetPositionPreference; },\n/* harmony export */   \"CursorChangeReason\": function() { return /* binding */ CursorChangeReason; },\n/* harmony export */   \"DefaultEndOfLine\": function() { return /* binding */ DefaultEndOfLine; },\n/* harmony export */   \"DocumentHighlightKind\": function() { return /* binding */ DocumentHighlightKind; },\n/* harmony export */   \"EditorAutoIndentStrategy\": function() { return /* binding */ EditorAutoIndentStrategy; },\n/* harmony export */   \"EditorOption\": function() { return /* binding */ EditorOption; },\n/* harmony export */   \"EndOfLinePreference\": function() { return /* binding */ EndOfLinePreference; },\n/* harmony export */   \"EndOfLineSequence\": function() { return /* binding */ EndOfLineSequence; },\n/* harmony export */   \"GlyphMarginLane\": function() { return /* binding */ GlyphMarginLane; },\n/* harmony export */   \"HoverVerbosityAction\": function() { return /* binding */ HoverVerbosityAction; },\n/* harmony export */   \"IndentAction\": function() { return /* binding */ IndentAction; },\n/* harmony export */   \"InjectedTextCursorStops\": function() { return /* binding */ InjectedTextCursorStops; },\n/* harmony export */   \"InlayHintKind\": function() { return /* binding */ InlayHintKind; },\n/* harmony export */   \"InlineCompletionTriggerKind\": function() { return /* binding */ InlineCompletionTriggerKind; },\n/* harmony export */   \"InlineEditTriggerKind\": function() { return /* binding */ InlineEditTriggerKind; },\n/* harmony export */   \"KeyCode\": function() { return /* binding */ KeyCode; },\n/* harmony export */   \"MarkerSeverity\": function() { return /* binding */ MarkerSeverity; },\n/* harmony export */   \"MarkerTag\": function() { return /* binding */ MarkerTag; },\n/* harmony export */   \"MinimapPosition\": function() { return /* binding */ MinimapPosition; },\n/* harmony export */   \"MinimapSectionHeaderStyle\": function() { return /* binding */ MinimapSectionHeaderStyle; },\n/* harmony export */   \"MouseTargetType\": function() { return /* binding */ MouseTargetType; },\n/* harmony export */   \"NewSymbolNameTag\": function() { return /* binding */ NewSymbolNameTag; },\n/* harmony export */   \"NewSymbolNameTriggerKind\": function() { return /* binding */ NewSymbolNameTriggerKind; },\n/* harmony export */   \"OverlayWidgetPositionPreference\": function() { return /* binding */ OverlayWidgetPositionPreference; },\n/* harmony export */   \"OverviewRulerLane\": function() { return /* binding */ OverviewRulerLane; },\n/* harmony export */   \"PartialAcceptTriggerKind\": function() { return /* binding */ PartialAcceptTriggerKind; },\n/* harmony export */   \"PositionAffinity\": function() { return /* binding */ PositionAffinity; },\n/* harmony export */   \"RenderLineNumbersType\": function() { return /* binding */ RenderLineNumbersType; },\n/* harmony export */   \"RenderMinimap\": function() { return /* binding */ RenderMinimap; },\n/* harmony export */   \"ScrollType\": function() { return /* binding */ ScrollType; },\n/* harmony export */   \"ScrollbarVisibility\": function() { return /* binding */ ScrollbarVisibility; },\n/* harmony export */   \"SelectionDirection\": function() { return /* binding */ SelectionDirection; },\n/* harmony export */   \"ShowLightbulbIconMode\": function() { return /* binding */ ShowLightbulbIconMode; },\n/* harmony export */   \"SignatureHelpTriggerKind\": function() { return /* binding */ SignatureHelpTriggerKind; },\n/* harmony export */   \"SymbolKind\": function() { return /* binding */ SymbolKind; },\n/* harmony export */   \"SymbolTag\": function() { return /* binding */ SymbolTag; },\n/* harmony export */   \"TextEditorCursorBlinkingStyle\": function() { return /* binding */ TextEditorCursorBlinkingStyle; },\n/* harmony export */   \"TextEditorCursorStyle\": function() { return /* binding */ TextEditorCursorStyle; },\n/* harmony export */   \"TrackedRangeStickiness\": function() { return /* binding */ TrackedRangeStickiness; },\n/* harmony export */   \"WrappingIndent\": function() { return /* binding */ WrappingIndent; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\nvar AccessibilitySupport;\n(function (AccessibilitySupport) {\n  /**\n   * This should be the browser case where it is not known if a screen reader is attached or no.\n   */\n  AccessibilitySupport[AccessibilitySupport[\"Unknown\"] = 0] = \"Unknown\";\n  AccessibilitySupport[AccessibilitySupport[\"Disabled\"] = 1] = \"Disabled\";\n  AccessibilitySupport[AccessibilitySupport[\"Enabled\"] = 2] = \"Enabled\";\n})(AccessibilitySupport || (AccessibilitySupport = {}));\nvar CodeActionTriggerType;\n(function (CodeActionTriggerType) {\n  CodeActionTriggerType[CodeActionTriggerType[\"Invoke\"] = 1] = \"Invoke\";\n  CodeActionTriggerType[CodeActionTriggerType[\"Auto\"] = 2] = \"Auto\";\n})(CodeActionTriggerType || (CodeActionTriggerType = {}));\nvar CompletionItemInsertTextRule;\n(function (CompletionItemInsertTextRule) {\n  CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"None\"] = 0] = \"None\";\n  /**\n   * Adjust whitespace/indentation of multiline insert texts to\n   * match the current line indentation.\n   */\n  CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"KeepWhitespace\"] = 1] = \"KeepWhitespace\";\n  /**\n   * `insertText` is a snippet.\n   */\n  CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"InsertAsSnippet\"] = 4] = \"InsertAsSnippet\";\n})(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));\nvar CompletionItemKind;\n(function (CompletionItemKind) {\n  CompletionItemKind[CompletionItemKind[\"Method\"] = 0] = \"Method\";\n  CompletionItemKind[CompletionItemKind[\"Function\"] = 1] = \"Function\";\n  CompletionItemKind[CompletionItemKind[\"Constructor\"] = 2] = \"Constructor\";\n  CompletionItemKind[CompletionItemKind[\"Field\"] = 3] = \"Field\";\n  CompletionItemKind[CompletionItemKind[\"Variable\"] = 4] = \"Variable\";\n  CompletionItemKind[CompletionItemKind[\"Class\"] = 5] = \"Class\";\n  CompletionItemKind[CompletionItemKind[\"Struct\"] = 6] = \"Struct\";\n  CompletionItemKind[CompletionItemKind[\"Interface\"] = 7] = \"Interface\";\n  CompletionItemKind[CompletionItemKind[\"Module\"] = 8] = \"Module\";\n  CompletionItemKind[CompletionItemKind[\"Property\"] = 9] = \"Property\";\n  CompletionItemKind[CompletionItemKind[\"Event\"] = 10] = \"Event\";\n  CompletionItemKind[CompletionItemKind[\"Operator\"] = 11] = \"Operator\";\n  CompletionItemKind[CompletionItemKind[\"Unit\"] = 12] = \"Unit\";\n  CompletionItemKind[CompletionItemKind[\"Value\"] = 13] = \"Value\";\n  CompletionItemKind[CompletionItemKind[\"Constant\"] = 14] = \"Constant\";\n  CompletionItemKind[CompletionItemKind[\"Enum\"] = 15] = \"Enum\";\n  CompletionItemKind[CompletionItemKind[\"EnumMember\"] = 16] = \"EnumMember\";\n  CompletionItemKind[CompletionItemKind[\"Keyword\"] = 17] = \"Keyword\";\n  CompletionItemKind[CompletionItemKind[\"Text\"] = 18] = \"Text\";\n  CompletionItemKind[CompletionItemKind[\"Color\"] = 19] = \"Color\";\n  CompletionItemKind[CompletionItemKind[\"File\"] = 20] = \"File\";\n  CompletionItemKind[CompletionItemKind[\"Reference\"] = 21] = \"Reference\";\n  CompletionItemKind[CompletionItemKind[\"Customcolor\"] = 22] = \"Customcolor\";\n  CompletionItemKind[CompletionItemKind[\"Folder\"] = 23] = \"Folder\";\n  CompletionItemKind[CompletionItemKind[\"TypeParameter\"] = 24] = \"TypeParameter\";\n  CompletionItemKind[CompletionItemKind[\"User\"] = 25] = \"User\";\n  CompletionItemKind[CompletionItemKind[\"Issue\"] = 26] = \"Issue\";\n  CompletionItemKind[CompletionItemKind[\"Snippet\"] = 27] = \"Snippet\";\n})(CompletionItemKind || (CompletionItemKind = {}));\nvar CompletionItemTag;\n(function (CompletionItemTag) {\n  CompletionItemTag[CompletionItemTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * How a suggest provider was triggered.\n */\nvar CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n  CompletionTriggerKind[CompletionTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n  CompletionTriggerKind[CompletionTriggerKind[\"TriggerCharacter\"] = 1] = \"TriggerCharacter\";\n  CompletionTriggerKind[CompletionTriggerKind[\"TriggerForIncompleteCompletions\"] = 2] = \"TriggerForIncompleteCompletions\";\n})(CompletionTriggerKind || (CompletionTriggerKind = {}));\n/**\n * A positioning preference for rendering content widgets.\n */\nvar ContentWidgetPositionPreference;\n(function (ContentWidgetPositionPreference) {\n  /**\n   * Place the content widget exactly at a position\n   */\n  ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"EXACT\"] = 0] = \"EXACT\";\n  /**\n   * Place the content widget above a position\n   */\n  ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"ABOVE\"] = 1] = \"ABOVE\";\n  /**\n   * Place the content widget below a position\n   */\n  ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"BELOW\"] = 2] = \"BELOW\";\n})(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));\n/**\n * Describes the reason the cursor has changed its position.\n */\nvar CursorChangeReason;\n(function (CursorChangeReason) {\n  /**\n   * Unknown or not set.\n   */\n  CursorChangeReason[CursorChangeReason[\"NotSet\"] = 0] = \"NotSet\";\n  /**\n   * A `model.setValue()` was called.\n   */\n  CursorChangeReason[CursorChangeReason[\"ContentFlush\"] = 1] = \"ContentFlush\";\n  /**\n   * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n   */\n  CursorChangeReason[CursorChangeReason[\"RecoverFromMarkers\"] = 2] = \"RecoverFromMarkers\";\n  /**\n   * There was an explicit user gesture.\n   */\n  CursorChangeReason[CursorChangeReason[\"Explicit\"] = 3] = \"Explicit\";\n  /**\n   * There was a Paste.\n   */\n  CursorChangeReason[CursorChangeReason[\"Paste\"] = 4] = \"Paste\";\n  /**\n   * There was an Undo.\n   */\n  CursorChangeReason[CursorChangeReason[\"Undo\"] = 5] = \"Undo\";\n  /**\n   * There was a Redo.\n   */\n  CursorChangeReason[CursorChangeReason[\"Redo\"] = 6] = \"Redo\";\n})(CursorChangeReason || (CursorChangeReason = {}));\n/**\n * The default end of line to use when instantiating models.\n */\nvar DefaultEndOfLine;\n(function (DefaultEndOfLine) {\n  /**\n   * Use line feed (\\n) as the end of line character.\n   */\n  DefaultEndOfLine[DefaultEndOfLine[\"LF\"] = 1] = \"LF\";\n  /**\n   * Use carriage return and line feed (\\r\\n) as the end of line character.\n   */\n  DefaultEndOfLine[DefaultEndOfLine[\"CRLF\"] = 2] = \"CRLF\";\n})(DefaultEndOfLine || (DefaultEndOfLine = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n  /**\n   * A textual occurrence.\n   */\n  DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n  /**\n   * Read-access of a symbol, like reading a variable.\n   */\n  DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n  /**\n   * Write-access of a symbol, like writing to a variable.\n   */\n  DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * Configuration options for auto indentation in the editor\n */\nvar EditorAutoIndentStrategy;\n(function (EditorAutoIndentStrategy) {\n  EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"None\"] = 0] = \"None\";\n  EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Keep\"] = 1] = \"Keep\";\n  EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Brackets\"] = 2] = \"Brackets\";\n  EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Advanced\"] = 3] = \"Advanced\";\n  EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Full\"] = 4] = \"Full\";\n})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));\nvar EditorOption;\n(function (EditorOption) {\n  EditorOption[EditorOption[\"acceptSuggestionOnCommitCharacter\"] = 0] = \"acceptSuggestionOnCommitCharacter\";\n  EditorOption[EditorOption[\"acceptSuggestionOnEnter\"] = 1] = \"acceptSuggestionOnEnter\";\n  EditorOption[EditorOption[\"accessibilitySupport\"] = 2] = \"accessibilitySupport\";\n  EditorOption[EditorOption[\"accessibilityPageSize\"] = 3] = \"accessibilityPageSize\";\n  EditorOption[EditorOption[\"ariaLabel\"] = 4] = \"ariaLabel\";\n  EditorOption[EditorOption[\"ariaRequired\"] = 5] = \"ariaRequired\";\n  EditorOption[EditorOption[\"autoClosingBrackets\"] = 6] = \"autoClosingBrackets\";\n  EditorOption[EditorOption[\"autoClosingComments\"] = 7] = \"autoClosingComments\";\n  EditorOption[EditorOption[\"screenReaderAnnounceInlineSuggestion\"] = 8] = \"screenReaderAnnounceInlineSuggestion\";\n  EditorOption[EditorOption[\"autoClosingDelete\"] = 9] = \"autoClosingDelete\";\n  EditorOption[EditorOption[\"autoClosingOvertype\"] = 10] = \"autoClosingOvertype\";\n  EditorOption[EditorOption[\"autoClosingQuotes\"] = 11] = \"autoClosingQuotes\";\n  EditorOption[EditorOption[\"autoIndent\"] = 12] = \"autoIndent\";\n  EditorOption[EditorOption[\"automaticLayout\"] = 13] = \"automaticLayout\";\n  EditorOption[EditorOption[\"autoSurround\"] = 14] = \"autoSurround\";\n  EditorOption[EditorOption[\"bracketPairColorization\"] = 15] = \"bracketPairColorization\";\n  EditorOption[EditorOption[\"guides\"] = 16] = \"guides\";\n  EditorOption[EditorOption[\"codeLens\"] = 17] = \"codeLens\";\n  EditorOption[EditorOption[\"codeLensFontFamily\"] = 18] = \"codeLensFontFamily\";\n  EditorOption[EditorOption[\"codeLensFontSize\"] = 19] = \"codeLensFontSize\";\n  EditorOption[EditorOption[\"colorDecorators\"] = 20] = \"colorDecorators\";\n  EditorOption[EditorOption[\"colorDecoratorsLimit\"] = 21] = \"colorDecoratorsLimit\";\n  EditorOption[EditorOption[\"columnSelection\"] = 22] = \"columnSelection\";\n  EditorOption[EditorOption[\"comments\"] = 23] = \"comments\";\n  EditorOption[EditorOption[\"contextmenu\"] = 24] = \"contextmenu\";\n  EditorOption[EditorOption[\"copyWithSyntaxHighlighting\"] = 25] = \"copyWithSyntaxHighlighting\";\n  EditorOption[EditorOption[\"cursorBlinking\"] = 26] = \"cursorBlinking\";\n  EditorOption[EditorOption[\"cursorSmoothCaretAnimation\"] = 27] = \"cursorSmoothCaretAnimation\";\n  EditorOption[EditorOption[\"cursorStyle\"] = 28] = \"cursorStyle\";\n  EditorOption[EditorOption[\"cursorSurroundingLines\"] = 29] = \"cursorSurroundingLines\";\n  EditorOption[EditorOption[\"cursorSurroundingLinesStyle\"] = 30] = \"cursorSurroundingLinesStyle\";\n  EditorOption[EditorOption[\"cursorWidth\"] = 31] = \"cursorWidth\";\n  EditorOption[EditorOption[\"disableLayerHinting\"] = 32] = \"disableLayerHinting\";\n  EditorOption[EditorOption[\"disableMonospaceOptimizations\"] = 33] = \"disableMonospaceOptimizations\";\n  EditorOption[EditorOption[\"domReadOnly\"] = 34] = \"domReadOnly\";\n  EditorOption[EditorOption[\"dragAndDrop\"] = 35] = \"dragAndDrop\";\n  EditorOption[EditorOption[\"dropIntoEditor\"] = 36] = \"dropIntoEditor\";\n  EditorOption[EditorOption[\"emptySelectionClipboard\"] = 37] = \"emptySelectionClipboard\";\n  EditorOption[EditorOption[\"experimentalWhitespaceRendering\"] = 38] = \"experimentalWhitespaceRendering\";\n  EditorOption[EditorOption[\"extraEditorClassName\"] = 39] = \"extraEditorClassName\";\n  EditorOption[EditorOption[\"fastScrollSensitivity\"] = 40] = \"fastScrollSensitivity\";\n  EditorOption[EditorOption[\"find\"] = 41] = \"find\";\n  EditorOption[EditorOption[\"fixedOverflowWidgets\"] = 42] = \"fixedOverflowWidgets\";\n  EditorOption[EditorOption[\"folding\"] = 43] = \"folding\";\n  EditorOption[EditorOption[\"foldingStrategy\"] = 44] = \"foldingStrategy\";\n  EditorOption[EditorOption[\"foldingHighlight\"] = 45] = \"foldingHighlight\";\n  EditorOption[EditorOption[\"foldingImportsByDefault\"] = 46] = \"foldingImportsByDefault\";\n  EditorOption[EditorOption[\"foldingMaximumRegions\"] = 47] = \"foldingMaximumRegions\";\n  EditorOption[EditorOption[\"unfoldOnClickAfterEndOfLine\"] = 48] = \"unfoldOnClickAfterEndOfLine\";\n  EditorOption[EditorOption[\"fontFamily\"] = 49] = \"fontFamily\";\n  EditorOption[EditorOption[\"fontInfo\"] = 50] = \"fontInfo\";\n  EditorOption[EditorOption[\"fontLigatures\"] = 51] = \"fontLigatures\";\n  EditorOption[EditorOption[\"fontSize\"] = 52] = \"fontSize\";\n  EditorOption[EditorOption[\"fontWeight\"] = 53] = \"fontWeight\";\n  EditorOption[EditorOption[\"fontVariations\"] = 54] = \"fontVariations\";\n  EditorOption[EditorOption[\"formatOnPaste\"] = 55] = \"formatOnPaste\";\n  EditorOption[EditorOption[\"formatOnType\"] = 56] = \"formatOnType\";\n  EditorOption[EditorOption[\"glyphMargin\"] = 57] = \"glyphMargin\";\n  EditorOption[EditorOption[\"gotoLocation\"] = 58] = \"gotoLocation\";\n  EditorOption[EditorOption[\"hideCursorInOverviewRuler\"] = 59] = \"hideCursorInOverviewRuler\";\n  EditorOption[EditorOption[\"hover\"] = 60] = \"hover\";\n  EditorOption[EditorOption[\"inDiffEditor\"] = 61] = \"inDiffEditor\";\n  EditorOption[EditorOption[\"inlineSuggest\"] = 62] = \"inlineSuggest\";\n  EditorOption[EditorOption[\"inlineEdit\"] = 63] = \"inlineEdit\";\n  EditorOption[EditorOption[\"letterSpacing\"] = 64] = \"letterSpacing\";\n  EditorOption[EditorOption[\"lightbulb\"] = 65] = \"lightbulb\";\n  EditorOption[EditorOption[\"lineDecorationsWidth\"] = 66] = \"lineDecorationsWidth\";\n  EditorOption[EditorOption[\"lineHeight\"] = 67] = \"lineHeight\";\n  EditorOption[EditorOption[\"lineNumbers\"] = 68] = \"lineNumbers\";\n  EditorOption[EditorOption[\"lineNumbersMinChars\"] = 69] = \"lineNumbersMinChars\";\n  EditorOption[EditorOption[\"linkedEditing\"] = 70] = \"linkedEditing\";\n  EditorOption[EditorOption[\"links\"] = 71] = \"links\";\n  EditorOption[EditorOption[\"matchBrackets\"] = 72] = \"matchBrackets\";\n  EditorOption[EditorOption[\"minimap\"] = 73] = \"minimap\";\n  EditorOption[EditorOption[\"mouseStyle\"] = 74] = \"mouseStyle\";\n  EditorOption[EditorOption[\"mouseWheelScrollSensitivity\"] = 75] = \"mouseWheelScrollSensitivity\";\n  EditorOption[EditorOption[\"mouseWheelZoom\"] = 76] = \"mouseWheelZoom\";\n  EditorOption[EditorOption[\"multiCursorMergeOverlapping\"] = 77] = \"multiCursorMergeOverlapping\";\n  EditorOption[EditorOption[\"multiCursorModifier\"] = 78] = \"multiCursorModifier\";\n  EditorOption[EditorOption[\"multiCursorPaste\"] = 79] = \"multiCursorPaste\";\n  EditorOption[EditorOption[\"multiCursorLimit\"] = 80] = \"multiCursorLimit\";\n  EditorOption[EditorOption[\"occurrencesHighlight\"] = 81] = \"occurrencesHighlight\";\n  EditorOption[EditorOption[\"overviewRulerBorder\"] = 82] = \"overviewRulerBorder\";\n  EditorOption[EditorOption[\"overviewRulerLanes\"] = 83] = \"overviewRulerLanes\";\n  EditorOption[EditorOption[\"padding\"] = 84] = \"padding\";\n  EditorOption[EditorOption[\"pasteAs\"] = 85] = \"pasteAs\";\n  EditorOption[EditorOption[\"parameterHints\"] = 86] = \"parameterHints\";\n  EditorOption[EditorOption[\"peekWidgetDefaultFocus\"] = 87] = \"peekWidgetDefaultFocus\";\n  EditorOption[EditorOption[\"definitionLinkOpensInPeek\"] = 88] = \"definitionLinkOpensInPeek\";\n  EditorOption[EditorOption[\"quickSuggestions\"] = 89] = \"quickSuggestions\";\n  EditorOption[EditorOption[\"quickSuggestionsDelay\"] = 90] = \"quickSuggestionsDelay\";\n  EditorOption[EditorOption[\"readOnly\"] = 91] = \"readOnly\";\n  EditorOption[EditorOption[\"readOnlyMessage\"] = 92] = \"readOnlyMessage\";\n  EditorOption[EditorOption[\"renameOnType\"] = 93] = \"renameOnType\";\n  EditorOption[EditorOption[\"renderControlCharacters\"] = 94] = \"renderControlCharacters\";\n  EditorOption[EditorOption[\"renderFinalNewline\"] = 95] = \"renderFinalNewline\";\n  EditorOption[EditorOption[\"renderLineHighlight\"] = 96] = \"renderLineHighlight\";\n  EditorOption[EditorOption[\"renderLineHighlightOnlyWhenFocus\"] = 97] = \"renderLineHighlightOnlyWhenFocus\";\n  EditorOption[EditorOption[\"renderValidationDecorations\"] = 98] = \"renderValidationDecorations\";\n  EditorOption[EditorOption[\"renderWhitespace\"] = 99] = \"renderWhitespace\";\n  EditorOption[EditorOption[\"revealHorizontalRightPadding\"] = 100] = \"revealHorizontalRightPadding\";\n  EditorOption[EditorOption[\"roundedSelection\"] = 101] = \"roundedSelection\";\n  EditorOption[EditorOption[\"rulers\"] = 102] = \"rulers\";\n  EditorOption[EditorOption[\"scrollbar\"] = 103] = \"scrollbar\";\n  EditorOption[EditorOption[\"scrollBeyondLastColumn\"] = 104] = \"scrollBeyondLastColumn\";\n  EditorOption[EditorOption[\"scrollBeyondLastLine\"] = 105] = \"scrollBeyondLastLine\";\n  EditorOption[EditorOption[\"scrollPredominantAxis\"] = 106] = \"scrollPredominantAxis\";\n  EditorOption[EditorOption[\"selectionClipboard\"] = 107] = \"selectionClipboard\";\n  EditorOption[EditorOption[\"selectionHighlight\"] = 108] = \"selectionHighlight\";\n  EditorOption[EditorOption[\"selectOnLineNumbers\"] = 109] = \"selectOnLineNumbers\";\n  EditorOption[EditorOption[\"showFoldingControls\"] = 110] = \"showFoldingControls\";\n  EditorOption[EditorOption[\"showUnused\"] = 111] = \"showUnused\";\n  EditorOption[EditorOption[\"snippetSuggestions\"] = 112] = \"snippetSuggestions\";\n  EditorOption[EditorOption[\"smartSelect\"] = 113] = \"smartSelect\";\n  EditorOption[EditorOption[\"smoothScrolling\"] = 114] = \"smoothScrolling\";\n  EditorOption[EditorOption[\"stickyScroll\"] = 115] = \"stickyScroll\";\n  EditorOption[EditorOption[\"stickyTabStops\"] = 116] = \"stickyTabStops\";\n  EditorOption[EditorOption[\"stopRenderingLineAfter\"] = 117] = \"stopRenderingLineAfter\";\n  EditorOption[EditorOption[\"suggest\"] = 118] = \"suggest\";\n  EditorOption[EditorOption[\"suggestFontSize\"] = 119] = \"suggestFontSize\";\n  EditorOption[EditorOption[\"suggestLineHeight\"] = 120] = \"suggestLineHeight\";\n  EditorOption[EditorOption[\"suggestOnTriggerCharacters\"] = 121] = \"suggestOnTriggerCharacters\";\n  EditorOption[EditorOption[\"suggestSelection\"] = 122] = \"suggestSelection\";\n  EditorOption[EditorOption[\"tabCompletion\"] = 123] = \"tabCompletion\";\n  EditorOption[EditorOption[\"tabIndex\"] = 124] = \"tabIndex\";\n  EditorOption[EditorOption[\"unicodeHighlighting\"] = 125] = \"unicodeHighlighting\";\n  EditorOption[EditorOption[\"unusualLineTerminators\"] = 126] = \"unusualLineTerminators\";\n  EditorOption[EditorOption[\"useShadowDOM\"] = 127] = \"useShadowDOM\";\n  EditorOption[EditorOption[\"useTabStops\"] = 128] = \"useTabStops\";\n  EditorOption[EditorOption[\"wordBreak\"] = 129] = \"wordBreak\";\n  EditorOption[EditorOption[\"wordSegmenterLocales\"] = 130] = \"wordSegmenterLocales\";\n  EditorOption[EditorOption[\"wordSeparators\"] = 131] = \"wordSeparators\";\n  EditorOption[EditorOption[\"wordWrap\"] = 132] = \"wordWrap\";\n  EditorOption[EditorOption[\"wordWrapBreakAfterCharacters\"] = 133] = \"wordWrapBreakAfterCharacters\";\n  EditorOption[EditorOption[\"wordWrapBreakBeforeCharacters\"] = 134] = \"wordWrapBreakBeforeCharacters\";\n  EditorOption[EditorOption[\"wordWrapColumn\"] = 135] = \"wordWrapColumn\";\n  EditorOption[EditorOption[\"wordWrapOverride1\"] = 136] = \"wordWrapOverride1\";\n  EditorOption[EditorOption[\"wordWrapOverride2\"] = 137] = \"wordWrapOverride2\";\n  EditorOption[EditorOption[\"wrappingIndent\"] = 138] = \"wrappingIndent\";\n  EditorOption[EditorOption[\"wrappingStrategy\"] = 139] = \"wrappingStrategy\";\n  EditorOption[EditorOption[\"showDeprecated\"] = 140] = \"showDeprecated\";\n  EditorOption[EditorOption[\"inlayHints\"] = 141] = \"inlayHints\";\n  EditorOption[EditorOption[\"editorClassName\"] = 142] = \"editorClassName\";\n  EditorOption[EditorOption[\"pixelRatio\"] = 143] = \"pixelRatio\";\n  EditorOption[EditorOption[\"tabFocusMode\"] = 144] = \"tabFocusMode\";\n  EditorOption[EditorOption[\"layoutInfo\"] = 145] = \"layoutInfo\";\n  EditorOption[EditorOption[\"wrappingInfo\"] = 146] = \"wrappingInfo\";\n  EditorOption[EditorOption[\"defaultColorDecorators\"] = 147] = \"defaultColorDecorators\";\n  EditorOption[EditorOption[\"colorDecoratorsActivatedOn\"] = 148] = \"colorDecoratorsActivatedOn\";\n  EditorOption[EditorOption[\"inlineCompletionsAccessibilityVerbose\"] = 149] = \"inlineCompletionsAccessibilityVerbose\";\n})(EditorOption || (EditorOption = {}));\n/**\n * End of line character preference.\n */\nvar EndOfLinePreference;\n(function (EndOfLinePreference) {\n  /**\n   * Use the end of line character identified in the text buffer.\n   */\n  EndOfLinePreference[EndOfLinePreference[\"TextDefined\"] = 0] = \"TextDefined\";\n  /**\n   * Use line feed (\\n) as the end of line character.\n   */\n  EndOfLinePreference[EndOfLinePreference[\"LF\"] = 1] = \"LF\";\n  /**\n   * Use carriage return and line feed (\\r\\n) as the end of line character.\n   */\n  EndOfLinePreference[EndOfLinePreference[\"CRLF\"] = 2] = \"CRLF\";\n})(EndOfLinePreference || (EndOfLinePreference = {}));\n/**\n * End of line character preference.\n */\nvar EndOfLineSequence;\n(function (EndOfLineSequence) {\n  /**\n   * Use line feed (\\n) as the end of line character.\n   */\n  EndOfLineSequence[EndOfLineSequence[\"LF\"] = 0] = \"LF\";\n  /**\n   * Use carriage return and line feed (\\r\\n) as the end of line character.\n   */\n  EndOfLineSequence[EndOfLineSequence[\"CRLF\"] = 1] = \"CRLF\";\n})(EndOfLineSequence || (EndOfLineSequence = {}));\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nvar GlyphMarginLane;\n(function (GlyphMarginLane) {\n  GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\n  GlyphMarginLane[GlyphMarginLane[\"Center\"] = 2] = \"Center\";\n  GlyphMarginLane[GlyphMarginLane[\"Right\"] = 3] = \"Right\";\n})(GlyphMarginLane || (GlyphMarginLane = {}));\nvar HoverVerbosityAction;\n(function (HoverVerbosityAction) {\n  /**\n   * Increase the verbosity of the hover\n   */\n  HoverVerbosityAction[HoverVerbosityAction[\"Increase\"] = 0] = \"Increase\";\n  /**\n   * Decrease the verbosity of the hover\n   */\n  HoverVerbosityAction[HoverVerbosityAction[\"Decrease\"] = 1] = \"Decrease\";\n})(HoverVerbosityAction || (HoverVerbosityAction = {}));\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nvar IndentAction;\n(function (IndentAction) {\n  /**\n   * Insert new line and copy the previous line's indentation.\n   */\n  IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n  /**\n   * Insert new line and indent once (relative to the previous line's indentation).\n   */\n  IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n  /**\n   * Insert two new lines:\n   *  - the first one indented which will hold the cursor\n   *  - the second one at the same indentation level\n   */\n  IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n  /**\n   * Insert new line and outdent once (relative to the previous line's indentation).\n   */\n  IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\nvar InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n  InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n  InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n  InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n  InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nvar InlayHintKind;\n(function (InlayHintKind) {\n  InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n  InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nvar InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n  /**\n   * Completion was triggered automatically while editing.\n   * It is sufficient to return a single completion item in this case.\n   */\n  InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n  /**\n   * Completion was triggered explicitly by a user gesture.\n   * Return multiple completion items to enable cycling through them.\n   */\n  InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nvar InlineEditTriggerKind;\n(function (InlineEditTriggerKind) {\n  InlineEditTriggerKind[InlineEditTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n  InlineEditTriggerKind[InlineEditTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(InlineEditTriggerKind || (InlineEditTriggerKind = {}));\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are \"more general\", as they should work across browsers & OS`s.\n */\nvar KeyCode;\n(function (KeyCode) {\n  KeyCode[KeyCode[\"DependsOnKbLayout\"] = -1] = \"DependsOnKbLayout\";\n  /**\n   * Placed first to cover the 0 value of the enum.\n   */\n  KeyCode[KeyCode[\"Unknown\"] = 0] = \"Unknown\";\n  KeyCode[KeyCode[\"Backspace\"] = 1] = \"Backspace\";\n  KeyCode[KeyCode[\"Tab\"] = 2] = \"Tab\";\n  KeyCode[KeyCode[\"Enter\"] = 3] = \"Enter\";\n  KeyCode[KeyCode[\"Shift\"] = 4] = \"Shift\";\n  KeyCode[KeyCode[\"Ctrl\"] = 5] = \"Ctrl\";\n  KeyCode[KeyCode[\"Alt\"] = 6] = \"Alt\";\n  KeyCode[KeyCode[\"PauseBreak\"] = 7] = \"PauseBreak\";\n  KeyCode[KeyCode[\"CapsLock\"] = 8] = \"CapsLock\";\n  KeyCode[KeyCode[\"Escape\"] = 9] = \"Escape\";\n  KeyCode[KeyCode[\"Space\"] = 10] = \"Space\";\n  KeyCode[KeyCode[\"PageUp\"] = 11] = \"PageUp\";\n  KeyCode[KeyCode[\"PageDown\"] = 12] = \"PageDown\";\n  KeyCode[KeyCode[\"End\"] = 13] = \"End\";\n  KeyCode[KeyCode[\"Home\"] = 14] = \"Home\";\n  KeyCode[KeyCode[\"LeftArrow\"] = 15] = \"LeftArrow\";\n  KeyCode[KeyCode[\"UpArrow\"] = 16] = \"UpArrow\";\n  KeyCode[KeyCode[\"RightArrow\"] = 17] = \"RightArrow\";\n  KeyCode[KeyCode[\"DownArrow\"] = 18] = \"DownArrow\";\n  KeyCode[KeyCode[\"Insert\"] = 19] = \"Insert\";\n  KeyCode[KeyCode[\"Delete\"] = 20] = \"Delete\";\n  KeyCode[KeyCode[\"Digit0\"] = 21] = \"Digit0\";\n  KeyCode[KeyCode[\"Digit1\"] = 22] = \"Digit1\";\n  KeyCode[KeyCode[\"Digit2\"] = 23] = \"Digit2\";\n  KeyCode[KeyCode[\"Digit3\"] = 24] = \"Digit3\";\n  KeyCode[KeyCode[\"Digit4\"] = 25] = \"Digit4\";\n  KeyCode[KeyCode[\"Digit5\"] = 26] = \"Digit5\";\n  KeyCode[KeyCode[\"Digit6\"] = 27] = \"Digit6\";\n  KeyCode[KeyCode[\"Digit7\"] = 28] = \"Digit7\";\n  KeyCode[KeyCode[\"Digit8\"] = 29] = \"Digit8\";\n  KeyCode[KeyCode[\"Digit9\"] = 30] = \"Digit9\";\n  KeyCode[KeyCode[\"KeyA\"] = 31] = \"KeyA\";\n  KeyCode[KeyCode[\"KeyB\"] = 32] = \"KeyB\";\n  KeyCode[KeyCode[\"KeyC\"] = 33] = \"KeyC\";\n  KeyCode[KeyCode[\"KeyD\"] = 34] = \"KeyD\";\n  KeyCode[KeyCode[\"KeyE\"] = 35] = \"KeyE\";\n  KeyCode[KeyCode[\"KeyF\"] = 36] = \"KeyF\";\n  KeyCode[KeyCode[\"KeyG\"] = 37] = \"KeyG\";\n  KeyCode[KeyCode[\"KeyH\"] = 38] = \"KeyH\";\n  KeyCode[KeyCode[\"KeyI\"] = 39] = \"KeyI\";\n  KeyCode[KeyCode[\"KeyJ\"] = 40] = \"KeyJ\";\n  KeyCode[KeyCode[\"KeyK\"] = 41] = \"KeyK\";\n  KeyCode[KeyCode[\"KeyL\"] = 42] = \"KeyL\";\n  KeyCode[KeyCode[\"KeyM\"] = 43] = \"KeyM\";\n  KeyCode[KeyCode[\"KeyN\"] = 44] = \"KeyN\";\n  KeyCode[KeyCode[\"KeyO\"] = 45] = \"KeyO\";\n  KeyCode[KeyCode[\"KeyP\"] = 46] = \"KeyP\";\n  KeyCode[KeyCode[\"KeyQ\"] = 47] = \"KeyQ\";\n  KeyCode[KeyCode[\"KeyR\"] = 48] = \"KeyR\";\n  KeyCode[KeyCode[\"KeyS\"] = 49] = \"KeyS\";\n  KeyCode[KeyCode[\"KeyT\"] = 50] = \"KeyT\";\n  KeyCode[KeyCode[\"KeyU\"] = 51] = \"KeyU\";\n  KeyCode[KeyCode[\"KeyV\"] = 52] = \"KeyV\";\n  KeyCode[KeyCode[\"KeyW\"] = 53] = \"KeyW\";\n  KeyCode[KeyCode[\"KeyX\"] = 54] = \"KeyX\";\n  KeyCode[KeyCode[\"KeyY\"] = 55] = \"KeyY\";\n  KeyCode[KeyCode[\"KeyZ\"] = 56] = \"KeyZ\";\n  KeyCode[KeyCode[\"Meta\"] = 57] = \"Meta\";\n  KeyCode[KeyCode[\"ContextMenu\"] = 58] = \"ContextMenu\";\n  KeyCode[KeyCode[\"F1\"] = 59] = \"F1\";\n  KeyCode[KeyCode[\"F2\"] = 60] = \"F2\";\n  KeyCode[KeyCode[\"F3\"] = 61] = \"F3\";\n  KeyCode[KeyCode[\"F4\"] = 62] = \"F4\";\n  KeyCode[KeyCode[\"F5\"] = 63] = \"F5\";\n  KeyCode[KeyCode[\"F6\"] = 64] = \"F6\";\n  KeyCode[KeyCode[\"F7\"] = 65] = \"F7\";\n  KeyCode[KeyCode[\"F8\"] = 66] = \"F8\";\n  KeyCode[KeyCode[\"F9\"] = 67] = \"F9\";\n  KeyCode[KeyCode[\"F10\"] = 68] = \"F10\";\n  KeyCode[KeyCode[\"F11\"] = 69] = \"F11\";\n  KeyCode[KeyCode[\"F12\"] = 70] = \"F12\";\n  KeyCode[KeyCode[\"F13\"] = 71] = \"F13\";\n  KeyCode[KeyCode[\"F14\"] = 72] = \"F14\";\n  KeyCode[KeyCode[\"F15\"] = 73] = \"F15\";\n  KeyCode[KeyCode[\"F16\"] = 74] = \"F16\";\n  KeyCode[KeyCode[\"F17\"] = 75] = \"F17\";\n  KeyCode[KeyCode[\"F18\"] = 76] = \"F18\";\n  KeyCode[KeyCode[\"F19\"] = 77] = \"F19\";\n  KeyCode[KeyCode[\"F20\"] = 78] = \"F20\";\n  KeyCode[KeyCode[\"F21\"] = 79] = \"F21\";\n  KeyCode[KeyCode[\"F22\"] = 80] = \"F22\";\n  KeyCode[KeyCode[\"F23\"] = 81] = \"F23\";\n  KeyCode[KeyCode[\"F24\"] = 82] = \"F24\";\n  KeyCode[KeyCode[\"NumLock\"] = 83] = \"NumLock\";\n  KeyCode[KeyCode[\"ScrollLock\"] = 84] = \"ScrollLock\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   * For the US standard keyboard, the ';:' key\n   */\n  KeyCode[KeyCode[\"Semicolon\"] = 85] = \"Semicolon\";\n  /**\n   * For any country/region, the '+' key\n   * For the US standard keyboard, the '=+' key\n   */\n  KeyCode[KeyCode[\"Equal\"] = 86] = \"Equal\";\n  /**\n   * For any country/region, the ',' key\n   * For the US standard keyboard, the ',<' key\n   */\n  KeyCode[KeyCode[\"Comma\"] = 87] = \"Comma\";\n  /**\n   * For any country/region, the '-' key\n   * For the US standard keyboard, the '-_' key\n   */\n  KeyCode[KeyCode[\"Minus\"] = 88] = \"Minus\";\n  /**\n   * For any country/region, the '.' key\n   * For the US standard keyboard, the '.>' key\n   */\n  KeyCode[KeyCode[\"Period\"] = 89] = \"Period\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   * For the US standard keyboard, the '/?' key\n   */\n  KeyCode[KeyCode[\"Slash\"] = 90] = \"Slash\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   * For the US standard keyboard, the '`~' key\n   */\n  KeyCode[KeyCode[\"Backquote\"] = 91] = \"Backquote\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   * For the US standard keyboard, the '[{' key\n   */\n  KeyCode[KeyCode[\"BracketLeft\"] = 92] = \"BracketLeft\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   * For the US standard keyboard, the '\\|' key\n   */\n  KeyCode[KeyCode[\"Backslash\"] = 93] = \"Backslash\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   * For the US standard keyboard, the ']}' key\n   */\n  KeyCode[KeyCode[\"BracketRight\"] = 94] = \"BracketRight\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   * For the US standard keyboard, the ''\"' key\n   */\n  KeyCode[KeyCode[\"Quote\"] = 95] = \"Quote\";\n  /**\n   * Used for miscellaneous characters; it can vary by keyboard.\n   */\n  KeyCode[KeyCode[\"OEM_8\"] = 96] = \"OEM_8\";\n  /**\n   * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n   */\n  KeyCode[KeyCode[\"IntlBackslash\"] = 97] = \"IntlBackslash\";\n  KeyCode[KeyCode[\"Numpad0\"] = 98] = \"Numpad0\";\n  KeyCode[KeyCode[\"Numpad1\"] = 99] = \"Numpad1\";\n  KeyCode[KeyCode[\"Numpad2\"] = 100] = \"Numpad2\";\n  KeyCode[KeyCode[\"Numpad3\"] = 101] = \"Numpad3\";\n  KeyCode[KeyCode[\"Numpad4\"] = 102] = \"Numpad4\";\n  KeyCode[KeyCode[\"Numpad5\"] = 103] = \"Numpad5\";\n  KeyCode[KeyCode[\"Numpad6\"] = 104] = \"Numpad6\";\n  KeyCode[KeyCode[\"Numpad7\"] = 105] = \"Numpad7\";\n  KeyCode[KeyCode[\"Numpad8\"] = 106] = \"Numpad8\";\n  KeyCode[KeyCode[\"Numpad9\"] = 107] = \"Numpad9\";\n  KeyCode[KeyCode[\"NumpadMultiply\"] = 108] = \"NumpadMultiply\";\n  KeyCode[KeyCode[\"NumpadAdd\"] = 109] = \"NumpadAdd\";\n  KeyCode[KeyCode[\"NUMPAD_SEPARATOR\"] = 110] = \"NUMPAD_SEPARATOR\";\n  KeyCode[KeyCode[\"NumpadSubtract\"] = 111] = \"NumpadSubtract\";\n  KeyCode[KeyCode[\"NumpadDecimal\"] = 112] = \"NumpadDecimal\";\n  KeyCode[KeyCode[\"NumpadDivide\"] = 113] = \"NumpadDivide\";\n  /**\n   * Cover all key codes when IME is processing input.\n   */\n  KeyCode[KeyCode[\"KEY_IN_COMPOSITION\"] = 114] = \"KEY_IN_COMPOSITION\";\n  KeyCode[KeyCode[\"ABNT_C1\"] = 115] = \"ABNT_C1\";\n  KeyCode[KeyCode[\"ABNT_C2\"] = 116] = \"ABNT_C2\";\n  KeyCode[KeyCode[\"AudioVolumeMute\"] = 117] = \"AudioVolumeMute\";\n  KeyCode[KeyCode[\"AudioVolumeUp\"] = 118] = \"AudioVolumeUp\";\n  KeyCode[KeyCode[\"AudioVolumeDown\"] = 119] = \"AudioVolumeDown\";\n  KeyCode[KeyCode[\"BrowserSearch\"] = 120] = \"BrowserSearch\";\n  KeyCode[KeyCode[\"BrowserHome\"] = 121] = \"BrowserHome\";\n  KeyCode[KeyCode[\"BrowserBack\"] = 122] = \"BrowserBack\";\n  KeyCode[KeyCode[\"BrowserForward\"] = 123] = \"BrowserForward\";\n  KeyCode[KeyCode[\"MediaTrackNext\"] = 124] = \"MediaTrackNext\";\n  KeyCode[KeyCode[\"MediaTrackPrevious\"] = 125] = \"MediaTrackPrevious\";\n  KeyCode[KeyCode[\"MediaStop\"] = 126] = \"MediaStop\";\n  KeyCode[KeyCode[\"MediaPlayPause\"] = 127] = \"MediaPlayPause\";\n  KeyCode[KeyCode[\"LaunchMediaPlayer\"] = 128] = \"LaunchMediaPlayer\";\n  KeyCode[KeyCode[\"LaunchMail\"] = 129] = \"LaunchMail\";\n  KeyCode[KeyCode[\"LaunchApp2\"] = 130] = \"LaunchApp2\";\n  /**\n   * VK_CLEAR, 0x0C, CLEAR key\n   */\n  KeyCode[KeyCode[\"Clear\"] = 131] = \"Clear\";\n  /**\n   * Placed last to cover the length of the enum.\n   * Please do not depend on this value!\n   */\n  KeyCode[KeyCode[\"MAX_VALUE\"] = 132] = \"MAX_VALUE\";\n})(KeyCode || (KeyCode = {}));\nvar MarkerSeverity;\n(function (MarkerSeverity) {\n  MarkerSeverity[MarkerSeverity[\"Hint\"] = 1] = \"Hint\";\n  MarkerSeverity[MarkerSeverity[\"Info\"] = 2] = \"Info\";\n  MarkerSeverity[MarkerSeverity[\"Warning\"] = 4] = \"Warning\";\n  MarkerSeverity[MarkerSeverity[\"Error\"] = 8] = \"Error\";\n})(MarkerSeverity || (MarkerSeverity = {}));\nvar MarkerTag;\n(function (MarkerTag) {\n  MarkerTag[MarkerTag[\"Unnecessary\"] = 1] = \"Unnecessary\";\n  MarkerTag[MarkerTag[\"Deprecated\"] = 2] = \"Deprecated\";\n})(MarkerTag || (MarkerTag = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nvar MinimapPosition;\n(function (MinimapPosition) {\n  MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\n  MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\n})(MinimapPosition || (MinimapPosition = {}));\n/**\n * Section header style.\n */\nvar MinimapSectionHeaderStyle;\n(function (MinimapSectionHeaderStyle) {\n  MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Normal\"] = 1] = \"Normal\";\n  MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Underlined\"] = 2] = \"Underlined\";\n})(MinimapSectionHeaderStyle || (MinimapSectionHeaderStyle = {}));\n/**\n * Type of hit element with the mouse in the editor.\n */\nvar MouseTargetType;\n(function (MouseTargetType) {\n  /**\n   * Mouse is on top of an unknown element.\n   */\n  MouseTargetType[MouseTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  /**\n   * Mouse is on top of the textarea used for input.\n   */\n  MouseTargetType[MouseTargetType[\"TEXTAREA\"] = 1] = \"TEXTAREA\";\n  /**\n   * Mouse is on top of the glyph margin\n   */\n  MouseTargetType[MouseTargetType[\"GUTTER_GLYPH_MARGIN\"] = 2] = \"GUTTER_GLYPH_MARGIN\";\n  /**\n   * Mouse is on top of the line numbers\n   */\n  MouseTargetType[MouseTargetType[\"GUTTER_LINE_NUMBERS\"] = 3] = \"GUTTER_LINE_NUMBERS\";\n  /**\n   * Mouse is on top of the line decorations\n   */\n  MouseTargetType[MouseTargetType[\"GUTTER_LINE_DECORATIONS\"] = 4] = \"GUTTER_LINE_DECORATIONS\";\n  /**\n   * Mouse is on top of the whitespace left in the gutter by a view zone.\n   */\n  MouseTargetType[MouseTargetType[\"GUTTER_VIEW_ZONE\"] = 5] = \"GUTTER_VIEW_ZONE\";\n  /**\n   * Mouse is on top of text in the content.\n   */\n  MouseTargetType[MouseTargetType[\"CONTENT_TEXT\"] = 6] = \"CONTENT_TEXT\";\n  /**\n   * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n   */\n  MouseTargetType[MouseTargetType[\"CONTENT_EMPTY\"] = 7] = \"CONTENT_EMPTY\";\n  /**\n   * Mouse is on top of a view zone in the content.\n   */\n  MouseTargetType[MouseTargetType[\"CONTENT_VIEW_ZONE\"] = 8] = \"CONTENT_VIEW_ZONE\";\n  /**\n   * Mouse is on top of a content widget.\n   */\n  MouseTargetType[MouseTargetType[\"CONTENT_WIDGET\"] = 9] = \"CONTENT_WIDGET\";\n  /**\n   * Mouse is on top of the decorations overview ruler.\n   */\n  MouseTargetType[MouseTargetType[\"OVERVIEW_RULER\"] = 10] = \"OVERVIEW_RULER\";\n  /**\n   * Mouse is on top of a scrollbar.\n   */\n  MouseTargetType[MouseTargetType[\"SCROLLBAR\"] = 11] = \"SCROLLBAR\";\n  /**\n   * Mouse is on top of an overlay widget.\n   */\n  MouseTargetType[MouseTargetType[\"OVERLAY_WIDGET\"] = 12] = \"OVERLAY_WIDGET\";\n  /**\n   * Mouse is outside of the editor.\n   */\n  MouseTargetType[MouseTargetType[\"OUTSIDE_EDITOR\"] = 13] = \"OUTSIDE_EDITOR\";\n})(MouseTargetType || (MouseTargetType = {}));\nvar NewSymbolNameTag;\n(function (NewSymbolNameTag) {\n  NewSymbolNameTag[NewSymbolNameTag[\"AIGenerated\"] = 1] = \"AIGenerated\";\n})(NewSymbolNameTag || (NewSymbolNameTag = {}));\nvar NewSymbolNameTriggerKind;\n(function (NewSymbolNameTriggerKind) {\n  NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n  NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));\n/**\n * A positioning preference for rendering overlay widgets.\n */\nvar OverlayWidgetPositionPreference;\n(function (OverlayWidgetPositionPreference) {\n  /**\n   * Position the overlay widget in the top right corner\n   */\n  OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_RIGHT_CORNER\"] = 0] = \"TOP_RIGHT_CORNER\";\n  /**\n   * Position the overlay widget in the bottom right corner\n   */\n  OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"BOTTOM_RIGHT_CORNER\"] = 1] = \"BOTTOM_RIGHT_CORNER\";\n  /**\n   * Position the overlay widget in the top center\n   */\n  OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n})(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nvar OverviewRulerLane;\n(function (OverviewRulerLane) {\n  OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n  OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n  OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n  OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * How a partial acceptance was triggered.\n */\nvar PartialAcceptTriggerKind;\n(function (PartialAcceptTriggerKind) {\n  PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Word\"] = 0] = \"Word\";\n  PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Line\"] = 1] = \"Line\";\n  PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Suggest\"] = 2] = \"Suggest\";\n})(PartialAcceptTriggerKind || (PartialAcceptTriggerKind = {}));\nvar PositionAffinity;\n(function (PositionAffinity) {\n  /**\n   * Prefers the left most position.\n  */\n  PositionAffinity[PositionAffinity[\"Left\"] = 0] = \"Left\";\n  /**\n   * Prefers the right most position.\n  */\n  PositionAffinity[PositionAffinity[\"Right\"] = 1] = \"Right\";\n  /**\n   * No preference.\n  */\n  PositionAffinity[PositionAffinity[\"None\"] = 2] = \"None\";\n  /**\n   * If the given position is on injected text, prefers the position left of it.\n  */\n  PositionAffinity[PositionAffinity[\"LeftOfInjectedText\"] = 3] = \"LeftOfInjectedText\";\n  /**\n   * If the given position is on injected text, prefers the position right of it.\n  */\n  PositionAffinity[PositionAffinity[\"RightOfInjectedText\"] = 4] = \"RightOfInjectedText\";\n})(PositionAffinity || (PositionAffinity = {}));\nvar RenderLineNumbersType;\n(function (RenderLineNumbersType) {\n  RenderLineNumbersType[RenderLineNumbersType[\"Off\"] = 0] = \"Off\";\n  RenderLineNumbersType[RenderLineNumbersType[\"On\"] = 1] = \"On\";\n  RenderLineNumbersType[RenderLineNumbersType[\"Relative\"] = 2] = \"Relative\";\n  RenderLineNumbersType[RenderLineNumbersType[\"Interval\"] = 3] = \"Interval\";\n  RenderLineNumbersType[RenderLineNumbersType[\"Custom\"] = 4] = \"Custom\";\n})(RenderLineNumbersType || (RenderLineNumbersType = {}));\nvar RenderMinimap;\n(function (RenderMinimap) {\n  RenderMinimap[RenderMinimap[\"None\"] = 0] = \"None\";\n  RenderMinimap[RenderMinimap[\"Text\"] = 1] = \"Text\";\n  RenderMinimap[RenderMinimap[\"Blocks\"] = 2] = \"Blocks\";\n})(RenderMinimap || (RenderMinimap = {}));\nvar ScrollType;\n(function (ScrollType) {\n  ScrollType[ScrollType[\"Smooth\"] = 0] = \"Smooth\";\n  ScrollType[ScrollType[\"Immediate\"] = 1] = \"Immediate\";\n})(ScrollType || (ScrollType = {}));\nvar ScrollbarVisibility;\n(function (ScrollbarVisibility) {\n  ScrollbarVisibility[ScrollbarVisibility[\"Auto\"] = 1] = \"Auto\";\n  ScrollbarVisibility[ScrollbarVisibility[\"Hidden\"] = 2] = \"Hidden\";\n  ScrollbarVisibility[ScrollbarVisibility[\"Visible\"] = 3] = \"Visible\";\n})(ScrollbarVisibility || (ScrollbarVisibility = {}));\n/**\n * The direction of a selection.\n */\nvar SelectionDirection;\n(function (SelectionDirection) {\n  /**\n   * The selection starts above where it ends.\n   */\n  SelectionDirection[SelectionDirection[\"LTR\"] = 0] = \"LTR\";\n  /**\n   * The selection starts below where it ends.\n   */\n  SelectionDirection[SelectionDirection[\"RTL\"] = 1] = \"RTL\";\n})(SelectionDirection || (SelectionDirection = {}));\nvar ShowLightbulbIconMode;\n(function (ShowLightbulbIconMode) {\n  ShowLightbulbIconMode[\"Off\"] = \"off\";\n  ShowLightbulbIconMode[\"OnCode\"] = \"onCode\";\n  ShowLightbulbIconMode[\"On\"] = \"on\";\n})(ShowLightbulbIconMode || (ShowLightbulbIconMode = {}));\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n  SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n  SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n  SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A symbol kind.\n */\nvar SymbolKind;\n(function (SymbolKind) {\n  SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\n  SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\n  SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\n  SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\n  SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\n  SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\n  SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\n  SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\n  SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\n  SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\n  SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\n  SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\n  SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\n  SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\n  SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\n  SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\n  SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\n  SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\n  SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\n  SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\n  SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\n  SymbolKind[SymbolKind[\"EnumMember\"] = 21] = \"EnumMember\";\n  SymbolKind[SymbolKind[\"Struct\"] = 22] = \"Struct\";\n  SymbolKind[SymbolKind[\"Event\"] = 23] = \"Event\";\n  SymbolKind[SymbolKind[\"Operator\"] = 24] = \"Operator\";\n  SymbolKind[SymbolKind[\"TypeParameter\"] = 25] = \"TypeParameter\";\n})(SymbolKind || (SymbolKind = {}));\nvar SymbolTag;\n(function (SymbolTag) {\n  SymbolTag[SymbolTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(SymbolTag || (SymbolTag = {}));\n/**\n * The kind of animation in which the editor's cursor should be rendered.\n */\nvar TextEditorCursorBlinkingStyle;\n(function (TextEditorCursorBlinkingStyle) {\n  /**\n   * Hidden\n   */\n  TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Hidden\"] = 0] = \"Hidden\";\n  /**\n   * Blinking\n   */\n  TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Blink\"] = 1] = \"Blink\";\n  /**\n   * Blinking with smooth fading\n   */\n  TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Smooth\"] = 2] = \"Smooth\";\n  /**\n   * Blinking with prolonged filled state and smooth fading\n   */\n  TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Phase\"] = 3] = \"Phase\";\n  /**\n   * Expand collapse animation on the y axis\n   */\n  TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Expand\"] = 4] = \"Expand\";\n  /**\n   * No-Blinking\n   */\n  TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Solid\"] = 5] = \"Solid\";\n})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));\n/**\n * The style in which the editor's cursor should be rendered.\n */\nvar TextEditorCursorStyle;\n(function (TextEditorCursorStyle) {\n  /**\n   * As a vertical line (sitting between two characters).\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n  /**\n   * As a block (sitting on top of a character).\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n  /**\n   * As a horizontal line (sitting under a character).\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n  /**\n   * As a thin vertical line (sitting between two characters).\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n  /**\n   * As an outlined block (sitting on top of a character).\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n  /**\n   * As a thin horizontal line (sitting under a character).\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nvar TrackedRangeStickiness;\n(function (TrackedRangeStickiness) {\n  TrackedRangeStickiness[TrackedRangeStickiness[\"AlwaysGrowsWhenTypingAtEdges\"] = 0] = \"AlwaysGrowsWhenTypingAtEdges\";\n  TrackedRangeStickiness[TrackedRangeStickiness[\"NeverGrowsWhenTypingAtEdges\"] = 1] = \"NeverGrowsWhenTypingAtEdges\";\n  TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingBefore\"] = 2] = \"GrowsOnlyWhenTypingBefore\";\n  TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingAfter\"] = 3] = \"GrowsOnlyWhenTypingAfter\";\n})(TrackedRangeStickiness || (TrackedRangeStickiness = {}));\n/**\n * Describes how to indent wrapped lines.\n */\nvar WrappingIndent;\n(function (WrappingIndent) {\n  /**\n   * No indentation => wrapped lines begin at column 1.\n   */\n  WrappingIndent[WrappingIndent[\"None\"] = 0] = \"None\";\n  /**\n   * Same => wrapped lines get the same indentation as the parent.\n   */\n  WrappingIndent[WrappingIndent[\"Same\"] = 1] = \"Same\";\n  /**\n   * Indent => wrapped lines get +1 indentation toward the parent.\n   */\n  WrappingIndent[WrappingIndent[\"Indent\"] = 2] = \"Indent\";\n  /**\n   * DeepIndent => wrapped lines get +2 indentation toward the parent.\n   */\n  WrappingIndent[WrappingIndent[\"DeepIndent\"] = 3] = \"DeepIndent\";\n})(WrappingIndent || (WrappingIndent = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TokenizationRegistry\": function() { return /* binding */ TokenizationRegistry; }\n/* harmony export */ });\n/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass TokenizationRegistry {\n  constructor() {\n    this._tokenizationSupports = new Map();\n    this._factories = new Map();\n    this._onDidChange = new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this._colorMap = null;\n  }\n  handleChange(languageIds) {\n    this._onDidChange.fire({\n      changedLanguages: languageIds,\n      changedColorMap: false\n    });\n  }\n  register(languageId, support) {\n    this._tokenizationSupports.set(languageId, support);\n    this.handleChange([languageId]);\n    return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {\n      if (this._tokenizationSupports.get(languageId) !== support) {\n        return;\n      }\n      this._tokenizationSupports.delete(languageId);\n      this.handleChange([languageId]);\n    });\n  }\n  get(languageId) {\n    return this._tokenizationSupports.get(languageId) || null;\n  }\n  registerFactory(languageId, factory) {\n    var _a;\n    (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n    const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n    this._factories.set(languageId, myData);\n    return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {\n      const v = this._factories.get(languageId);\n      if (!v || v !== myData) {\n        return;\n      }\n      this._factories.delete(languageId);\n      v.dispose();\n    });\n  }\n  async getOrCreate(languageId) {\n    // check first if the support is already set\n    const tokenizationSupport = this.get(languageId);\n    if (tokenizationSupport) {\n      return tokenizationSupport;\n    }\n    const factory = this._factories.get(languageId);\n    if (!factory || factory.isResolved) {\n      // no factory or factory.resolve already finished\n      return null;\n    }\n    await factory.resolve();\n    return this.get(languageId);\n  }\n  isResolved(languageId) {\n    const tokenizationSupport = this.get(languageId);\n    if (tokenizationSupport) {\n      return true;\n    }\n    const factory = this._factories.get(languageId);\n    if (!factory || factory.isResolved) {\n      return true;\n    }\n    return false;\n  }\n  setColorMap(colorMap) {\n    this._colorMap = colorMap;\n    this._onDidChange.fire({\n      changedLanguages: Array.from(this._tokenizationSupports.keys()),\n      changedColorMap: true\n    });\n  }\n  getColorMap() {\n    return this._colorMap;\n  }\n  getDefaultBackground() {\n    if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n      return this._colorMap[2 /* ColorId.DefaultBackground */];\n    }\n    return null;\n  }\n}\nclass TokenizationSupportFactoryData extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {\n  get isResolved() {\n    return this._isResolved;\n  }\n  constructor(_registry, _languageId, _factory) {\n    super();\n    this._registry = _registry;\n    this._languageId = _languageId;\n    this._factory = _factory;\n    this._isDisposed = false;\n    this._resolvePromise = null;\n    this._isResolved = false;\n  }\n  dispose() {\n    this._isDisposed = true;\n    super.dispose();\n  }\n  async resolve() {\n    if (!this._resolvePromise) {\n      this._resolvePromise = this._create();\n    }\n    return this._resolvePromise;\n  }\n  async _create() {\n    const value = await this._factory.tokenizationSupport;\n    this._isResolved = true;\n    if (value && !this._isDisposed) {\n      this._register(this._registry.register(this._languageId, value));\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/editor.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initialize\": function() { return /* binding */ initialize; }\n/* harmony export */ });\n/* harmony import */ var _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/common/worker/simpleWorker.js */ \"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js\");\n/* harmony import */ var _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/services/editorSimpleWorker.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nlet initialized = false;\nfunction initialize(foreignModule) {\n  if (initialized) {\n    return;\n  }\n  initialized = true;\n  const simpleWorker = new _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__.SimpleWorkerServer(msg => {\n    globalThis.postMessage(msg);\n  }, host => new _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__.EditorSimpleWorker(host, foreignModule));\n  globalThis.onmessage = e => {\n    simpleWorker.onmessage(e.data);\n  };\n}\nglobalThis.onmessage = e => {\n  // Ignore first message in this case and initialize if not yet initialized\n  if (!initialized) {\n    initialize(null);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2VkaXRvci53b3JrZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDMkU7QUFDRTtBQUM3RSxJQUFJRSxXQUFXLEdBQUcsS0FBSztBQUNoQixTQUFTQyxVQUFVQSxDQUFDQyxhQUFhLEVBQUU7RUFDdEMsSUFBSUYsV0FBVyxFQUFFO0lBQ2I7RUFDSjtFQUNBQSxXQUFXLEdBQUcsSUFBSTtFQUNsQixNQUFNRyxZQUFZLEdBQUcsSUFBSUwsbUZBQWtCLENBQUVNLEdBQUcsSUFBSztJQUNqREMsVUFBVSxDQUFDQyxXQUFXLENBQUNGLEdBQUcsQ0FBQztFQUMvQixDQUFDLEVBQUdHLElBQUksSUFBSyxJQUFJUixzRkFBa0IsQ0FBQ1EsSUFBSSxFQUFFTCxhQUFhLENBQUMsQ0FBQztFQUN6REcsVUFBVSxDQUFDRyxTQUFTLEdBQUlDLENBQUMsSUFBSztJQUMxQk4sWUFBWSxDQUFDSyxTQUFTLENBQUNDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO0VBQ2xDLENBQUM7QUFDTDtBQUNBTCxVQUFVLENBQUNHLFNBQVMsR0FBSUMsQ0FBQyxJQUFLO0VBQzFCO0VBQ0EsSUFBSSxDQUFDVCxXQUFXLEVBQUU7SUFDZEMsVUFBVSxDQUFDLElBQUksQ0FBQztFQUNwQjtBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9lZGl0b3Iud29ya2VyLmpzP2EyNjciXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBTaW1wbGVXb3JrZXJTZXJ2ZXIgfSBmcm9tICcuLi9iYXNlL2NvbW1vbi93b3JrZXIvc2ltcGxlV29ya2VyLmpzJztcbmltcG9ydCB7IEVkaXRvclNpbXBsZVdvcmtlciB9IGZyb20gJy4vY29tbW9uL3NlcnZpY2VzL2VkaXRvclNpbXBsZVdvcmtlci5qcyc7XG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKGZvcmVpZ25Nb2R1bGUpIHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc3Qgc2ltcGxlV29ya2VyID0gbmV3IFNpbXBsZVdvcmtlclNlcnZlcigobXNnKSA9PiB7XG4gICAgICAgIGdsb2JhbFRoaXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICB9LCAoaG9zdCkgPT4gbmV3IEVkaXRvclNpbXBsZVdvcmtlcihob3N0LCBmb3JlaWduTW9kdWxlKSk7XG4gICAgZ2xvYmFsVGhpcy5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgICBzaW1wbGVXb3JrZXIub25tZXNzYWdlKGUuZGF0YSk7XG4gICAgfTtcbn1cbmdsb2JhbFRoaXMub25tZXNzYWdlID0gKGUpID0+IHtcbiAgICAvLyBJZ25vcmUgZmlyc3QgbWVzc2FnZSBpbiB0aGlzIGNhc2UgYW5kIGluaXRpYWxpemUgaWYgbm90IHlldCBpbml0aWFsaXplZFxuICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgaW5pdGlhbGl6ZShudWxsKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIlNpbXBsZVdvcmtlclNlcnZlciIsIkVkaXRvclNpbXBsZVdvcmtlciIsImluaXRpYWxpemVkIiwiaW5pdGlhbGl6ZSIsImZvcmVpZ25Nb2R1bGUiLCJzaW1wbGVXb3JrZXIiLCJtc2ciLCJnbG9iYWxUaGlzIiwicG9zdE1lc3NhZ2UiLCJob3N0Iiwib25tZXNzYWdlIiwiZSIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/editor.worker.js\n"));

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/nls.js":
/*!**************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/nls.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"create\": function() { return /* binding */ create; },\n/* harmony export */   \"getConfiguredDefaultLocale\": function() { return /* binding */ getConfiguredDefaultLocale; },\n/* harmony export */   \"load\": function() { return /* binding */ load; },\n/* harmony export */   \"localize\": function() { return /* binding */ localize; },\n/* harmony export */   \"localize2\": function() { return /* binding */ localize2; },\n/* harmony export */   \"setPseudoTranslation\": function() { return /* binding */ setPseudoTranslation; }\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nlet isPseudo = typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0;\nconst DEFAULT_TAG = 'i-default';\nfunction _format(message, args) {\n  let result;\n  if (args.length === 0) {\n    result = message;\n  } else {\n    result = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n      const index = rest[0];\n      const arg = args[index];\n      let result = match;\n      if (typeof arg === 'string') {\n        result = arg;\n      } else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n        result = String(arg);\n      }\n      return result;\n    });\n  }\n  if (isPseudo) {\n    // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n    result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n  }\n  return result;\n}\nfunction findLanguageForModule(config, name) {\n  let result = config[name];\n  if (result) {\n    return result;\n  }\n  result = config['*'];\n  if (result) {\n    return result;\n  }\n  return null;\n}\nfunction endWithSlash(path) {\n  if (path.charAt(path.length - 1) === '/') {\n    return path;\n  }\n  return path + '/';\n}\nasync function getMessagesFromTranslationsService(translationServiceUrl, language, name) {\n  const url = endWithSlash(translationServiceUrl) + endWithSlash(language) + 'vscode/' + endWithSlash(name);\n  const res = await fetch(url);\n  if (res.ok) {\n    const messages = await res.json();\n    return messages;\n  }\n  throw new Error(`${res.status} - ${res.statusText}`);\n}\nfunction createScopedLocalize(scope) {\n  return function (idx, defaultValue) {\n    const restArgs = Array.prototype.slice.call(arguments, 2);\n    return _format(scope[idx], restArgs);\n  };\n}\nfunction createScopedLocalize2(scope) {\n  return (idx, defaultValue, ...args) => ({\n    value: _format(scope[idx], args),\n    original: _format(defaultValue, args)\n  });\n}\n/**\n * @skipMangle\n */\nfunction localize(data, message, ...args) {\n  return _format(message, args);\n}\n/**\n * @skipMangle\n */\nfunction localize2(data, message, ...args) {\n  const original = _format(message, args);\n  return {\n    value: original,\n    original\n  };\n}\n/**\n * @skipMangle\n */\nfunction getConfiguredDefaultLocale(_) {\n  // This returns undefined because this implementation isn't used and is overwritten by the loader\n  // when loaded.\n  return undefined;\n}\n/**\n * @skipMangle\n */\nfunction setPseudoTranslation(value) {\n  isPseudo = value;\n}\n/**\n * Invoked in a built product at run-time\n * @skipMangle\n */\nfunction create(key, data) {\n  var _a;\n  return {\n    localize: createScopedLocalize(data[key]),\n    localize2: createScopedLocalize2(data[key]),\n    getConfiguredDefaultLocale: (_a = data.getConfiguredDefaultLocale) !== null && _a !== void 0 ? _a : _ => undefined\n  };\n}\n/**\n * Invoked by the loader at run-time\n * @skipMangle\n */\nfunction load(name, req, load, config) {\n  var _a;\n  const pluginConfig = (_a = config['vs/nls']) !== null && _a !== void 0 ? _a : {};\n  if (!name || name.length === 0) {\n    // TODO: We need to give back the mangled names here\n    return load({\n      localize: localize,\n      localize2: localize2,\n      getConfiguredDefaultLocale: () => {\n        var _a;\n        return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*'];\n      }\n    });\n  }\n  const language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n  const useDefaultLanguage = language === null || language === DEFAULT_TAG;\n  let suffix = '.nls';\n  if (!useDefaultLanguage) {\n    suffix = suffix + '.' + language;\n  }\n  const messagesLoaded = messages => {\n    if (Array.isArray(messages)) {\n      messages.localize = createScopedLocalize(messages);\n      messages.localize2 = createScopedLocalize2(messages);\n    } else {\n      messages.localize = createScopedLocalize(messages[name]);\n      messages.localize2 = createScopedLocalize2(messages[name]);\n    }\n    messages.getConfiguredDefaultLocale = () => {\n      var _a;\n      return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*'];\n    };\n    load(messages);\n  };\n  if (typeof pluginConfig.loadBundle === 'function') {\n    pluginConfig.loadBundle(name, language, (err, messages) => {\n      // We have an error. Load the English default strings to not fail\n      if (err) {\n        req([name + '.nls'], messagesLoaded);\n      } else {\n        messagesLoaded(messages);\n      }\n    });\n  } else if (pluginConfig.translationServiceUrl && !useDefaultLanguage) {\n    (async () => {\n      var _a;\n      try {\n        const messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, language, name);\n        return messagesLoaded(messages);\n      } catch (err) {\n        // Language is already as generic as it gets, so require default messages\n        if (!language.includes('-')) {\n          console.error(err);\n          return req([name + '.nls'], messagesLoaded);\n        }\n        try {\n          // Since there is a dash, the language configured is a specific sub-language of the same generic language.\n          // Since we were unable to load the specific language, try to load the generic language. Ex. we failed to find a\n          // Swiss German (de-CH), so try to load the generic German (de) messages instead.\n          const genericLanguage = language.split('-')[0];\n          const messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, genericLanguage, name);\n          // We got some messages, so we configure the configuration to use the generic language for this session.\n          (_a = pluginConfig.availableLanguages) !== null && _a !== void 0 ? _a : pluginConfig.availableLanguages = {};\n          pluginConfig.availableLanguages['*'] = genericLanguage;\n          return messagesLoaded(messages);\n        } catch (err) {\n          console.error(err);\n          return req([name + '.nls'], messagesLoaded);\n        }\n      }\n    })();\n  } else {\n    req([name + suffix], messagesLoaded, err => {\n      if (suffix === '.nls') {\n        console.error('Failed trying to load default language strings', err);\n        return;\n      }\n      console.error(`Failed to load message bundle for language ${language}. Falling back to the default language:`, err);\n      req([name + '.nls'], messagesLoaded);\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/nls.js\n"));

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  }\n  // if setTimeout wasn't available but was latter defined\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  }\n  // if clearTimeout wasn't available but was latter defined\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n  draining = false;\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n  if (queue.length) {\n    drainQueue();\n  }\n}\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n    queueIndex = -1;\n    len = queue.length;\n  }\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n  queue.push(new Item(fun, args));\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function (name) {\n  return [];\n};\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\nprocess.cwd = function () {\n  return '/';\n};\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () {\n  return 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	!function() {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = function(chunkId) {
/******/ 			// return url for filenames based on template
/******/ 			return "static/webpack/" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	!function() {
/******/ 		__webpack_require__.hmrF = function() { return "static/webpack/" + __webpack_require__.h() + ".5436801a48a90db5.hot-update.json"; };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	!function() {
/******/ 		__webpack_require__.h = function() { return "0b1a9dc38faea865"; }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types policy */
/******/ 	!function() {
/******/ 		var policy;
/******/ 		__webpack_require__.tt = function() {
/******/ 			// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.
/******/ 			if (policy === undefined) {
/******/ 				policy = {
/******/ 					createScript: function(script) { return script; },
/******/ 					createScriptURL: function(url) { return url; }
/******/ 				};
/******/ 				if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {
/******/ 					policy = trustedTypes.createPolicy("nextjs#bundler", policy);
/******/ 				}
/******/ 			}
/******/ 			return policy;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script */
/******/ 	!function() {
/******/ 		__webpack_require__.ts = function(script) { return __webpack_require__.tt().createScript(script); };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script url */
/******/ 	!function() {
/******/ 		__webpack_require__.tu = function(url) { return __webpack_require__.tt().createScriptURL(url); };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	!function() {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		// eslint-disable-next-line no-unused-vars
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId) {
/******/ 				return trackBlockingPromise(require.e(chunkId));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				//inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results);
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							},
/******/ 							[])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								} else {
/******/ 									return setStatus("ready").then(function () {
/******/ 										return updatedModules;
/******/ 									});
/******/ 								}
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		__webpack_require__.p = "/_next/";
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/react refresh */
/******/ 	!function() {
/******/ 		if (__webpack_require__.i) {
/******/ 		__webpack_require__.i.push(function(options) {
/******/ 			var originalFactory = options.factory;
/******/ 			options.factory = function(moduleObject, moduleExports, webpackRequire) {
/******/ 				var hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
/******/ 				var cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : function() {};
/******/ 				try {
/******/ 					originalFactory.call(this, moduleObject, moduleExports, webpackRequire);
/******/ 				} finally {
/******/ 					cleanup();
/******/ 				}
/******/ 			}
/******/ 		})
/******/ 		}
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	// noop fns to prevent runtime errors during initialization
/******/ 	if (typeof self !== "undefined") {
/******/ 		self.$RefreshReg$ = function () {};
/******/ 		self.$RefreshSig$ = function () {
/******/ 			return function (type) {
/******/ 				return type;
/******/ 			};
/******/ 		};
/******/ 	}
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = __webpack_require__.hmrS_importScripts = __webpack_require__.hmrS_importScripts || {
/******/ 			"node_modules_monaco-editor_esm_vs_editor_editor_worker_js": 1
/******/ 		};
/******/ 		
/******/ 		// no chunk install function needed
/******/ 		// no chunk loading
/******/ 		
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			var success = false;
/******/ 			self["webpackHotUpdate_N_E"] = function(_, moreModules, runtime) {
/******/ 				for(var moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						currentUpdate[moduleId] = moreModules[moduleId];
/******/ 						if(updatedModulesList) updatedModulesList.push(moduleId);
/******/ 					}
/******/ 				}
/******/ 				if(runtime) currentUpdateRuntime.push(runtime);
/******/ 				success = true;
/******/ 			};
/******/ 			// start update chunk loading
/******/ 			importScripts(__webpack_require__.tu(__webpack_require__.p + __webpack_require__.hu(chunkId)));
/******/ 			if(!success) throw new Error("Loading update chunk failed for unknown reason");
/******/ 		}
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.importScripsHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result;
/******/ 					if (newModuleFactory) {
/******/ 						result = getAffectedModuleEffects(moduleId);
/******/ 					} else {
/******/ 						result = {
/******/ 							type: "disposed",
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err2) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err2,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err2);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.importScrips = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.importScrips = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.importScripsHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = function() {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then(function(response) {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/monaco-editor/esm/vs/editor/editor.worker.js");
/******/ 	_N_E = __webpack_exports__;
/******/ 	
/******/ })()
;